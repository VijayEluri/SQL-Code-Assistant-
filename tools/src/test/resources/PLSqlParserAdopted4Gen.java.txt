// $ANTLR 2.7.5 (20050128): "plsql_parser_ex.g" -> "PLSqlParserAdopted.java"$

package com.deepsky.generated.plsql.adopted;

import antlr.TokenBuffer;
import antlr.TokenStreamException;
import antlr.TokenStreamIOException;
import antlr.ANTLRException;
import antlr.LLkParser;
import antlr.Token;
import antlr.TokenStream;
import antlr.RecognitionException;
import antlr.NoViableAltException;
import antlr.MismatchedTokenException;
import antlr.SemanticException;
import antlr.ParserSharedInputState;
import antlr.collections.impl.BitSet;

public class PLSqlParserAdopted extends LLkParser       implements PLSqlTokenTypes
 {

    protected int depth = 0;
    protected int returnType = -1;
    public void __markRule(int type){
        returnType = type;
    }

    final int _NO_WS_ = 0;
    final int _KEEP_WS_ = 1;
    final int _SINGLE_WS_ = 2;
    final int _NEWLINE_WS_ = 3;

//    public void handle_ws( int action ){
//    }

    protected void process_wrapped_package(String package_name){
        // default action if the package is wrapped
        throw new com.deepsky.lang.plsql.parser.WrappedPackageException(package_name);
    }

    boolean isTypeName(Token t){
        return true;
    }

    protected boolean recoverErrorAndCheckEOF() throws TokenStreamException, MismatchedTokenException {
        throw new Error("recoverErrorAndCheckEOF() should be overridden in derived classes!");
    }

protected PLSqlParserAdopted(TokenBuffer tokenBuf, int k) {
  super(tokenBuf,k);
  tokenNames = _tokenNames;
}

public PLSqlParserAdopted(TokenBuffer tokenBuf) {
  this(tokenBuf,3);
}

protected PLSqlParserAdopted(TokenStream lexer, int k) {
  super(lexer,k);
  tokenNames = _tokenNames;
}

public PLSqlParserAdopted(TokenStream lexer) {
  this(lexer,3);
}

public PLSqlParserAdopted(ParserSharedInputState state) {
  super(state,3);
  tokenNames = _tokenNames;
}

	public void no_one_should_call_me() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			identifier();
			if ( inputState.guessing==0 ) {
				__markRule(ERROR_TOKEN_A);
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_0);
			} else {
			  throw ex;
			}
		}
	}
	
	public void identifier() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			{
			switch ( LA(1)) {
			case IDENTIFIER:
			{
				match(IDENTIFIER);
				break;
			}
			case DOUBLE_QUOTED_STRING:
			{
				match(DOUBLE_QUOTED_STRING);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_1);
			} else {
			  throw ex;
			}
		}
	}
	
	public void start_rule() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			{
			_loop4:
			do {
				if ((_tokenSet_2.member(LA(1))) && (_tokenSet_3.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
					start_rule_inner();
				}
				else if ((LA(1)==LITERAL_create) && (_tokenSet_4.member(LA(2))) && (_tokenSet_5.member(LA(3)))) {
					create_or_replace();
				}
//                else if(true){
				else if ((_tokenSet_6.member(LA(1))) && (_tokenSet_3.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
					if ( inputState.guessing==0 ) {
						
						if(!recoverErrorAndCheckEOF()){
						break;
						}
						/*
						if (LA(1)==EOF) {
						match(EOF);
						break;
						} else {
						// consume();
						// consumeUntil(_tokenSet_2);
						recover(null,_tokenSet_2);
						}
						*/
						
					}
				}
				else {
					break _loop4;
				}
				
			} while (true);
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_0);
			} else {
			  throw ex;
			}
		}
	}
	
	public void start_rule_inner() throws RecognitionException, TokenStreamException {
		
		Integer retVal = -1;
		
		try {      // for error handling
			{
			switch ( LA(1)) {
			case LITERAL_function:
			{
				{
				retVal=function_body();
				}
				if ( inputState.guessing==0 ) {
					__markRule(retVal);
				}
				break;
			}
			case LITERAL_procedure:
			{
				{
				retVal=procedure_body();
				}
				if ( inputState.guessing==0 ) {
					__markRule(retVal);
				}
				break;
			}
			case LITERAL_trigger:
			{
				create_trigger();
				if ( inputState.guessing==0 ) {
					__markRule(CREATE_TRIGGER);
				}
				break;
			}
			case OPEN_PAREN:
			case LITERAL_select:
			{
				select_command();
				break;
			}
			case LITERAL_insert:
			{
				insert_command();
				break;
			}
			case LITERAL_update:
			{
				update_command();
				if ( inputState.guessing==0 ) {
					__markRule(UPDATE_COMMAND);
				}
				break;
			}
			case LITERAL_delete:
			{
				delete_command();
				if ( inputState.guessing==0 ) {
					__markRule(DELETE_COMMAND);
				}
				break;
			}
			case LITERAL_merge:
			{
				merge_command();
				if ( inputState.guessing==0 ) {
					__markRule(MERGE_COMMAND);
				}
				break;
			}
			case LITERAL_grant:
			{
				grant_command();
				if ( inputState.guessing==0 ) {
					__markRule(GRANT_COMMAND);
				}
				break;
			}
			case LITERAL_revoke:
			{
				revoke_command();
				if ( inputState.guessing==0 ) {
					__markRule(REVOKE_COMMAND);
				}
				break;
			}
			case LITERAL_rollback:
			{
				rollback_statement();
				if ( inputState.guessing==0 ) {
					__markRule(ROLLBACK_STATEMENT);
				}
				break;
			}
			case LITERAL_commit:
			{
				commit_statement();
				if ( inputState.guessing==0 ) {
					__markRule(COMMIT_STATEMENT);
				}
				break;
			}
			case LITERAL_alter:
			{
				{
				alter_command();
				}
				break;
			}
			case LITERAL_associate:
			{
				associate_statistics();
				break;
			}
			case LITERAL_comment:
			{
				comment();
				break;
			}
			case LITERAL_type:
			{
				type_definition();
				break;
			}
			case LITERAL_drop:
			{
				drop_command();
				break;
			}
			case LITERAL_truncate:
			{
				truncate_command();
				break;
			}
			case AT_PREFIXED:
			case LITERAL_column:
			case LITERAL_set:
			case LITERAL_show:
			case LITERAL_var:
			case LITERAL_variable:
			case LITERAL_col:
			case LITERAL_exec:
			case LITERAL_execute:
			case LITERAL_whenever:
			case LITERAL_exit:
			case LITERAL_def:
			case LITERAL_define:
			case LITERAL_prompt:
			case LITERAL_rem:
			case LITERAL_host:
			case LITERAL_quit:
			case LITERAL_spool:
			case LITERAL_sta:
			case LITERAL_start:
			case LITERAL_repfooter:
			case LITERAL_repheader:
			case LITERAL_serveroutput:
			case LITERAL_begin:
			case LITERAL_declare:
			{
				sqlplus_command_internal();
				break;
			}
			default:
				boolean synPredMatched8 = false;
				if (((LA(1)==LITERAL_package) && (_tokenSet_7.member(LA(2))) && (_tokenSet_8.member(LA(3))))) {
					int _m8 = mark();
					synPredMatched8 = true;
					inputState.guessing++;
					try {
						{
						match(LITERAL_package);
						match(LITERAL_body);
						}
					}
					catch (RecognitionException pe) {
						synPredMatched8 = false;
					}
					rewind(_m8);
					inputState.guessing--;
				}
				if ( synPredMatched8 ) {
					package_body();
					if ( inputState.guessing==0 ) {
						__markRule(PACKAGE_BODY);
					}
				}
				else {
					boolean synPredMatched10 = false;
					if (((LA(1)==LITERAL_package) && (_tokenSet_7.member(LA(2))) && (_tokenSet_9.member(LA(3))))) {
						int _m10 = mark();
						synPredMatched10 = true;
						inputState.guessing++;
						try {
							{
							match(LITERAL_package);
							}
						}
						catch (RecognitionException pe) {
							synPredMatched10 = false;
						}
						rewind(_m10);
						inputState.guessing--;
					}
					if ( synPredMatched10 ) {
						package_spec();
						if ( inputState.guessing==0 ) {
							__markRule(PACKAGE_SPEC);
						}
					}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				}}
				}
				{
				switch ( LA(1)) {
				case SEMI:
				{
					match(SEMI);
					break;
				}
				case EOF:
				case AT_PREFIXED:
				case OPEN_PAREN:
				case DIVIDE:
				case LITERAL_package:
				case LITERAL_alter:
				case LITERAL_drop:
				case LITERAL_function:
				case LITERAL_procedure:
				case LITERAL_type:
				case LITERAL_trigger:
				case LITERAL_associate:
				case LITERAL_column:
				case LITERAL_truncate:
				case LITERAL_comment:
				case LITERAL_set:
				case LITERAL_show:
				case LITERAL_var:
				case LITERAL_variable:
				case LITERAL_col:
				case LITERAL_exec:
				case LITERAL_execute:
				case LITERAL_whenever:
				case LITERAL_exit:
				case LITERAL_commit:
				case LITERAL_rollback:
				case LITERAL_def:
				case LITERAL_define:
				case LITERAL_prompt:
				case LITERAL_rem:
				case LITERAL_host:
				case LITERAL_quit:
				case LITERAL_spool:
				case LITERAL_sta:
				case LITERAL_start:
				case LITERAL_repfooter:
				case LITERAL_repheader:
				case LITERAL_serveroutput:
				case LITERAL_begin:
				case LITERAL_declare:
				case LITERAL_create:
				case LITERAL_grant:
				case LITERAL_revoke:
				case LITERAL_delete:
				case LITERAL_insert:
				case LITERAL_update:
				case LITERAL_select:
				case LITERAL_merge:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				{
				switch ( LA(1)) {
				case DIVIDE:
				{
					match(DIVIDE);
					break;
				}
				case EOF:
				case AT_PREFIXED:
				case OPEN_PAREN:
				case LITERAL_package:
				case LITERAL_alter:
				case LITERAL_drop:
				case LITERAL_function:
				case LITERAL_procedure:
				case LITERAL_type:
				case LITERAL_trigger:
				case LITERAL_associate:
				case LITERAL_column:
				case LITERAL_truncate:
				case LITERAL_comment:
				case LITERAL_set:
				case LITERAL_show:
				case LITERAL_var:
				case LITERAL_variable:
				case LITERAL_col:
				case LITERAL_exec:
				case LITERAL_execute:
				case LITERAL_whenever:
				case LITERAL_exit:
				case LITERAL_commit:
				case LITERAL_rollback:
				case LITERAL_def:
				case LITERAL_define:
				case LITERAL_prompt:
				case LITERAL_rem:
				case LITERAL_host:
				case LITERAL_quit:
				case LITERAL_spool:
				case LITERAL_sta:
				case LITERAL_start:
				case LITERAL_repfooter:
				case LITERAL_repheader:
				case LITERAL_serveroutput:
				case LITERAL_begin:
				case LITERAL_declare:
				case LITERAL_create:
				case LITERAL_grant:
				case LITERAL_revoke:
				case LITERAL_delete:
				case LITERAL_insert:
				case LITERAL_update:
				case LITERAL_select:
				case LITERAL_merge:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
			}
			catch (RecognitionException ex) {
				if (inputState.guessing==0) {
					reportError(ex);
					recover(ex,_tokenSet_6);
				} else {
				  throw ex;
				}
			}
		}
		
	public void create_or_replace() throws RecognitionException, TokenStreamException {
		
		Integer retVal = -1;
		
		try {      // for error handling
			match(LITERAL_create);
			{
			switch ( LA(1)) {
			case LITERAL_or:
			{
				match(LITERAL_or);
				match(LITERAL_replace);
				break;
			}
			case LITERAL_package:
			case LITERAL_table:
			case LITERAL_view:
			case LITERAL_function:
			case LITERAL_procedure:
			case LITERAL_index:
			case LITERAL_force:
			case LITERAL_sequence:
			case LITERAL_type:
			case LITERAL_public:
			case LITERAL_synonym:
			case LITERAL_user:
			case LITERAL_directory:
			case LITERAL_database:
			case LITERAL_trigger:
			case LITERAL_unique:
			case LITERAL_global:
			case LITERAL_temporary:
			case LITERAL_tablespace:
			case LITERAL_bigfile:
			case LITERAL_smallfile:
			case LITERAL_undo:
			case LITERAL_bitmap:
			case 678:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_force:
			{
				match(LITERAL_force);
				break;
			}
			case LITERAL_package:
			case LITERAL_table:
			case LITERAL_view:
			case LITERAL_function:
			case LITERAL_procedure:
			case LITERAL_index:
			case LITERAL_sequence:
			case LITERAL_type:
			case LITERAL_public:
			case LITERAL_synonym:
			case LITERAL_user:
			case LITERAL_directory:
			case LITERAL_database:
			case LITERAL_trigger:
			case LITERAL_unique:
			case LITERAL_global:
			case LITERAL_temporary:
			case LITERAL_tablespace:
			case LITERAL_bigfile:
			case LITERAL_smallfile:
			case LITERAL_undo:
			case LITERAL_bitmap:
			case 678:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_procedure:
			{
				{
				retVal=procedure_body();
				}
				if ( inputState.guessing==0 ) {
					__markRule(retVal);
				}
				break;
			}
			case LITERAL_function:
			{
				{
				retVal=function_body();
				}
				if ( inputState.guessing==0 ) {
					__markRule(retVal);
				}
				break;
			}
			case LITERAL_view:
			{
				{
				create_view();
				}
				if ( inputState.guessing==0 ) {
					__markRule(CREATE_VIEW);
				}
				break;
			}
			case 678:
			{
				{
				create_view_column_def();
				{
				if ((LA(1)==SEMI) && (_tokenSet_10.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
					match(SEMI);
				}
				else if ((_tokenSet_10.member(LA(1))) && (_tokenSet_3.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				}
				if ( inputState.guessing==0 ) {
					__markRule(CREATE_VIEW_COLUMN_DEF);
				}
				break;
			}
			case LITERAL_table:
			{
				{
				create_table();
				}
				if ( inputState.guessing==0 ) {
					__markRule(TABLE_DEF);
				}
				break;
			}
			case LITERAL_index:
			case LITERAL_unique:
			case LITERAL_bitmap:
			{
				{
				create_index();
				}
				if ( inputState.guessing==0 ) {
					__markRule(CREATE_INDEX);
				}
				break;
			}
			case LITERAL_trigger:
			{
				{
				create_trigger();
				}
				if ( inputState.guessing==0 ) {
					__markRule(CREATE_TRIGGER);
				}
				break;
			}
			case LITERAL_directory:
			{
				{
				create_directory();
				}
				if ( inputState.guessing==0 ) {
					__markRule(CREATE_DIRECTORY);
				}
				break;
			}
			case LITERAL_database:
			{
				{
				create_db_link();
				}
				if ( inputState.guessing==0 ) {
					__markRule(CREATE_DB_LINK);
				}
				break;
			}
			case LITERAL_sequence:
			{
				{
				create_sequence();
				}
				if ( inputState.guessing==0 ) {
					__markRule(CREATE_SEQUENCE);
				}
				break;
			}
			case LITERAL_public:
			case LITERAL_synonym:
			{
				{
				{
				switch ( LA(1)) {
				case LITERAL_public:
				{
					match(LITERAL_public);
					break;
				}
				case LITERAL_synonym:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				create_synonym();
				}
				if ( inputState.guessing==0 ) {
					__markRule(CREATE_SYNONYM);
				}
				break;
			}
			case LITERAL_user:
			{
				{
				create_user();
				}
				if ( inputState.guessing==0 ) {
					__markRule(CREATE_USER);
				}
				break;
			}
			case LITERAL_type:
			{
				{
				match(LITERAL_type);
				{
				if ((_tokenSet_7.member(LA(1))) && (LA(2)==DOT)) {
					schema_name();
					match(DOT);
				}
				else if ((_tokenSet_7.member(LA(1))) && (LA(2)==LITERAL_is||LA(2)==LITERAL_under||LA(2)==LITERAL_as)) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				type_name();
				{
				switch ( LA(1)) {
				case LITERAL_under:
				{
					{
					match(LITERAL_under);
					{
					if ((_tokenSet_7.member(LA(1))) && (LA(2)==DOT) && (_tokenSet_11.member(LA(3)))) {
						schema_name();
						match(DOT);
					}
					else if ((_tokenSet_11.member(LA(1))) && (LA(2)==DOT||LA(2)==OPEN_PAREN) && (_tokenSet_11.member(LA(3)))) {
					}
					else {
						throw new NoViableAltException(LT(1), getFilename());
					}
					
					}
					type_name_ref();
					match(OPEN_PAREN);
					record_item();
					{
					_loop249:
					do {
						if ((LA(1)==COMMA)) {
							match(COMMA);
							record_item();
						}
						else {
							break _loop249;
						}
						
					} while (true);
					}
					match(CLOSE_PAREN);
					{
					switch ( LA(1)) {
					case LITERAL_not:
					{
						match(LITERAL_not);
						match(LITERAL_final);
						break;
					}
					case EOF:
					case AT_PREFIXED:
					case SEMI:
					case OPEN_PAREN:
					case LITERAL_package:
					case LITERAL_alter:
					case LITERAL_drop:
					case LITERAL_function:
					case LITERAL_procedure:
					case LITERAL_type:
					case LITERAL_trigger:
					case LITERAL_associate:
					case LITERAL_column:
					case LITERAL_truncate:
					case LITERAL_comment:
					case LITERAL_set:
					case LITERAL_show:
					case LITERAL_var:
					case LITERAL_variable:
					case LITERAL_col:
					case LITERAL_exec:
					case LITERAL_execute:
					case LITERAL_whenever:
					case LITERAL_exit:
					case LITERAL_commit:
					case LITERAL_rollback:
					case LITERAL_def:
					case LITERAL_define:
					case LITERAL_prompt:
					case LITERAL_rem:
					case LITERAL_host:
					case LITERAL_quit:
					case LITERAL_spool:
					case LITERAL_sta:
					case LITERAL_start:
					case LITERAL_repfooter:
					case LITERAL_repheader:
					case LITERAL_serveroutput:
					case LITERAL_begin:
					case LITERAL_declare:
					case LITERAL_create:
					case LITERAL_grant:
					case LITERAL_revoke:
					case LITERAL_delete:
					case LITERAL_insert:
					case LITERAL_update:
					case LITERAL_select:
					case LITERAL_merge:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(LT(1), getFilename());
					}
					}
					}
					}
					if ( inputState.guessing==0 ) {
						__markRule(OBJECT_TYPE_DEF);
					}
					break;
				}
				case LITERAL_is:
				case LITERAL_as:
				{
					{
					{
					switch ( LA(1)) {
					case LITERAL_as:
					{
						match(LITERAL_as);
						break;
					}
					case LITERAL_is:
					{
						match(LITERAL_is);
						break;
					}
					default:
					{
						throw new NoViableAltException(LT(1), getFilename());
					}
					}
					}
					match(LITERAL_object);
					match(OPEN_PAREN);
					record_item();
					{
					_loop254:
					do {
						if ((LA(1)==COMMA)) {
							match(COMMA);
							record_item();
						}
						else {
							break _loop254;
						}
						
					} while (true);
					}
					match(CLOSE_PAREN);
					{
					switch ( LA(1)) {
					case LITERAL_not:
					{
						match(LITERAL_not);
						match(LITERAL_final);
						break;
					}
					case EOF:
					case AT_PREFIXED:
					case SEMI:
					case OPEN_PAREN:
					case LITERAL_package:
					case LITERAL_alter:
					case LITERAL_drop:
					case LITERAL_function:
					case LITERAL_procedure:
					case LITERAL_type:
					case LITERAL_trigger:
					case LITERAL_associate:
					case LITERAL_column:
					case LITERAL_truncate:
					case LITERAL_comment:
					case LITERAL_set:
					case LITERAL_show:
					case LITERAL_var:
					case LITERAL_variable:
					case LITERAL_col:
					case LITERAL_exec:
					case LITERAL_execute:
					case LITERAL_whenever:
					case LITERAL_exit:
					case LITERAL_commit:
					case LITERAL_rollback:
					case LITERAL_def:
					case LITERAL_define:
					case LITERAL_prompt:
					case LITERAL_rem:
					case LITERAL_host:
					case LITERAL_quit:
					case LITERAL_spool:
					case LITERAL_sta:
					case LITERAL_start:
					case LITERAL_repfooter:
					case LITERAL_repheader:
					case LITERAL_serveroutput:
					case LITERAL_begin:
					case LITERAL_declare:
					case LITERAL_create:
					case LITERAL_grant:
					case LITERAL_revoke:
					case LITERAL_delete:
					case LITERAL_insert:
					case LITERAL_update:
					case LITERAL_select:
					case LITERAL_merge:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(LT(1), getFilename());
					}
					}
					}
					if ( inputState.guessing==0 ) {
						__markRule(OBJECT_TYPE_DEF);
					}
					}
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				}
				break;
			}
			default:
				if ((LA(1)==LITERAL_package) && (_tokenSet_7.member(LA(2))) && (_tokenSet_9.member(LA(3)))) {
					package_spec();
					if ( inputState.guessing==0 ) {
						__markRule(PACKAGE_SPEC);
					}
				}
				else if ((LA(1)==LITERAL_package) && (_tokenSet_7.member(LA(2))) && (_tokenSet_8.member(LA(3)))) {
					package_body();
					if ( inputState.guessing==0 ) {
						__markRule(PACKAGE_BODY);
					}
				}
				else {
					boolean synPredMatched231 = false;
					if (((LA(1)==LITERAL_global||LA(1)==LITERAL_temporary) && (_tokenSet_12.member(LA(2))) && (_tokenSet_13.member(LA(3))))) {
						int _m231 = mark();
						synPredMatched231 = true;
						inputState.guessing++;
						try {
							{
							{
							switch ( LA(1)) {
							case LITERAL_global:
							{
								match(LITERAL_global);
								break;
							}
							case LITERAL_temporary:
							{
								break;
							}
							default:
							{
								throw new NoViableAltException(LT(1), getFilename());
							}
							}
							}
							match(LITERAL_temporary);
							{
							if ((_tokenSet_7.member(LA(1)))) {
								schema_name();
								match(DOT);
							}
							else if ((LA(1)==LITERAL_table)) {
							}
							else {
								throw new NoViableAltException(LT(1), getFilename());
							}
							
							}
							match(LITERAL_table);
							}
						}
						catch (RecognitionException pe) {
							synPredMatched231 = false;
						}
						rewind(_m231);
						inputState.guessing--;
					}
					if ( synPredMatched231 ) {
						{
						create_temp_table();
						{
						if ((LA(1)==SEMI) && (_tokenSet_10.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
							match(SEMI);
						}
						else if ((_tokenSet_10.member(LA(1))) && (_tokenSet_3.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
						}
						else {
							throw new NoViableAltException(LT(1), getFilename());
						}
						
						}
						}
						if ( inputState.guessing==0 ) {
							__markRule(CREATE_TEMP_TABLE);
						}
					}
					else if ((_tokenSet_14.member(LA(1))) && (_tokenSet_15.member(LA(2))) && (_tokenSet_16.member(LA(3)))) {
						{
						create_tablespace();
						}
						if ( inputState.guessing==0 ) {
							__markRule(CREATE_TABLESPACE);
						}
					}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				}}
				}
				{
				switch ( LA(1)) {
				case SEMI:
				{
					match(SEMI);
					{
					switch ( LA(1)) {
					case DIVIDE:
					{
						match(DIVIDE);
						break;
					}
					case EOF:
					case AT_PREFIXED:
					case OPEN_PAREN:
					case LITERAL_package:
					case LITERAL_alter:
					case LITERAL_drop:
					case LITERAL_function:
					case LITERAL_procedure:
					case LITERAL_type:
					case LITERAL_trigger:
					case LITERAL_associate:
					case LITERAL_column:
					case LITERAL_truncate:
					case LITERAL_comment:
					case LITERAL_set:
					case LITERAL_show:
					case LITERAL_var:
					case LITERAL_variable:
					case LITERAL_col:
					case LITERAL_exec:
					case LITERAL_execute:
					case LITERAL_whenever:
					case LITERAL_exit:
					case LITERAL_commit:
					case LITERAL_rollback:
					case LITERAL_def:
					case LITERAL_define:
					case LITERAL_prompt:
					case LITERAL_rem:
					case LITERAL_host:
					case LITERAL_quit:
					case LITERAL_spool:
					case LITERAL_sta:
					case LITERAL_start:
					case LITERAL_repfooter:
					case LITERAL_repheader:
					case LITERAL_serveroutput:
					case LITERAL_begin:
					case LITERAL_declare:
					case LITERAL_create:
					case LITERAL_grant:
					case LITERAL_revoke:
					case LITERAL_delete:
					case LITERAL_insert:
					case LITERAL_update:
					case LITERAL_select:
					case LITERAL_merge:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(LT(1), getFilename());
					}
					}
					}
					break;
				}
				case EOF:
				case AT_PREFIXED:
				case OPEN_PAREN:
				case LITERAL_package:
				case LITERAL_alter:
				case LITERAL_drop:
				case LITERAL_function:
				case LITERAL_procedure:
				case LITERAL_type:
				case LITERAL_trigger:
				case LITERAL_associate:
				case LITERAL_column:
				case LITERAL_truncate:
				case LITERAL_comment:
				case LITERAL_set:
				case LITERAL_show:
				case LITERAL_var:
				case LITERAL_variable:
				case LITERAL_col:
				case LITERAL_exec:
				case LITERAL_execute:
				case LITERAL_whenever:
				case LITERAL_exit:
				case LITERAL_commit:
				case LITERAL_rollback:
				case LITERAL_def:
				case LITERAL_define:
				case LITERAL_prompt:
				case LITERAL_rem:
				case LITERAL_host:
				case LITERAL_quit:
				case LITERAL_spool:
				case LITERAL_sta:
				case LITERAL_start:
				case LITERAL_repfooter:
				case LITERAL_repheader:
				case LITERAL_serveroutput:
				case LITERAL_begin:
				case LITERAL_declare:
				case LITERAL_create:
				case LITERAL_grant:
				case LITERAL_revoke:
				case LITERAL_delete:
				case LITERAL_insert:
				case LITERAL_update:
				case LITERAL_select:
				case LITERAL_merge:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
			}
			catch (RecognitionException ex) {
				if (inputState.guessing==0) {
					reportError(ex);
					recover(ex,_tokenSet_6);
				} else {
				  throw ex;
				}
			}
		}
		
	public void package_body() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			match(LITERAL_package);
			{
			if ((LA(1)==LITERAL_body) && (_tokenSet_7.member(LA(2)))) {
				match(LITERAL_body);
			}
			else if ((_tokenSet_7.member(LA(1))) && (LA(2)==DOT||LA(2)==LITERAL_is||LA(2)==LITERAL_as)) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			{
			if ((_tokenSet_7.member(LA(1))) && (LA(2)==DOT)) {
				schema_name();
				match(DOT);
			}
			else if ((LA(1)==IDENTIFIER||LA(1)==DOUBLE_QUOTED_STRING) && (LA(2)==LITERAL_is||LA(2)==LITERAL_as)) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			package_name();
			{
			switch ( LA(1)) {
			case LITERAL_is:
			{
				match(LITERAL_is);
				break;
			}
			case LITERAL_as:
			{
				match(LITERAL_as);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			if ((LA(1)==LITERAL_pragma) && (LA(2)==LITERAL_serially_reusable)) {
				serially_reusable_pragma();
				match(SEMI);
			}
			else if ((_tokenSet_17.member(LA(1))) && (_tokenSet_18.member(LA(2)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			{
			_loop794:
			do {
				if ((_tokenSet_19.member(LA(1)))) {
					package_obj_body();
				}
				else {
					break _loop794;
				}
				
			} while (true);
			}
			{
			switch ( LA(1)) {
			case LITERAL_begin:
			{
				package_init_section();
				break;
			}
			case LITERAL_end:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			match(LITERAL_end);
			{
			switch ( LA(1)) {
			case IDENTIFIER:
			case DOUBLE_QUOTED_STRING:
			{
				package_name();
				break;
			}
			case SEMI:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			match(SEMI);
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_20);
			} else {
			  throw ex;
			}
		}
	}
	
	public void package_spec() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			match(LITERAL_package);
			{
			if ((_tokenSet_7.member(LA(1))) && (LA(2)==DOT)) {
				schema_name();
				match(DOT);
			}
			else if ((LA(1)==IDENTIFIER||LA(1)==DOUBLE_QUOTED_STRING) && (_tokenSet_21.member(LA(2)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			package_name();
			{
			switch ( LA(1)) {
			case LITERAL_authid:
			{
				match(LITERAL_authid);
				identifier();
				break;
			}
			case LITERAL_is:
			case LITERAL_as:
			case LITERAL_wrapped:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_wrapped:
			{
				{
				match(LITERAL_wrapped);
				if ( inputState.guessing==0 ) {
					
					throw new com.deepsky.lang.plsql.parser.WrappedPackageException();
					//                String package_name = #o.getFirstChild().getText();
					// todo                String package_name = #o.getText();
					//                throw new com.deepsky.lang.plsql.parser.WrappedPackageException(package_name);
					// todo                 process_wrapped_package(package_name);
					
				}
				}
				break;
			}
			case LITERAL_is:
			case LITERAL_as:
			{
				{
				{
				switch ( LA(1)) {
				case LITERAL_is:
				{
					match(LITERAL_is);
					break;
				}
				case LITERAL_as:
				{
					match(LITERAL_as);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				{
				if ((LA(1)==LITERAL_pragma) && (LA(2)==LITERAL_serially_reusable)) {
					serially_reusable_pragma();
					match(SEMI);
				}
				else if ((_tokenSet_22.member(LA(1))) && (_tokenSet_23.member(LA(2)))) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				{
				_loop777:
				do {
					if ((_tokenSet_19.member(LA(1)))) {
						package_obj_spec_ex();
					}
					else {
						break _loop777;
					}
					
				} while (true);
				}
				match(LITERAL_end);
				{
				switch ( LA(1)) {
				case IDENTIFIER:
				case DOUBLE_QUOTED_STRING:
				{
					package_name();
					break;
				}
				case SEMI:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				}
				match(SEMI);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_20);
			} else {
			  throw ex;
			}
		}
	}
	
	public Integer  function_body() throws RecognitionException, TokenStreamException {
		Integer retValue;
		
		boolean tag1 = false; retValue = -1;
		
		try {      // for error handling
			function_declaration();
			{
			if ((LA(1)==LITERAL_is||LA(1)==LITERAL_as)) {
				{
				switch ( LA(1)) {
				case LITERAL_is:
				{
					match(LITERAL_is);
					break;
				}
				case LITERAL_as:
				{
					match(LITERAL_as);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				{
				if ((LA(1)==LITERAL_language) && (LA(2)==LITERAL_java) && (LA(3)==LITERAL_name)) {
					{
					match(LITERAL_language);
					match(LITERAL_java);
					match(LITERAL_name);
					if ( inputState.guessing==0 ) {
						tag1 = false;
					}
					string_literal();
					}
				}
				else if ((_tokenSet_24.member(LA(1))) && (_tokenSet_25.member(LA(2))) && (_tokenSet_26.member(LA(3)))) {
					{
					func_proc_statements();
					if ( inputState.guessing==0 ) {
						tag1 = true;
					}
					}
					if ( inputState.guessing==0 ) {
						retValue = FUNCTION_BODY;
					}
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
			}
			else if ((_tokenSet_27.member(LA(1)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			if ( inputState.guessing==0 ) {
				
				if(!tag1){
				{ retValue = FUNCTION_SPEC; }
				}
				
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				
					    reportError(ex);
					    throw new com.deepsky.integration.CustomRecognitionException(ex.getMessage());
					
			} else {
				throw ex;
			}
		}
		return retValue;
	}
	
	public Integer  procedure_body() throws RecognitionException, TokenStreamException {
		Integer retValue;
		
		boolean tag1 = false; retValue = -1;
		
		try {      // for error handling
			procedure_declaration();
			{
			if ((LA(1)==LITERAL_is||LA(1)==LITERAL_as)) {
				{
				switch ( LA(1)) {
				case LITERAL_is:
				{
					match(LITERAL_is);
					break;
				}
				case LITERAL_as:
				{
					match(LITERAL_as);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				{
				if ((LA(1)==LITERAL_language) && (LA(2)==LITERAL_java) && (LA(3)==LITERAL_name)) {
					{
					match(LITERAL_language);
					match(LITERAL_java);
					match(LITERAL_name);
					if ( inputState.guessing==0 ) {
						tag1 = false;
					}
					string_literal();
					}
				}
				else if ((_tokenSet_24.member(LA(1))) && (_tokenSet_25.member(LA(2))) && (_tokenSet_26.member(LA(3)))) {
					{
					func_proc_statements();
					if ( inputState.guessing==0 ) {
						tag1 = true;
					}
					}
					if ( inputState.guessing==0 ) {
						retValue = PROCEDURE_BODY;
					}
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
			}
			else if ((_tokenSet_27.member(LA(1)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			if ( inputState.guessing==0 ) {
				
				if(!tag1){
				{ retValue = PROCEDURE_SPEC; }
				}
				
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				
					    reportError(ex);
					    throw new com.deepsky.integration.CustomRecognitionException(ex.getMessage());
					
			} else {
				throw ex;
			}
		}
		return retValue;
	}
	
	public void create_trigger() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			match(LITERAL_trigger);
			{
			if ((_tokenSet_7.member(LA(1))) && (LA(2)==DOT)) {
				schema_name();
				match(DOT);
			}
			else if ((_tokenSet_7.member(LA(1))) && (LA(2)==LITERAL_after||LA(2)==LITERAL_before||LA(2)==LITERAL_instead)) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			trigger_name();
			{
			switch ( LA(1)) {
			case LITERAL_after:
			case LITERAL_before:
			{
				{
				{
				switch ( LA(1)) {
				case LITERAL_after:
				{
					match(LITERAL_after);
					break;
				}
				case LITERAL_before:
				{
					match(LITERAL_before);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				{
				switch ( LA(1)) {
				case LITERAL_delete:
				case LITERAL_insert:
				case LITERAL_update:
				{
					dml_trigger();
					break;
				}
				case LITERAL_alter:
				case LITERAL_drop:
				case LITERAL_associate:
				case LITERAL_truncate:
				case LITERAL_comment:
				case LITERAL_create:
				case LITERAL_rename:
				case LITERAL_analyze:
				case LITERAL_audit:
				case LITERAL_noaudit:
				case LITERAL_ddl:
				case LITERAL_diassociate:
				case LITERAL_grant:
				case LITERAL_revoke:
				{
					ddl_trigger();
					break;
				}
				case LITERAL_startup:
				case LITERAL_shutdown:
				case LITERAL_servererror:
				case LITERAL_logon:
				case LITERAL_logoff:
				{
					db_event_trigger();
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				}
				break;
			}
			case LITERAL_instead:
			{
				instead_of_trigger();
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			_loop367:
			do {
				switch ( LA(1)) {
				case LITERAL_for:
				{
					for_each();
					break;
				}
				case LITERAL_referencing:
				{
					referencing_old_new();
					break;
				}
				default:
				{
					break _loop367;
				}
				}
			} while (true);
			}
			{
			switch ( LA(1)) {
			case LITERAL_when:
			{
				trigger_when();
				break;
			}
			case LITERAL_begin:
			case LITERAL_declare:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			begin_block();
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_20);
			} else {
			  throw ex;
			}
		}
	}
	
	public void select_command() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			if ((LA(1)==OPEN_PAREN||LA(1)==LITERAL_select) && (_tokenSet_28.member(LA(2))) && (_tokenSet_29.member(LA(3)))) {
				select_expression();
			}
			else if ((LA(1)==OPEN_PAREN) && (LA(2)==OPEN_PAREN||LA(2)==LITERAL_select) && (_tokenSet_28.member(LA(3)))) {
				subquery();
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_30);
			} else {
			  throw ex;
			}
		}
	}
	
	public void insert_command() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			{
			match(LITERAL_insert);
			match(LITERAL_into);
			{
			boolean synPredMatched1581 = false;
			if (((_tokenSet_31.member(LA(1))))) {
				int _m1581 = mark();
				synPredMatched1581 = true;
				inputState.guessing++;
				try {
					{
					table_alias();
					}
				}
				catch (RecognitionException pe) {
					synPredMatched1581 = false;
				}
				rewind(_m1581);
				inputState.guessing--;
			}
			if ( synPredMatched1581 ) {
				table_alias();
				{
				if ((LA(1)==OPEN_PAREN) && (_tokenSet_32.member(LA(2))) && (LA(3)==DOT||LA(3)==COMMA||LA(3)==CLOSE_PAREN)) {
					column_spec_list();
				}
				else if ((LA(1)==OPEN_PAREN||LA(1)==LITERAL_values||LA(1)==LITERAL_select) && (_tokenSet_28.member(LA(2))) && (_tokenSet_33.member(LA(3)))) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				{
				switch ( LA(1)) {
				case LITERAL_values:
				{
					{
					match(LITERAL_values);
					{
					if ((LA(1)==OPEN_PAREN)) {
						parentesized_exp_list();
					}
					else if ((_tokenSet_11.member(LA(1)))) {
						variable_ref();
					}
					else {
						throw new NoViableAltException(LT(1), getFilename());
					}
					
					}
					}
					break;
				}
				case OPEN_PAREN:
				case LITERAL_select:
				{
					select_expression();
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				{
				if ((LA(1)==LITERAL_return||LA(1)==LITERAL_returning) && (_tokenSet_32.member(LA(2))) && (LA(3)==DOT||LA(3)==COMMA||LA(3)==LITERAL_into)) {
					returning();
				}
				else if ((_tokenSet_34.member(LA(1))) && (_tokenSet_3.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				if ( inputState.guessing==0 ) {
					__markRule(INSERT_COMMAND);
				}
			}
			else if ((LA(1)==OPEN_PAREN)) {
				subquery();
				{
				match(LITERAL_values);
				{
				if ((LA(1)==OPEN_PAREN)) {
					parentesized_exp_list();
				}
				else if ((_tokenSet_35.member(LA(1)))) {
					function_call();
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				}
				if ( inputState.guessing==0 ) {
					__markRule(INSERT_INTO_SUBQUERY_COMMAND);
				}
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_34);
			} else {
			  throw ex;
			}
		}
	}
	
	public void update_command() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			match(LITERAL_update);
			{
			if ((_tokenSet_31.member(LA(1)))) {
				table_alias();
			}
			else if ((LA(1)==OPEN_PAREN)) {
				{
				subquery();
				{
				if ((_tokenSet_36.member(LA(1)))) {
					alias();
				}
				else if ((LA(1)==LITERAL_set)) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				}
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			match(LITERAL_set);
			{
			if ((LA(1)==OPEN_PAREN)) {
				subquery_update();
				if ( inputState.guessing==0 ) {
					__markRule(SUBQUERY_UPDATE_COMMAND);
				}
			}
			else if ((_tokenSet_32.member(LA(1)))) {
				simple_update();
				if ( inputState.guessing==0 ) {
					__markRule(SIMPLE_UPDATE_COMMAND);
				}
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_34);
			} else {
			  throw ex;
			}
		}
	}
	
	public void delete_command() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			match(LITERAL_delete);
			{
			if ((LA(1)==LITERAL_from)) {
				match(LITERAL_from);
			}
			else if ((_tokenSet_31.member(LA(1)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			table_alias();
			{
			if ((LA(1)==LITERAL_where)) {
				where_condition();
			}
			else if ((_tokenSet_37.member(LA(1)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			{
			if ((LA(1)==LITERAL_return||LA(1)==LITERAL_returning) && (_tokenSet_32.member(LA(2))) && (LA(3)==DOT||LA(3)==COMMA||LA(3)==LITERAL_into)) {
				returning();
			}
			else if ((_tokenSet_34.member(LA(1))) && (_tokenSet_3.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_34);
			} else {
			  throw ex;
			}
		}
	}
	
	public void merge_command() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			match(LITERAL_merge);
			match(LITERAL_into);
			table_alias();
			match(LITERAL_using);
			{
			if ((_tokenSet_31.member(LA(1)))) {
				table_alias();
			}
			else if ((LA(1)==OPEN_PAREN)) {
				from_subquery();
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			match(LITERAL_on);
			condition();
			when_action();
			{
			if ((LA(1)==LITERAL_when) && (LA(2)==LITERAL_not||LA(2)==LITERAL_matched) && (LA(3)==LITERAL_then||LA(3)==LITERAL_matched)) {
				when_action();
			}
			else if ((_tokenSet_34.member(LA(1))) && (_tokenSet_3.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			{
			if ((LA(1)==LITERAL_delete) && (LA(2)==LITERAL_where) && (_tokenSet_38.member(LA(3)))) {
				match(LITERAL_delete);
				match(LITERAL_where);
				condition();
			}
			else if ((_tokenSet_34.member(LA(1))) && (_tokenSet_3.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_34);
			} else {
			  throw ex;
			}
		}
	}
	
	public void grant_command() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			match(LITERAL_grant);
			{
			switch ( LA(1)) {
			case LITERAL_alter:
			case LITERAL_index:
			case LITERAL_references:
			case LITERAL_execute:
			case LITERAL_delete:
			case LITERAL_insert:
			case LITERAL_update:
			case LITERAL_select:
			{
				{
				privilege();
				{
				_loop1407:
				do {
					if ((LA(1)==COMMA)) {
						match(COMMA);
						privilege();
					}
					else {
						break _loop1407;
					}
					
				} while (true);
				}
				match(LITERAL_on);
				identifier2();
				}
				break;
			}
			case LITERAL_all:
			{
				{
				match(LITERAL_all);
				match(LITERAL_privileges);
				}
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			match(LITERAL_to);
			{
			if ((_tokenSet_7.member(LA(1)))) {
				identifier2();
			}
			else if ((LA(1)==LITERAL_public)) {
				match(LITERAL_public);
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_34);
			} else {
			  throw ex;
			}
		}
	}
	
	public void revoke_command() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			match(LITERAL_revoke);
			{
			switch ( LA(1)) {
			case LITERAL_alter:
			case LITERAL_index:
			case LITERAL_references:
			case LITERAL_execute:
			case LITERAL_delete:
			case LITERAL_insert:
			case LITERAL_update:
			case LITERAL_select:
			{
				{
				privilege();
				{
				_loop1414:
				do {
					if ((LA(1)==COMMA)) {
						match(COMMA);
						privilege();
					}
					else {
						break _loop1414;
					}
					
				} while (true);
				}
				match(LITERAL_on);
				identifier2();
				}
				break;
			}
			case LITERAL_all:
			{
				{
				match(LITERAL_all);
				match(LITERAL_privileges);
				}
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			match(LITERAL_from);
			{
			if ((_tokenSet_7.member(LA(1)))) {
				identifier2();
			}
			else if ((LA(1)==LITERAL_public)) {
				match(LITERAL_public);
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_34);
			} else {
			  throw ex;
			}
		}
	}
	
	public void rollback_statement() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			match(LITERAL_rollback);
			{
			if ((LA(1)==LITERAL_work)) {
				match(LITERAL_work);
			}
			else if ((_tokenSet_39.member(LA(1)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			{
			if ((LA(1)==LITERAL_to)) {
				match(LITERAL_to);
				{
				switch ( LA(1)) {
				case LITERAL_savepoint:
				{
					match(LITERAL_savepoint);
					break;
				}
				case IDENTIFIER:
				case DOUBLE_QUOTED_STRING:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				savepoint_name();
			}
			else if ((_tokenSet_34.member(LA(1)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			{
			if ((LA(1)==LITERAL_comment) && (LA(2)==QUOTED_STR_START||LA(2)==QUOTED_STR) && (_tokenSet_40.member(LA(3)))) {
				match(LITERAL_comment);
				string_literal();
			}
			else if ((_tokenSet_34.member(LA(1))) && (_tokenSet_3.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_34);
			} else {
			  throw ex;
			}
		}
	}
	
	public void commit_statement() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			match(LITERAL_commit);
			{
			if ((LA(1)==LITERAL_work)) {
				match(LITERAL_work);
			}
			else if ((_tokenSet_34.member(LA(1)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_34);
			} else {
			  throw ex;
			}
		}
	}
	
	public void alter_command() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			match(LITERAL_alter);
			{
			switch ( LA(1)) {
			case LITERAL_database:
			case LITERAL_system:
			case LITERAL_session:
			{
				alter_system_session();
				{
				if ((LA(1)==SEMI) && (_tokenSet_34.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
					match(SEMI);
				}
				else if ((_tokenSet_34.member(LA(1))) && (_tokenSet_3.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				if ( inputState.guessing==0 ) {
					__markRule(ALTER_GENERIC);
				}
				break;
			}
			case LITERAL_table:
			{
				alter_table();
				{
				if ((LA(1)==SEMI) && (_tokenSet_34.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
					match(SEMI);
				}
				else if ((_tokenSet_34.member(LA(1))) && (_tokenSet_3.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				if ( inputState.guessing==0 ) {
					__markRule(ALTER_TABLE);
				}
				break;
			}
			case LITERAL_trigger:
			{
				alter_trigger();
				{
				if ((LA(1)==SEMI) && (_tokenSet_34.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
					match(SEMI);
				}
				else if ((_tokenSet_34.member(LA(1))) && (_tokenSet_3.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				if ( inputState.guessing==0 ) {
					__markRule(ALTER_TRIGGER);
				}
				break;
			}
			case LITERAL_tablespace:
			{
				alter_tablespace();
				{
				if ((LA(1)==SEMI) && (_tokenSet_34.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
					match(SEMI);
				}
				else if ((_tokenSet_34.member(LA(1))) && (_tokenSet_3.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				if ( inputState.guessing==0 ) {
					__markRule(ALTER_TABLESPACE);
				}
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_34);
			} else {
			  throw ex;
			}
		}
	}
	
	public void associate_statistics() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			match(LITERAL_associate);
			match(LITERAL_statistics);
			match(LITERAL_with);
			{
			switch ( LA(1)) {
			case LITERAL_column:
			{
				column_association();
				break;
			}
			case LITERAL_functions:
			case LITERAL_packages:
			case LITERAL_types:
			case LITERAL_indexes:
			case LITERAL_indextypes:
			{
				function_association();
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_with:
			{
				storage_table_clause();
				break;
			}
			case EOF:
			case AT_PREFIXED:
			case SEMI:
			case OPEN_PAREN:
			case DIVIDE:
			case LITERAL_package:
			case LITERAL_alter:
			case LITERAL_drop:
			case LITERAL_function:
			case LITERAL_procedure:
			case LITERAL_type:
			case LITERAL_trigger:
			case LITERAL_associate:
			case LITERAL_column:
			case LITERAL_truncate:
			case LITERAL_comment:
			case LITERAL_set:
			case LITERAL_show:
			case LITERAL_var:
			case LITERAL_variable:
			case LITERAL_col:
			case LITERAL_exec:
			case LITERAL_execute:
			case LITERAL_whenever:
			case LITERAL_exit:
			case LITERAL_commit:
			case LITERAL_rollback:
			case LITERAL_def:
			case LITERAL_define:
			case LITERAL_prompt:
			case LITERAL_rem:
			case LITERAL_host:
			case LITERAL_quit:
			case LITERAL_spool:
			case LITERAL_sta:
			case LITERAL_start:
			case LITERAL_repfooter:
			case LITERAL_repheader:
			case LITERAL_serveroutput:
			case LITERAL_begin:
			case LITERAL_declare:
			case LITERAL_create:
			case LITERAL_grant:
			case LITERAL_revoke:
			case LITERAL_delete:
			case LITERAL_insert:
			case LITERAL_update:
			case LITERAL_select:
			case LITERAL_merge:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			if ((LA(1)==SEMI) && (_tokenSet_20.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
				match(SEMI);
			}
			else if ((_tokenSet_20.member(LA(1))) && (_tokenSet_3.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_20);
			} else {
			  throw ex;
			}
		}
	}
	
	public void comment() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			match(LITERAL_comment);
			match(LITERAL_on);
			{
			switch ( LA(1)) {
			case LITERAL_table:
			{
				{
				match(LITERAL_table);
				{
				if ((_tokenSet_7.member(LA(1))) && (LA(2)==DOT)) {
					schema_name();
					match(DOT);
				}
				else if ((_tokenSet_7.member(LA(1))) && (LA(2)==LITERAL_is)) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				table_ref();
				match(LITERAL_is);
				comment_string();
				}
				break;
			}
			case LITERAL_column:
			{
				{
				match(LITERAL_column);
				table_ref();
				match(DOT);
				column_name_ref();
				match(LITERAL_is);
				comment_string();
				}
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			if ((LA(1)==SEMI) && (_tokenSet_20.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
				match(SEMI);
			}
			else if ((_tokenSet_20.member(LA(1))) && (_tokenSet_3.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			if ( inputState.guessing==0 ) {
				__markRule(COMMENT);
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_20);
			} else {
			  throw ex;
			}
		}
	}
	
	public void type_definition() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			match(LITERAL_type);
			{
			if ((_tokenSet_7.member(LA(1))) && (LA(2)==DOT)) {
				schema_name();
				match(DOT);
			}
			else if ((_tokenSet_7.member(LA(1))) && (LA(2)==LITERAL_is||LA(2)==LITERAL_under||LA(2)==LITERAL_as)) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			type_name();
			{
			switch ( LA(1)) {
			case LITERAL_under:
			{
				{
				match(LITERAL_under);
				{
				if ((_tokenSet_7.member(LA(1))) && (LA(2)==DOT) && (_tokenSet_11.member(LA(3)))) {
					schema_name();
					match(DOT);
				}
				else if ((_tokenSet_11.member(LA(1))) && (LA(2)==DOT||LA(2)==OPEN_PAREN) && (_tokenSet_11.member(LA(3)))) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				type_name_ref();
				match(OPEN_PAREN);
				record_item();
				{
				_loop733:
				do {
					if ((LA(1)==COMMA)) {
						match(COMMA);
						record_item();
					}
					else {
						break _loop733;
					}
					
				} while (true);
				}
				match(CLOSE_PAREN);
				{
				if ((LA(1)==LITERAL_not)) {
					match(LITERAL_not);
					match(LITERAL_final);
				}
				else if ((_tokenSet_27.member(LA(1)))) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				}
				if ( inputState.guessing==0 ) {
					__markRule(OBJECT_TYPE_DEF);
				}
				break;
			}
			case LITERAL_is:
			case LITERAL_as:
			{
				{
				{
				switch ( LA(1)) {
				case LITERAL_as:
				{
					match(LITERAL_as);
					break;
				}
				case LITERAL_is:
				{
					match(LITERAL_is);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				{
				switch ( LA(1)) {
				case LITERAL_object:
				{
					{
					match(LITERAL_object);
					match(OPEN_PAREN);
					record_item();
					{
					_loop740:
					do {
						if ((LA(1)==COMMA)) {
							match(COMMA);
							record_item();
						}
						else {
							break _loop740;
						}
						
					} while (true);
					}
					match(CLOSE_PAREN);
					{
					if ((LA(1)==LITERAL_not)) {
						match(LITERAL_not);
						match(LITERAL_final);
					}
					else if ((_tokenSet_27.member(LA(1)))) {
					}
					else {
						throw new NoViableAltException(LT(1), getFilename());
					}
					
					}
					}
					if ( inputState.guessing==0 ) {
						__markRule(OBJECT_TYPE_DEF);
					}
					break;
				}
				case LITERAL_table:
				{
					{
					match(LITERAL_table);
					match(LITERAL_of);
					type_spec();
					{
					if ((LA(1)==LITERAL_index)) {
						match(LITERAL_index);
						match(LITERAL_by);
						type_spec();
					}
					else if ((_tokenSet_41.member(LA(1)))) {
					}
					else {
						throw new NoViableAltException(LT(1), getFilename());
					}
					
					}
					{
					if ((LA(1)==LITERAL_not)) {
						match(LITERAL_not);
						match(LITERAL_null);
					}
					else if ((_tokenSet_27.member(LA(1)))) {
					}
					else {
						throw new NoViableAltException(LT(1), getFilename());
					}
					
					}
					}
					if ( inputState.guessing==0 ) {
						__markRule(TABLE_COLLECTION);
					}
					break;
				}
				case LITERAL_record:
				{
					{
					match(LITERAL_record);
					match(OPEN_PAREN);
					record_item();
					{
					_loop747:
					do {
						if ((LA(1)==COMMA)) {
							match(COMMA);
							record_item();
						}
						else {
							break _loop747;
						}
						
					} while (true);
					}
					match(CLOSE_PAREN);
					}
					if ( inputState.guessing==0 ) {
						__markRule(RECORD_TYPE_DECL);
					}
					break;
				}
				case LITERAL_ref:
				{
					{
					match(LITERAL_ref);
					match(LITERAL_cursor);
					{
					if ((LA(1)==LITERAL_return)) {
						match(LITERAL_return);
						record_name();
						{
						if ((LA(1)==PERCENTAGE)) {
							match(PERCENTAGE);
							{
							switch ( LA(1)) {
							case LITERAL_rowtype:
							{
								match(LITERAL_rowtype);
								break;
							}
							case LITERAL_type:
							{
								match(LITERAL_type);
								break;
							}
							case IDENTIFIER:
							{
								match(IDENTIFIER);
								break;
							}
							default:
							{
								throw new NoViableAltException(LT(1), getFilename());
							}
							}
							}
						}
						else if ((_tokenSet_27.member(LA(1)))) {
						}
						else {
							throw new NoViableAltException(LT(1), getFilename());
						}
						
						}
					}
					else if ((_tokenSet_27.member(LA(1)))) {
					}
					else {
						throw new NoViableAltException(LT(1), getFilename());
					}
					
					}
					}
					if ( inputState.guessing==0 ) {
						__markRule(REF_CURSOR);
					}
					break;
				}
				case LITERAL_varray:
				{
					{
					match(LITERAL_varray);
					match(OPEN_PAREN);
					plsql_expression();
					match(CLOSE_PAREN);
					match(LITERAL_of);
					type_spec();
					{
					if ((LA(1)==LITERAL_not)) {
						match(LITERAL_not);
						match(LITERAL_null);
					}
					else if ((_tokenSet_27.member(LA(1)))) {
					}
					else {
						throw new NoViableAltException(LT(1), getFilename());
					}
					
					}
					}
					if ( inputState.guessing==0 ) {
						__markRule(VARRAY_COLLECTION);
					}
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				}
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			if ((LA(1)==SEMI) && (_tokenSet_27.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
				match(SEMI);
			}
			else if ((_tokenSet_27.member(LA(1))) && (_tokenSet_3.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_27);
			} else {
			  throw ex;
			}
		}
	}
	
	public void drop_command() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			match(LITERAL_drop);
			{
			switch ( LA(1)) {
			case LITERAL_table:
			{
				{
				match(LITERAL_table);
				{
				if ((_tokenSet_7.member(LA(1))) && (LA(2)==DOT)) {
					schema_name();
					match(DOT);
				}
				else if ((_tokenSet_7.member(LA(1))) && (_tokenSet_42.member(LA(2)))) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				table_ref();
				{
				switch ( LA(1)) {
				case LITERAL_purge:
				{
					match(LITERAL_purge);
					break;
				}
				case EOF:
				case AT_PREFIXED:
				case SEMI:
				case OPEN_PAREN:
				case DIVIDE:
				case LITERAL_package:
				case LITERAL_alter:
				case LITERAL_drop:
				case LITERAL_function:
				case LITERAL_procedure:
				case LITERAL_type:
				case LITERAL_trigger:
				case LITERAL_associate:
				case LITERAL_column:
				case LITERAL_truncate:
				case LITERAL_comment:
				case LITERAL_set:
				case LITERAL_show:
				case LITERAL_var:
				case LITERAL_variable:
				case LITERAL_col:
				case LITERAL_exec:
				case LITERAL_execute:
				case LITERAL_whenever:
				case LITERAL_exit:
				case LITERAL_commit:
				case LITERAL_rollback:
				case LITERAL_def:
				case LITERAL_define:
				case LITERAL_prompt:
				case LITERAL_rem:
				case LITERAL_host:
				case LITERAL_quit:
				case LITERAL_spool:
				case LITERAL_sta:
				case LITERAL_start:
				case LITERAL_repfooter:
				case LITERAL_repheader:
				case LITERAL_serveroutput:
				case LITERAL_begin:
				case LITERAL_declare:
				case LITERAL_create:
				case LITERAL_grant:
				case LITERAL_revoke:
				case LITERAL_delete:
				case LITERAL_insert:
				case LITERAL_update:
				case LITERAL_select:
				case LITERAL_merge:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				}
				if ( inputState.guessing==0 ) {
					__markRule(DROP_TABLE);
				}
				break;
			}
			case LITERAL_view:
			{
				{
				match(LITERAL_view);
				{
				if ((_tokenSet_7.member(LA(1))) && (LA(2)==DOT)) {
					schema_name();
					match(DOT);
				}
				else if ((_tokenSet_7.member(LA(1))) && (_tokenSet_43.member(LA(2)))) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				table_ref();
				{
				switch ( LA(1)) {
				case LITERAL_cascade:
				{
					match(LITERAL_cascade);
					match(LITERAL_constraints);
					break;
				}
				case EOF:
				case AT_PREFIXED:
				case SEMI:
				case OPEN_PAREN:
				case DIVIDE:
				case LITERAL_package:
				case LITERAL_alter:
				case LITERAL_drop:
				case LITERAL_function:
				case LITERAL_procedure:
				case LITERAL_type:
				case LITERAL_trigger:
				case LITERAL_associate:
				case LITERAL_column:
				case LITERAL_truncate:
				case LITERAL_comment:
				case LITERAL_set:
				case LITERAL_show:
				case LITERAL_var:
				case LITERAL_variable:
				case LITERAL_col:
				case LITERAL_exec:
				case LITERAL_execute:
				case LITERAL_whenever:
				case LITERAL_exit:
				case LITERAL_commit:
				case LITERAL_rollback:
				case LITERAL_def:
				case LITERAL_define:
				case LITERAL_prompt:
				case LITERAL_rem:
				case LITERAL_host:
				case LITERAL_quit:
				case LITERAL_spool:
				case LITERAL_sta:
				case LITERAL_start:
				case LITERAL_repfooter:
				case LITERAL_repheader:
				case LITERAL_serveroutput:
				case LITERAL_begin:
				case LITERAL_declare:
				case LITERAL_create:
				case LITERAL_grant:
				case LITERAL_revoke:
				case LITERAL_delete:
				case LITERAL_insert:
				case LITERAL_update:
				case LITERAL_select:
				case LITERAL_merge:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				}
				if ( inputState.guessing==0 ) {
					__markRule(DROP_VIEW);
				}
				break;
			}
			case LITERAL_function:
			{
				{
				match(LITERAL_function);
				callable_name_ref();
				}
				if ( inputState.guessing==0 ) {
					__markRule(DROP_FUNCTION);
				}
				break;
			}
			case LITERAL_procedure:
			{
				{
				match(LITERAL_procedure);
				callable_name_ref();
				}
				if ( inputState.guessing==0 ) {
					__markRule(DROP_PROCEDURE);
				}
				break;
			}
			case LITERAL_package:
			{
				{
				match(LITERAL_package);
				{
				if ((LA(1)==LITERAL_body) && (_tokenSet_7.member(LA(2))) && (_tokenSet_44.member(LA(3)))) {
					match(LITERAL_body);
				}
				else if ((_tokenSet_7.member(LA(1))) && (_tokenSet_44.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				{
				if ((_tokenSet_7.member(LA(1))) && (LA(2)==DOT)) {
					schema_name();
					match(DOT);
				}
				else if ((LA(1)==IDENTIFIER||LA(1)==DOUBLE_QUOTED_STRING) && (_tokenSet_20.member(LA(2)))) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				package_name();
				}
				if ( inputState.guessing==0 ) {
					__markRule(DROP_PACKAGE);
				}
				break;
			}
			case LITERAL_index:
			{
				{
				match(LITERAL_index);
				{
				if ((_tokenSet_7.member(LA(1))) && (LA(2)==DOT)) {
					schema_name();
					match(DOT);
				}
				else if ((LA(1)==IDENTIFIER||LA(1)==DOUBLE_QUOTED_STRING) && (_tokenSet_45.member(LA(2)))) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				index_name();
				{
				switch ( LA(1)) {
				case LITERAL_force:
				{
					match(LITERAL_force);
					break;
				}
				case EOF:
				case AT_PREFIXED:
				case SEMI:
				case OPEN_PAREN:
				case DIVIDE:
				case LITERAL_package:
				case LITERAL_alter:
				case LITERAL_drop:
				case LITERAL_function:
				case LITERAL_procedure:
				case LITERAL_type:
				case LITERAL_trigger:
				case LITERAL_associate:
				case LITERAL_column:
				case LITERAL_truncate:
				case LITERAL_comment:
				case LITERAL_set:
				case LITERAL_show:
				case LITERAL_var:
				case LITERAL_variable:
				case LITERAL_col:
				case LITERAL_exec:
				case LITERAL_execute:
				case LITERAL_whenever:
				case LITERAL_exit:
				case LITERAL_commit:
				case LITERAL_rollback:
				case LITERAL_def:
				case LITERAL_define:
				case LITERAL_prompt:
				case LITERAL_rem:
				case LITERAL_host:
				case LITERAL_quit:
				case LITERAL_spool:
				case LITERAL_sta:
				case LITERAL_start:
				case LITERAL_repfooter:
				case LITERAL_repheader:
				case LITERAL_serveroutput:
				case LITERAL_begin:
				case LITERAL_declare:
				case LITERAL_create:
				case LITERAL_grant:
				case LITERAL_revoke:
				case LITERAL_delete:
				case LITERAL_insert:
				case LITERAL_update:
				case LITERAL_select:
				case LITERAL_merge:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				}
				if ( inputState.guessing==0 ) {
					__markRule(DROP_INDEX);
				}
				break;
			}
			case LITERAL_sequence:
			{
				{
				match(LITERAL_sequence);
				{
				if ((_tokenSet_7.member(LA(1))) && (LA(2)==DOT)) {
					schema_name();
					match(DOT);
				}
				else if ((_tokenSet_7.member(LA(1))) && (_tokenSet_20.member(LA(2)))) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				sequence_name();
				}
				if ( inputState.guessing==0 ) {
					__markRule(DROP_SEQUENCE);
				}
				break;
			}
			case LITERAL_type:
			{
				{
				match(LITERAL_type);
				{
				if ((LA(1)==LITERAL_body) && (_tokenSet_46.member(LA(2))) && (_tokenSet_47.member(LA(3)))) {
					match(LITERAL_body);
				}
				else if ((_tokenSet_46.member(LA(1))) && (_tokenSet_47.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				object_name();
				{
				switch ( LA(1)) {
				case LITERAL_force:
				{
					match(LITERAL_force);
					break;
				}
				case LITERAL_validate:
				{
					match(LITERAL_validate);
					break;
				}
				case EOF:
				case AT_PREFIXED:
				case SEMI:
				case OPEN_PAREN:
				case DIVIDE:
				case LITERAL_package:
				case LITERAL_alter:
				case LITERAL_drop:
				case LITERAL_function:
				case LITERAL_procedure:
				case LITERAL_type:
				case LITERAL_trigger:
				case LITERAL_associate:
				case LITERAL_column:
				case LITERAL_truncate:
				case LITERAL_comment:
				case LITERAL_set:
				case LITERAL_show:
				case LITERAL_var:
				case LITERAL_variable:
				case LITERAL_col:
				case LITERAL_exec:
				case LITERAL_execute:
				case LITERAL_whenever:
				case LITERAL_exit:
				case LITERAL_commit:
				case LITERAL_rollback:
				case LITERAL_def:
				case LITERAL_define:
				case LITERAL_prompt:
				case LITERAL_rem:
				case LITERAL_host:
				case LITERAL_quit:
				case LITERAL_spool:
				case LITERAL_sta:
				case LITERAL_start:
				case LITERAL_repfooter:
				case LITERAL_repheader:
				case LITERAL_serveroutput:
				case LITERAL_begin:
				case LITERAL_declare:
				case LITERAL_create:
				case LITERAL_grant:
				case LITERAL_revoke:
				case LITERAL_delete:
				case LITERAL_insert:
				case LITERAL_update:
				case LITERAL_select:
				case LITERAL_merge:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				}
				if ( inputState.guessing==0 ) {
					__markRule(DROP_TYPE);
				}
				break;
			}
			case LITERAL_public:
			case LITERAL_synonym:
			{
				{
				{
				switch ( LA(1)) {
				case LITERAL_public:
				{
					match(LITERAL_public);
					break;
				}
				case LITERAL_synonym:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				match(LITERAL_synonym);
				object_name();
				}
				if ( inputState.guessing==0 ) {
					__markRule(DROP_SYNONYM);
				}
				break;
			}
			case LITERAL_operator:
			{
				{
				match(LITERAL_operator);
				object_name();
				{
				switch ( LA(1)) {
				case LITERAL_force:
				{
					match(LITERAL_force);
					break;
				}
				case EOF:
				case AT_PREFIXED:
				case SEMI:
				case OPEN_PAREN:
				case DIVIDE:
				case LITERAL_package:
				case LITERAL_alter:
				case LITERAL_drop:
				case LITERAL_function:
				case LITERAL_procedure:
				case LITERAL_type:
				case LITERAL_trigger:
				case LITERAL_associate:
				case LITERAL_column:
				case LITERAL_truncate:
				case LITERAL_comment:
				case LITERAL_set:
				case LITERAL_show:
				case LITERAL_var:
				case LITERAL_variable:
				case LITERAL_col:
				case LITERAL_exec:
				case LITERAL_execute:
				case LITERAL_whenever:
				case LITERAL_exit:
				case LITERAL_commit:
				case LITERAL_rollback:
				case LITERAL_def:
				case LITERAL_define:
				case LITERAL_prompt:
				case LITERAL_rem:
				case LITERAL_host:
				case LITERAL_quit:
				case LITERAL_spool:
				case LITERAL_sta:
				case LITERAL_start:
				case LITERAL_repfooter:
				case LITERAL_repheader:
				case LITERAL_serveroutput:
				case LITERAL_begin:
				case LITERAL_declare:
				case LITERAL_create:
				case LITERAL_grant:
				case LITERAL_revoke:
				case LITERAL_delete:
				case LITERAL_insert:
				case LITERAL_update:
				case LITERAL_select:
				case LITERAL_merge:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				}
				if ( inputState.guessing==0 ) {
					__markRule(DROP_OPERATOR);
				}
				break;
			}
			case LITERAL_user:
			{
				{
				match(LITERAL_user);
				object_name();
				{
				switch ( LA(1)) {
				case LITERAL_cascade:
				{
					match(LITERAL_cascade);
					break;
				}
				case EOF:
				case AT_PREFIXED:
				case SEMI:
				case OPEN_PAREN:
				case DIVIDE:
				case LITERAL_package:
				case LITERAL_alter:
				case LITERAL_drop:
				case LITERAL_function:
				case LITERAL_procedure:
				case LITERAL_type:
				case LITERAL_trigger:
				case LITERAL_associate:
				case LITERAL_column:
				case LITERAL_truncate:
				case LITERAL_comment:
				case LITERAL_set:
				case LITERAL_show:
				case LITERAL_var:
				case LITERAL_variable:
				case LITERAL_col:
				case LITERAL_exec:
				case LITERAL_execute:
				case LITERAL_whenever:
				case LITERAL_exit:
				case LITERAL_commit:
				case LITERAL_rollback:
				case LITERAL_def:
				case LITERAL_define:
				case LITERAL_prompt:
				case LITERAL_rem:
				case LITERAL_host:
				case LITERAL_quit:
				case LITERAL_spool:
				case LITERAL_sta:
				case LITERAL_start:
				case LITERAL_repfooter:
				case LITERAL_repheader:
				case LITERAL_serveroutput:
				case LITERAL_begin:
				case LITERAL_declare:
				case LITERAL_create:
				case LITERAL_grant:
				case LITERAL_revoke:
				case LITERAL_delete:
				case LITERAL_insert:
				case LITERAL_update:
				case LITERAL_select:
				case LITERAL_merge:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				}
				if ( inputState.guessing==0 ) {
					__markRule(DROP_USER);
				}
				break;
			}
			case LITERAL_role:
			{
				{
				match(LITERAL_role);
				object_name();
				}
				if ( inputState.guessing==0 ) {
					__markRule(DROP_ROLE);
				}
				break;
			}
			case LITERAL_directory:
			{
				{
				match(LITERAL_directory);
				object_name();
				}
				if ( inputState.guessing==0 ) {
					__markRule(DROP_DIRECTORY);
				}
				break;
			}
			case LITERAL_library:
			{
				{
				match(LITERAL_library);
				object_name();
				}
				if ( inputState.guessing==0 ) {
					__markRule(DROP_LIBRARY);
				}
				break;
			}
			case LITERAL_database:
			{
				{
				match(LITERAL_database);
				match(LITERAL_link);
				object_name();
				}
				if ( inputState.guessing==0 ) {
					__markRule(DROP_DB_LINK);
				}
				break;
			}
			case LITERAL_trigger:
			{
				{
				match(LITERAL_trigger);
				object_name();
				}
				if ( inputState.guessing==0 ) {
					__markRule(DROP_TRIGGER);
				}
				break;
			}
			case LITERAL_tablespace:
			{
				drop_tablespace();
				if ( inputState.guessing==0 ) {
					__markRule(DROP_TABLESPACE);
				}
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			if ((LA(1)==SEMI) && (_tokenSet_20.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
				match(SEMI);
			}
			else if ((_tokenSet_20.member(LA(1))) && (_tokenSet_3.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_20);
			} else {
			  throw ex;
			}
		}
	}
	

	public void table_ref_ex() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			if ((_tokenSet_7.member(LA(1)))) {
				table_ref();
			}
			else if ((LA(1)==TABLE_NAME_SPEC)) {
				match(TABLE_NAME_SPEC);
				if ( inputState.guessing==0 ) {
					__markRule(TABLE_REF_WITH_LINK);
				}
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_304);
			} else {
			  throw ex;
			}
		}
	}
	
	public void link_name() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			identifier();
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_0);
			} else {
			  throw ex;
			}
		}
	}
	
	public void connect_clause_internal() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			switch ( LA(1)) {
			case LITERAL_start:
			{
				{
				match(LITERAL_start);
				match(LITERAL_with);
				condition();
				}
				break;
			}
			case LITERAL_connect:
			{
				{
				match(LITERAL_connect);
				match(LITERAL_by);
				condition();
				}
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_283);
			} else {
			  throw ex;
			}
		}
	}
	
	public void sorted_def() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			plsql_expression();
			{
			if ((_tokenSet_305.member(LA(1))) && (_tokenSet_3.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
				{
				switch ( LA(1)) {
				case LITERAL_asc:
				{
					match(LITERAL_asc);
					break;
				}
				case LITERAL_desc:
				{
					match(LITERAL_desc);
					break;
				}
				default:
					if ((_tokenSet_306.member(LA(1)))) {
					}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				{
				if ((LA(1)==LITERAL_nulls) && (LA(2)==LITERAL_first||LA(2)==LITERAL_last) && (_tokenSet_306.member(LA(3)))) {
					match(LITERAL_nulls);
					{
					switch ( LA(1)) {
					case LITERAL_first:
					{
						match(LITERAL_first);
						break;
					}
					case LITERAL_last:
					{
						match(LITERAL_last);
						break;
					}
					default:
					{
						throw new NoViableAltException(LT(1), getFilename());
					}
					}
					}
				}
				else if ((_tokenSet_306.member(LA(1))) && (_tokenSet_3.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
			}
			else if ((_tokenSet_306.member(LA(1))) && (_tokenSet_3.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			if ( inputState.guessing==0 ) {
				__markRule(SORTED_DEF);
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_306);
			} else {
			  throw ex;
			}
		}
	}
	
	public void column_spec_list() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			match(OPEN_PAREN);
			column_spec();
			{
			_loop1591:
			do {
				if ((LA(1)==COMMA)) {
					match(COMMA);
					column_spec();
				}
				else {
					break _loop1591;
				}
				
			} while (true);
			}
			match(CLOSE_PAREN);
			if ( inputState.guessing==0 ) {
				__markRule(COLUMN_SPEC_LIST);
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_307);
			} else {
			  throw ex;
			}
		}
	}
	
	public void variable_ref() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			{
			_loop1636:
			do {
				if ((_tokenSet_11.member(LA(1))) && (LA(2)==DOT)) {
					name_fragment();
					match(DOT);
				}
				else {
					break _loop1636;
				}
				
			} while (true);
			}
			name_fragment();
			if ( inputState.guessing==0 ) {
				__markRule(PLSQL_VAR_REF);
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_308);
			} else {
			  throw ex;
			}
		}
	}
	
	public void returning() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			{
			switch ( LA(1)) {
			case LITERAL_returning:
			{
				match(LITERAL_returning);
				break;
			}
			case LITERAL_return:
			{
				match(LITERAL_return);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			column_spec_list_wo_paren();
			match(LITERAL_into);
			expr_list();
			if ( inputState.guessing==0 ) {
				__markRule(RETURNING_CLAUSE);
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_34);
			} else {
			  throw ex;
			}
		}
	}
	
	public void column_spec_list_wo_paren() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			column_spec();
			{
			_loop1594:
			do {
				if ((LA(1)==COMMA)) {
					match(COMMA);
					column_spec();
				}
				else {
					break _loop1594;
				}
				
			} while (true);
			}
			if ( inputState.guessing==0 ) {
				__markRule(COLUMN_SPEC_LIST);
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_309);
			} else {
			  throw ex;
			}
		}
	}
	
	public void when_action() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			match(LITERAL_when);
			{
			switch ( LA(1)) {
			case LITERAL_not:
			{
				match(LITERAL_not);
				break;
			}
			case LITERAL_matched:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			match(LITERAL_matched);
			match(LITERAL_then);
			{
			switch ( LA(1)) {
			case LITERAL_update:
			{
				{
				match(LITERAL_update);
				match(LITERAL_set);
				column_spec();
				match(EQ);
				plsql_expression();
				{
				_loop1604:
				do {
					if ((LA(1)==COMMA)) {
						match(COMMA);
						column_spec();
						match(EQ);
						plsql_expression();
					}
					else {
						break _loop1604;
					}
					
				} while (true);
				}
				}
				break;
			}
			case LITERAL_insert:
			{
				insert_columns();
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			if ((LA(1)==LITERAL_where)) {
				where_condition();
			}
			else if ((_tokenSet_34.member(LA(1)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			if ( inputState.guessing==0 ) {
				__markRule(MERGE_WHEN_COMMAND);
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_34);
			} else {
			  throw ex;
			}
		}
	}
	
	public void insert_columns() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			match(LITERAL_insert);
			{
			switch ( LA(1)) {
			case OPEN_PAREN:
			{
				column_spec_list();
				break;
			}
			case LITERAL_values:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			match(LITERAL_values);
			parentesized_exp_list();
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_310);
			} else {
			  throw ex;
			}
		}
	}
	
	public void subquery_update() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			column_spec_list();
			match(EQ);
			subquery();
			{
			if ((LA(1)==LITERAL_where)) {
				where_condition();
			}
			else if ((_tokenSet_34.member(LA(1)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_34);
			} else {
			  throw ex;
			}
		}
	}
	
	public void simple_update() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			column_spec();
			match(EQ);
			plsql_expression();
			{
			_loop1615:
			do {
				if ((LA(1)==COMMA)) {
					match(COMMA);
					column_spec();
					match(EQ);
					plsql_expression();
				}
				else {
					break _loop1615;
				}
				
			} while (true);
			}
			{
			if ((LA(1)==LITERAL_where)) {
				where_condition();
			}
			else if ((_tokenSet_37.member(LA(1)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			{
			if ((LA(1)==LITERAL_return||LA(1)==LITERAL_returning) && (_tokenSet_32.member(LA(2))) && (LA(3)==DOT||LA(3)==COMMA||LA(3)==LITERAL_into)) {
				returning();
			}
			else if ((_tokenSet_34.member(LA(1))) && (_tokenSet_3.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_34);
			} else {
			  throw ex;
			}
		}
	}
	
	public void lock_mode() throws RecognitionException, TokenStreamException {
		
		Token  r1 = null;
		Token  s1 = null;
		Token  r2 = null;
		Token  e1 = null;
		Token  s2 = null;
		Token  u = null;
		Token  s3 = null;
		Token  s4 = null;
		Token  r3 = null;
		Token  e2 = null;
		Token  e3 = null;
		
		try {      // for error handling
			if ((LA(1)==LITERAL_row) && (LA(2)==LITERAL_share)) {
				r1 = LT(1);
				match(LITERAL_row);
				s1 = LT(1);
				match(LITERAL_share);
			}
			else if ((LA(1)==LITERAL_row) && (LA(2)==LITERAL_exclusive)) {
				r2 = LT(1);
				match(LITERAL_row);
				e1 = LT(1);
				match(LITERAL_exclusive);
			}
			else if ((LA(1)==LITERAL_share) && (LA(2)==LITERAL_update)) {
				s2 = LT(1);
				match(LITERAL_share);
				u = LT(1);
				match(LITERAL_update);
			}
			else if ((LA(1)==LITERAL_share) && (LA(2)==LITERAL_mode)) {
				s3 = LT(1);
				match(LITERAL_share);
			}
			else if ((LA(1)==LITERAL_share) && (LA(2)==LITERAL_row)) {
				s4 = LT(1);
				match(LITERAL_share);
				r3 = LT(1);
				match(LITERAL_row);
				e2 = LT(1);
				match(LITERAL_exclusive);
			}
			else if ((LA(1)==LITERAL_exclusive)) {
				e3 = LT(1);
				match(LITERAL_exclusive);
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_311);
			} else {
			  throw ex;
			}
		}
	}
	
	public void savepoint_name() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			identifier();
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_34);
			} else {
			  throw ex;
			}
		}
	}
	
	public void directory_spec() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			{
			switch ( LA(1)) {
			case LITERAL_default:
			{
				match(LITERAL_default);
				break;
			}
			case LITERAL_directory:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			match(LITERAL_directory);
			identifier();
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_312);
			} else {
			  throw ex;
			}
		}
	}
	
	public void access_parameters() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			match(LITERAL_access);
			match(LITERAL_parameters);
			match(OPEN_PAREN);
			loader_access_parameters();
			match(CLOSE_PAREN);
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_313);
			} else {
			  throw ex;
			}
		}
	}
	
	public void write_access_parameters() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			match(LITERAL_access);
			match(LITERAL_parameters);
			match(OPEN_PAREN);
			write_access_parameters_spec();
			match(CLOSE_PAREN);
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_313);
			} else {
			  throw ex;
			}
		}
	}
	
	public void location() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			match(LITERAL_location);
			match(OPEN_PAREN);
			{
			if ((_tokenSet_314.member(LA(1))) && (_tokenSet_315.member(LA(2))) && (_tokenSet_316.member(LA(3)))) {
				file_location_spec();
			}
			else if ((LA(1)==QUOTED_STR_START||LA(1)==QUOTED_STR) && (_tokenSet_317.member(LA(2))) && (_tokenSet_316.member(LA(3)))) {
				string_literal();
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			{
			_loop1792:
			do {
				if ((LA(1)==COMMA)) {
					match(COMMA);
					{
					if ((_tokenSet_314.member(LA(1))) && (_tokenSet_315.member(LA(2))) && (_tokenSet_316.member(LA(3)))) {
						file_location_spec();
					}
					else if ((LA(1)==QUOTED_STR_START||LA(1)==QUOTED_STR) && (_tokenSet_317.member(LA(2))) && (_tokenSet_316.member(LA(3)))) {
						string_literal();
					}
					else {
						throw new NoViableAltException(LT(1), getFilename());
					}
					
					}
				}
				else {
					break _loop1792;
				}
				
			} while (true);
			}
			match(CLOSE_PAREN);
			if ( inputState.guessing==0 ) {
				__markRule(EXT_TABLE_LOCATION_SPEC);
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_133);
			} else {
			  throw ex;
			}
		}
	}
	
	public void write_access_parameters_spec() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			{
			switch ( LA(1)) {
			case LITERAL_nologfile:
			{
				match(LITERAL_nologfile);
				break;
			}
			case LITERAL_logfile:
			{
				{
				match(LITERAL_logfile);
				file_location_spec();
				}
				break;
			}
			case CLOSE_PAREN:
			case LITERAL_version:
			case LITERAL_compression:
			case LITERAL_encryption:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_version:
			{
				match(LITERAL_version);
				{
				switch ( LA(1)) {
				case LITERAL_compatible:
				{
					match(LITERAL_compatible);
					break;
				}
				case LITERAL_latest:
				{
					match(LITERAL_latest);
					break;
				}
				case QUOTED_STR_START:
				case QUOTED_STR:
				{
					string_literal();
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				break;
			}
			case CLOSE_PAREN:
			case LITERAL_compression:
			case LITERAL_encryption:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_compression:
			{
				match(LITERAL_compression);
				{
				switch ( LA(1)) {
				case LITERAL_enabled:
				{
					match(LITERAL_enabled);
					break;
				}
				case LITERAL_disabled:
				{
					match(LITERAL_disabled);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				break;
			}
			case CLOSE_PAREN:
			case LITERAL_encryption:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_encryption:
			{
				match(LITERAL_encryption);
				{
				switch ( LA(1)) {
				case LITERAL_enabled:
				{
					match(LITERAL_enabled);
					break;
				}
				case LITERAL_disabled:
				{
					match(LITERAL_disabled);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				break;
			}
			case CLOSE_PAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				__markRule(WRITE_ACCESS_PARAMS_SPEC);
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_133);
			} else {
			  throw ex;
			}
		}
	}
	
	public void file_location_spec() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			{
			switch ( LA(1)) {
			case IDENTIFIER:
			case DOUBLE_QUOTED_STRING:
			{
				identifier();
				match(COLON);
				break;
			}
			case QUOTED_STR_START:
			case QUOTED_STR:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			string_literal();
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_318);
			} else {
			  throw ex;
			}
		}
	}
	
	public void loader_access_parameters() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			{
			switch ( LA(1)) {
			case LITERAL_records:
			{
				record_format_info();
				break;
			}
			case CLOSE_PAREN:
			case LITERAL_column:
			case LITERAL_fields:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_fields:
			{
				field_definitions();
				break;
			}
			case CLOSE_PAREN:
			case LITERAL_column:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_column:
			{
				column_transforms();
				break;
			}
			case CLOSE_PAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				__markRule(LOADER_ACCESS_PARAMS);
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_133);
			} else {
			  throw ex;
			}
		}
	}
	
	public void record_format_info() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			match(LITERAL_records);
			rec_format();
			{
			_loop1680:
			do {
				if ((_tokenSet_319.member(LA(1)))) {
					rec_format_spec();
				}
				else {
					break _loop1680;
				}
				
			} while (true);
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_320);
			} else {
			  throw ex;
			}
		}
	}
	
	public void field_definitions() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			match(LITERAL_fields);
			{
			switch ( LA(1)) {
			case LITERAL_enclosed:
			case LITERAL_terminated:
			{
				delim_spec();
				break;
			}
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case LITERAL_column:
			case LITERAL_reject:
			case LITERAL_missing:
			case LITERAL_lrtrim:
			case LITERAL_notrim:
			case LITERAL_ltrim:
			case LITERAL_rtrim:
			case LITERAL_ldrtrim:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_lrtrim:
			case LITERAL_notrim:
			case LITERAL_ltrim:
			case LITERAL_rtrim:
			case LITERAL_ldrtrim:
			{
				trim_spec();
				break;
			}
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case LITERAL_column:
			case LITERAL_reject:
			case LITERAL_missing:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_missing:
			{
				match(LITERAL_missing);
				match(LITERAL_field);
				match(LITERAL_values);
				match(LITERAL_are);
				match(LITERAL_null);
				break;
			}
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case LITERAL_column:
			case LITERAL_reject:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_reject:
			{
				match(LITERAL_reject);
				match(LITERAL_rows);
				match(LITERAL_with);
				match(LITERAL_all);
				match(LITERAL_null);
				match(LITERAL_fields);
				break;
			}
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case LITERAL_column:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case OPEN_PAREN:
			{
				match(OPEN_PAREN);
				field_list();
				match(CLOSE_PAREN);
				break;
			}
			case CLOSE_PAREN:
			case LITERAL_column:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_321);
			} else {
			  throw ex;
			}
		}
	}
	
	public void column_transforms() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			match(LITERAL_column);
			match(LITERAL_transforms);
			match(OPEN_PAREN);
			transform();
			{
			_loop1714:
			do {
				if ((LA(1)==COMMA)) {
					match(COMMA);
					transform();
				}
				else {
					break _loop1714;
				}
				
			} while (true);
			}
			match(CLOSE_PAREN);
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_133);
			} else {
			  throw ex;
			}
		}
	}
	
	public void rec_format() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			switch ( LA(1)) {
			case LITERAL_fixed:
			{
				{
				match(LITERAL_fixed);
				numeric_literal();
				}
				break;
			}
			case LITERAL_variable:
			{
				{
				match(LITERAL_variable);
				numeric_literal();
				}
				break;
			}
			case LITERAL_delimited:
			{
				{
				match(LITERAL_delimited);
				match(LITERAL_by);
				{
				switch ( LA(1)) {
				case LITERAL_newline:
				{
					match(LITERAL_newline);
					break;
				}
				case QUOTED_STR_START:
				case QUOTED_STR:
				{
					string_literal();
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				}
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_322);
			} else {
			  throw ex;
			}
		}
	}
	
	public void rec_format_spec() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			{
			switch ( LA(1)) {
			case LITERAL_characterset:
			{
				{
				match(LITERAL_characterset);
				{
				switch ( LA(1)) {
				case QUOTED_STR_START:
				case QUOTED_STR:
				{
					string_literal();
					break;
				}
				case IDENTIFIER:
				case DOUBLE_QUOTED_STRING:
				{
					identifier();
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				}
				break;
			}
			case LITERAL_data:
			{
				{
				match(LITERAL_data);
				match(LITERAL_is);
				{
				switch ( LA(1)) {
				case LITERAL_big:
				{
					match(LITERAL_big);
					break;
				}
				case LITERAL_little:
				{
					match(LITERAL_little);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				match(LITERAL_endian);
				}
				break;
			}
			case LITERAL_byte:
			{
				{
				match(LITERAL_byte);
				match(LITERAL_order);
				match(LITERAL_mark);
				{
				switch ( LA(1)) {
				case LITERAL_check:
				{
					match(LITERAL_check);
					break;
				}
				case LITERAL_nocheck:
				{
					match(LITERAL_nocheck);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				}
				break;
			}
			case LITERAL_string:
			{
				{
				match(LITERAL_string);
				match(LITERAL_sizes);
				match(LITERAL_in);
				{
				switch ( LA(1)) {
				case LITERAL_bytes:
				{
					match(LITERAL_bytes);
					break;
				}
				case LITERAL_characters:
				{
					match(LITERAL_characters);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				}
				break;
			}
			case LITERAL_load:
			{
				{
				match(LITERAL_load);
				match(LITERAL_when);
				condition();
				}
				break;
			}
			case LITERAL_nobadfile:
			case LITERAL_badfile:
			{
				{
				switch ( LA(1)) {
				case LITERAL_nobadfile:
				{
					match(LITERAL_nobadfile);
					break;
				}
				case LITERAL_badfile:
				{
					{
					match(LITERAL_badfile);
					file_location_spec();
					}
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				break;
			}
			case LITERAL_nodiscardfile:
			case LITERAL_discardfile:
			{
				{
				switch ( LA(1)) {
				case LITERAL_nodiscardfile:
				{
					match(LITERAL_nodiscardfile);
					break;
				}
				case LITERAL_discardfile:
				{
					{
					match(LITERAL_discardfile);
					file_location_spec();
					}
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				break;
			}
			case LITERAL_nologfile:
			case LITERAL_logfile:
			{
				{
				switch ( LA(1)) {
				case LITERAL_nologfile:
				{
					match(LITERAL_nologfile);
					break;
				}
				case LITERAL_logfile:
				{
					{
					match(LITERAL_logfile);
					file_location_spec();
					}
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				break;
			}
			case LITERAL_readsize:
			case LITERAL_data_cache:
			case LITERAL_skip:
			{
				{
				{
				switch ( LA(1)) {
				case LITERAL_readsize:
				{
					match(LITERAL_readsize);
					break;
				}
				case LITERAL_data_cache:
				{
					match(LITERAL_data_cache);
					break;
				}
				case LITERAL_skip:
				{
					match(LITERAL_skip);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				match(NUMBER);
				}
				break;
			}
			case LITERAL_preprocessor:
			{
				{
				match(LITERAL_preprocessor);
				file_location_spec();
				}
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				__markRule(RECORD_FMT_SPEC);
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_322);
			} else {
			  throw ex;
			}
		}
	}
	
	public void delim_spec() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			switch ( LA(1)) {
			case LITERAL_enclosed:
			{
				{
				match(LITERAL_enclosed);
				match(LITERAL_by);
				string_literal();
				{
				switch ( LA(1)) {
				case LITERAL_and:
				{
					match(LITERAL_and);
					string_literal();
					break;
				}
				case COMMA:
				case OPEN_PAREN:
				case CLOSE_PAREN:
				case LITERAL_column:
				case LITERAL_reject:
				case LITERAL_missing:
				case LITERAL_lrtrim:
				case LITERAL_notrim:
				case LITERAL_ltrim:
				case LITERAL_rtrim:
				case LITERAL_ldrtrim:
				case LITERAL_date_format:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				}
				break;
			}
			case LITERAL_terminated:
			{
				{
				match(LITERAL_terminated);
				match(LITERAL_by);
				{
				switch ( LA(1)) {
				case LITERAL_whitespace:
				{
					match(LITERAL_whitespace);
					break;
				}
				case QUOTED_STR_START:
				case QUOTED_STR:
				{
					string_literal();
					break;
				}
				case DOUBLE_QUOTED_STRING:
				{
					match(DOUBLE_QUOTED_STRING);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				{
				switch ( LA(1)) {
				case LITERAL_enclosed:
				case LITERAL_optionally:
				{
					{
					switch ( LA(1)) {
					case LITERAL_optionally:
					{
						match(LITERAL_optionally);
						break;
					}
					case LITERAL_enclosed:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(LT(1), getFilename());
					}
					}
					}
					match(LITERAL_enclosed);
					match(LITERAL_by);
					string_literal();
					{
					switch ( LA(1)) {
					case LITERAL_and:
					{
						match(LITERAL_and);
						string_literal();
						break;
					}
					case COMMA:
					case OPEN_PAREN:
					case CLOSE_PAREN:
					case LITERAL_column:
					case LITERAL_reject:
					case LITERAL_missing:
					case LITERAL_lrtrim:
					case LITERAL_notrim:
					case LITERAL_ltrim:
					case LITERAL_rtrim:
					case LITERAL_ldrtrim:
					case LITERAL_date_format:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(LT(1), getFilename());
					}
					}
					}
					break;
				}
				case COMMA:
				case OPEN_PAREN:
				case CLOSE_PAREN:
				case LITERAL_column:
				case LITERAL_reject:
				case LITERAL_missing:
				case LITERAL_lrtrim:
				case LITERAL_notrim:
				case LITERAL_ltrim:
				case LITERAL_rtrim:
				case LITERAL_ldrtrim:
				case LITERAL_date_format:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				}
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_323);
			} else {
			  throw ex;
			}
		}
	}
	
	public void trim_spec() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			switch ( LA(1)) {
			case LITERAL_lrtrim:
			{
				match(LITERAL_lrtrim);
				break;
			}
			case LITERAL_notrim:
			{
				match(LITERAL_notrim);
				break;
			}
			case LITERAL_ltrim:
			{
				match(LITERAL_ltrim);
				break;
			}
			case LITERAL_rtrim:
			{
				match(LITERAL_rtrim);
				break;
			}
			case LITERAL_ldrtrim:
			{
				match(LITERAL_ldrtrim);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_324);
			} else {
			  throw ex;
			}
		}
	}
	
	public void field_list() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			field_spec();
			{
			_loop1746:
			do {
				if ((LA(1)==COMMA)) {
					match(COMMA);
					field_spec();
				}
				else {
					break _loop1746;
				}
				
			} while (true);
			}
			if ( inputState.guessing==0 ) {
				__markRule(EXT_FIELD_SPEC_LIST);
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_133);
			} else {
			  throw ex;
			}
		}
	}
	
	public void transform() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			identifier2();
			match(LITERAL_from);
			{
			switch ( LA(1)) {
			case LITERAL_null:
			{
				match(LITERAL_null);
				break;
			}
			case LITERAL_constant:
			{
				const_str();
				break;
			}
			case LITERAL_concat:
			{
				{
				match(LITERAL_concat);
				match(OPEN_PAREN);
				{
				switch ( LA(1)) {
				case IDENTIFIER:
				case DOUBLE_QUOTED_STRING:
				{
					field_name();
					break;
				}
				case LITERAL_constant:
				{
					const_str();
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				{
				_loop1721:
				do {
					if ((LA(1)==COMMA)) {
						match(COMMA);
						{
						switch ( LA(1)) {
						case IDENTIFIER:
						case DOUBLE_QUOTED_STRING:
						{
							field_name();
							break;
						}
						case LITERAL_constant:
						{
							const_str();
							break;
						}
						default:
						{
							throw new NoViableAltException(LT(1), getFilename());
						}
						}
						}
					}
					else {
						break _loop1721;
					}
					
				} while (true);
				}
				match(CLOSE_PAREN);
				}
				break;
			}
			case LITERAL_lobfile:
			{
				{
				match(LITERAL_lobfile);
				match(OPEN_PAREN);
				{
				switch ( LA(1)) {
				case IDENTIFIER:
				case DOUBLE_QUOTED_STRING:
				{
					field_name();
					break;
				}
				case LITERAL_constant:
				{
					{
					const_str();
					match(COLON);
					}
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				{
				_loop1728:
				do {
					if ((LA(1)==COMMA)) {
						match(COMMA);
						{
						switch ( LA(1)) {
						case IDENTIFIER:
						case DOUBLE_QUOTED_STRING:
						{
							field_name();
							break;
						}
						case LITERAL_constant:
						{
							{
							const_str();
							match(COLON);
							}
							break;
						}
						default:
						{
							throw new NoViableAltException(LT(1), getFilename());
						}
						}
						}
					}
					else {
						break _loop1728;
					}
					
				} while (true);
				}
				match(CLOSE_PAREN);
				{
				switch ( LA(1)) {
				case LITERAL_blob:
				case LITERAL_clob:
				case LITERAL_from:
				{
					lobfile_attr_list();
					break;
				}
				case COMMA:
				case CLOSE_PAREN:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				}
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_62);
			} else {
			  throw ex;
			}
		}
	}
	
	public void const_str() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			match(LITERAL_constant);
			string_literal();
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_325);
			} else {
			  throw ex;
			}
		}
	}
	
	public void lobfile_attr_list() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			switch ( LA(1)) {
			case LITERAL_from:
			{
				{
				match(LITERAL_from);
				match(OPEN_PAREN);
				identifier2();
				{
				_loop1733:
				do {
					if ((LA(1)==COMMA)) {
						match(COMMA);
						identifier2();
					}
					else {
						break _loop1733;
					}
					
				} while (true);
				}
				match(CLOSE_PAREN);
				}
				break;
			}
			case LITERAL_clob:
			{
				match(LITERAL_clob);
				break;
			}
			case LITERAL_blob:
			{
				match(LITERAL_blob);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_62);
			} else {
			  throw ex;
			}
		}
	}
	
	public void field_spec() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			identifier2();
			{
			switch ( LA(1)) {
			case LITERAL_position:
			{
				pos_spec();
				break;
			}
			case COMMA:
			case CLOSE_PAREN:
			case LITERAL_char:
			case LITERAL_raw:
			case LITERAL_integer:
			case LITERAL_double:
			case LITERAL_float:
			case LITERAL_decimal:
			case LITERAL_varchar:
			case LITERAL_unsigned:
			case LITERAL_zoned:
			case LITERAL_oracle_date:
			case LITERAL_oracle_number:
			case LITERAL_varraw:
			case LITERAL_varcharc:
			case LITERAL_varrawc:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_char:
			case LITERAL_raw:
			case LITERAL_integer:
			case LITERAL_double:
			case LITERAL_float:
			case LITERAL_decimal:
			case LITERAL_varchar:
			case LITERAL_unsigned:
			case LITERAL_zoned:
			case LITERAL_oracle_date:
			case LITERAL_oracle_number:
			case LITERAL_varraw:
			case LITERAL_varcharc:
			case LITERAL_varrawc:
			{
				datatype_spec();
				break;
			}
			case COMMA:
			case CLOSE_PAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				__markRule(EXT_FIELD_SPEC);
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_62);
			} else {
			  throw ex;
			}
		}
	}
	
	public void pos_spec() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			match(LITERAL_position);
			match(OPEN_PAREN);
			{
			switch ( LA(1)) {
			case ASTERISK:
			{
				match(ASTERISK);
				break;
			}
			case PLUS:
			case MINUS:
			case NUMBER:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case PLUS:
			{
				match(PLUS);
				break;
			}
			case MINUS:
			{
				match(MINUS);
				break;
			}
			case NUMBER:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			numeric_literal();
			match(COLON);
			{
			switch ( LA(1)) {
			case PLUS:
			{
				match(PLUS);
				break;
			}
			case NUMBER:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			numeric_literal();
			match(CLOSE_PAREN);
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_326);
			} else {
			  throw ex;
			}
		}
	}
	
	public void datatype_spec() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			switch ( LA(1)) {
			case LITERAL_integer:
			case LITERAL_unsigned:
			{
				{
				{
				switch ( LA(1)) {
				case LITERAL_unsigned:
				{
					match(LITERAL_unsigned);
					break;
				}
				case LITERAL_integer:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				match(LITERAL_integer);
				{
				switch ( LA(1)) {
				case LITERAL_external:
				{
					match(LITERAL_external);
					break;
				}
				case COMMA:
				case OPEN_PAREN:
				case CLOSE_PAREN:
				case LITERAL_enclosed:
				case LITERAL_terminated:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				{
				switch ( LA(1)) {
				case OPEN_PAREN:
				{
					match(OPEN_PAREN);
					match(NUMBER);
					match(CLOSE_PAREN);
					break;
				}
				case COMMA:
				case CLOSE_PAREN:
				case LITERAL_enclosed:
				case LITERAL_terminated:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				{
				switch ( LA(1)) {
				case LITERAL_enclosed:
				case LITERAL_terminated:
				{
					delim_spec();
					break;
				}
				case COMMA:
				case CLOSE_PAREN:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				}
				break;
			}
			case LITERAL_decimal:
			case LITERAL_zoned:
			{
				{
				{
				switch ( LA(1)) {
				case LITERAL_decimal:
				{
					match(LITERAL_decimal);
					break;
				}
				case LITERAL_zoned:
				{
					match(LITERAL_zoned);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				{
				switch ( LA(1)) {
				case LITERAL_external:
				{
					{
					match(LITERAL_external);
					}
					{
					switch ( LA(1)) {
					case OPEN_PAREN:
					{
						match(OPEN_PAREN);
						match(NUMBER);
						match(CLOSE_PAREN);
						break;
					}
					case COMMA:
					case CLOSE_PAREN:
					case LITERAL_enclosed:
					case LITERAL_terminated:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(LT(1), getFilename());
					}
					}
					}
					{
					switch ( LA(1)) {
					case LITERAL_enclosed:
					case LITERAL_terminated:
					{
						delim_spec();
						break;
					}
					case COMMA:
					case CLOSE_PAREN:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(LT(1), getFilename());
					}
					}
					}
					break;
				}
				case OPEN_PAREN:
				{
					{
					match(OPEN_PAREN);
					match(NUMBER);
					match(CLOSE_PAREN);
					}
					break;
				}
				case COMMA:
				case CLOSE_PAREN:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				}
				break;
			}
			case LITERAL_oracle_date:
			{
				match(LITERAL_oracle_date);
				break;
			}
			case LITERAL_oracle_number:
			{
				{
				match(LITERAL_oracle_number);
				{
				switch ( LA(1)) {
				case LITERAL_counted:
				{
					match(LITERAL_counted);
					break;
				}
				case COMMA:
				case CLOSE_PAREN:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				}
				break;
			}
			case LITERAL_float:
			{
				{
				match(LITERAL_float);
				{
				switch ( LA(1)) {
				case LITERAL_external:
				{
					match(LITERAL_external);
					break;
				}
				case COMMA:
				case OPEN_PAREN:
				case CLOSE_PAREN:
				case LITERAL_enclosed:
				case LITERAL_terminated:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				{
				switch ( LA(1)) {
				case OPEN_PAREN:
				{
					match(OPEN_PAREN);
					match(NUMBER);
					match(CLOSE_PAREN);
					break;
				}
				case COMMA:
				case CLOSE_PAREN:
				case LITERAL_enclosed:
				case LITERAL_terminated:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				{
				switch ( LA(1)) {
				case LITERAL_enclosed:
				case LITERAL_terminated:
				{
					delim_spec();
					break;
				}
				case COMMA:
				case CLOSE_PAREN:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				}
				break;
			}
			case LITERAL_double:
			{
				match(LITERAL_double);
				break;
			}
			case LITERAL_raw:
			{
				{
				match(LITERAL_raw);
				{
				switch ( LA(1)) {
				case OPEN_PAREN:
				{
					match(OPEN_PAREN);
					match(NUMBER);
					match(CLOSE_PAREN);
					break;
				}
				case COMMA:
				case CLOSE_PAREN:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				}
				break;
			}
			case LITERAL_char:
			{
				{
				match(LITERAL_char);
				{
				switch ( LA(1)) {
				case OPEN_PAREN:
				{
					match(OPEN_PAREN);
					match(NUMBER);
					match(CLOSE_PAREN);
					break;
				}
				case COMMA:
				case CLOSE_PAREN:
				case LITERAL_enclosed:
				case LITERAL_terminated:
				case LITERAL_lrtrim:
				case LITERAL_notrim:
				case LITERAL_ltrim:
				case LITERAL_rtrim:
				case LITERAL_ldrtrim:
				case LITERAL_date_format:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				{
				switch ( LA(1)) {
				case LITERAL_enclosed:
				case LITERAL_terminated:
				{
					delim_spec();
					break;
				}
				case COMMA:
				case CLOSE_PAREN:
				case LITERAL_lrtrim:
				case LITERAL_notrim:
				case LITERAL_ltrim:
				case LITERAL_rtrim:
				case LITERAL_ldrtrim:
				case LITERAL_date_format:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				{
				switch ( LA(1)) {
				case LITERAL_lrtrim:
				case LITERAL_notrim:
				case LITERAL_ltrim:
				case LITERAL_rtrim:
				case LITERAL_ldrtrim:
				{
					trim_spec();
					break;
				}
				case COMMA:
				case CLOSE_PAREN:
				case LITERAL_date_format:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				{
				switch ( LA(1)) {
				case LITERAL_date_format:
				{
					date_format_spec();
					break;
				}
				case COMMA:
				case CLOSE_PAREN:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				}
				break;
			}
			case LITERAL_varchar:
			case LITERAL_varraw:
			case LITERAL_varcharc:
			case LITERAL_varrawc:
			{
				{
				{
				switch ( LA(1)) {
				case LITERAL_varchar:
				{
					match(LITERAL_varchar);
					break;
				}
				case LITERAL_varraw:
				{
					match(LITERAL_varraw);
					break;
				}
				case LITERAL_varcharc:
				{
					match(LITERAL_varcharc);
					break;
				}
				case LITERAL_varrawc:
				{
					match(LITERAL_varrawc);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				{
				switch ( LA(1)) {
				case OPEN_PAREN:
				{
					match(OPEN_PAREN);
					match(NUMBER);
					{
					switch ( LA(1)) {
					case COMMA:
					{
						match(COMMA);
						match(NUMBER);
						break;
					}
					case CLOSE_PAREN:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(LT(1), getFilename());
					}
					}
					}
					match(CLOSE_PAREN);
					break;
				}
				case COMMA:
				case CLOSE_PAREN:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				}
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_62);
			} else {
			  throw ex;
			}
		}
	}
	
	public void date_format_spec() throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			match(LITERAL_date_format);
			{
			switch ( LA(1)) {
			case LITERAL_timestamp:
			{
				match(LITERAL_timestamp);
				break;
			}
			case LITERAL_date:
			{
				match(LITERAL_date);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_with:
			{
				match(LITERAL_with);
				match(LITERAL_timezone);
				break;
			}
			case LITERAL_mask:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			match(LITERAL_mask);
			{
			switch ( LA(1)) {
			case QUOTED_STR_START:
			case QUOTED_STR:
			{
				string_literal();
				break;
			}
			case DOUBLE_QUOTED_STRING:
			{
				match(DOUBLE_QUOTED_STRING);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_62);
			} else {
			  throw ex;
			}
		}
	}
	
	
	public static final String[] _tokenNames = {
		"<0>",
		"EOF",
		"<2>",
		"NULL_TREE_LOOKAHEAD",
		"BAD_ML_COMMENT",
		"BAD_CHARACTER",
		"BAD_CHAR_LITERAL",
		"BAD_NUMBER_LITERAL",
		"STORAGE_SIZE",
		"LT",
		"LE",
		"GE",
		"NOT_EQ",
		"CUSTOM_TOKEN",
		"COLON_NEW",
		"COLON_OLD",
		"TABLE_NAME_SPEC",
		"QUOTED_STR_START",
		"QUOTED_STR_END",
		"BAD_QUOTED_STRING",
		"PLSQL_ENV_VAR",
		"ANY_CHARACTER",
		"IDENTIFIER",
		"QUOTED_STR",
		"DOUBLE_QUOTED_STRING",
		"AT_PREFIXED",
		"SEMI",
		"COLON",
		"DOT",
		"COMMA",
		"ASTERISK",
		"OPEN_PAREN",
		"CLOSE_PAREN",
		"PLUS",
		"MINUS",
		"DIVIDE",
		"BACKSLASH",
		"EQ",
		"PERCENTAGE",
		"DOUBLEDOT",
		"CONCAT",
		"START_LABEL",
		"DOLLAR",
		"END_LABEL",
		"ASSIGNMENT_EQ",
		"PASS_BY_NAME",
		"VERTBAR",
		"GT",
		"NUMBER",
		"N",
		"WS",
		"LF",
		"SL_COMMENT",
		"ML_COMMENT",
		"IF_COND_CMPL",
		"THEN_COND_CMPL",
		"ELSE_COND_CMPL",
		"END_COND_CMPL",
		"ERROR_COND_CMPL",
		"START_RULE",
		"ERROR_TOKEN_A",
		"PACKAGE_SPEC",
		"PACKAGE_BODY",
		"PACKAGE_NAME",
		"PACKAGE_OBJ_BODY",
		"RECORD_TYPE_DECL",
		"SELECT_EXPRESSION",
		"SELECT_EXPRESSION_UNION",
		"PLSQL_BLOCK",
		"PLSQL_BLOCK_END",
		"CURSOR_DECLARATION",
		"VARIABLE_DECLARATION",
		"PROCEDURE_BODY",
		"FUNCTION_BODY",
		"PARAMETER_SPEC",
		"IF_STATEMENT",
		"LOOP_STATEMENT",
		"STATEMENT",
		"TABLE_REFERENCE_LIST",
		"TABLE_REFERENCE_LIST_FROM",
		"WHERE_CONDITION",
		"SUBQUERY",
		"SQL_IDENTIFIER",
		"FUNCTION",
		"GROUP_FUNCTION",
		"USER_FUNCTION",
		"MULTIPLY",
		"ARGUMENT",
		"ARGUMENT_LIST",
		"FIELD_NAME",
		"PLSQL_EXPR_LIST_USING",
		"EXPR_LIST",
		"DECLARE_LIST",
		"FUNCTION_CALL",
		"PACKAGE_INIT_SECTION",
		"CALL_ARGUMENT_LIST",
		"SPEC_CALL_ARGUMENT_LIST",
		"QUERY_PARTITION_CLAUSE",
		"EXTRACT_OPTIONS",
		"CALL_ARGUMENT",
		"BASE_EXRESSION",
		"COLUMN_SPEC",
		"LOGICAL_AND",
		"LOGICAL_OR",
		"CASE_EXPRESSION_SMPL",
		"CASE_EXPRESSION_SRCH",
		"CASE_STATEMENT",
		"COUNT_FUNC",
		"SQLPLUS_ANONYM_PLSQL_BLOCK",
		"RANK_FUNCTION",
		"LEAD_FUNCTION",
		"LAG_FUNCTION",
		"TRIM_FUNC",
		"DECODE_FUNC",
		"COLUMN_SPEC_LIST",
		"INSERT_COMMAND",
		"UPDATE_COMMAND",
		"DELETE_COMMAND",
		"MERGE_COMMAND",
		"MERGE_WHEN_COMMAND",
		"STRING_LITERAL",
		"NUMERIC_LITERAL",
		"BOOLEAN_LITERAL",
		"RETURN_TYPE",
		"TYPE_SPEC",
		"VARIABLE_NAME",
		"COLUMN_OUTER_JOIN",
		"LOGICAL_FACTOR",
		"TABLE_ALIAS",
		"CAST_FUNC",
		"VAR_REF",
		"PLSQL_VAR_REF",
		"PARAMETER_REF",
		"EXCEPTION_SECTION",
		"EXCEPTION_HANDLER",
		"SELECTED_TABLE",
		"CREATE_PROCEDURE",
		"CREATE_FUNCTION",
		"COMMIT_STATEMENT",
		"ROLLBACK_STATEMENT",
		"NULL_STATEMENT",
		"ASSIGNMENT_STATEMENT",
		"PROCEDURE_CALL",
		"RETURN_STATEMENT",
		"LOCK_TABLE_STATEMENT",
		"OPEN_STATEMENT",
		"FETCH_STATEMENT",
		"SET_TRN_STATEMENT",
		"CLOSE_STATEMENT",
		"OBJECT_NAME",
		"PARAMETER_NAME",
		"DEFAULT",
		"THEN_STATEMENT",
		"ELSIF_STATEMENT",
		"ELSE_STATEMENT",
		"STATEMENT_LIST",
		"RELATION_CONDITION",
		"ISNULL_CONDITION",
		"LIKE_CONDITION",
		"BETWEEN_CONDITION",
		"IN_CONDITION",
		"PARENTHESIZED_EXPR",
		"ORDER_CLAUSE",
		"CONNECT_CLAUSE",
		"GROUP_CLAUSE",
		"INTO_CLAUSE",
		"FOR_UPDATE_CLAUSE",
		"PARTITION_NAME",
		"ASTERISK1",
		"ROWCOUNT_EXRESSION",
		"MULTIPLICATION_OP",
		"DIVIDE_OP",
		"PLUS_OP",
		"MINUS_OP",
		"CONCAT_OP",
		"CURSOR_NAME",
		"CURSOR_NAME_REF",
		"DATATYPE",
		"EXTRACT_DATE_FUNC",
		"ANSI_JOIN_TAB_SPEC",
		"ANSI_JOIN_TAB_CONDITION",
		"INTERVAL_DAY_TO_SEC_EXPR",
		"INTERVAL_YEAR_TO_MONTH_EXPR",
		"INTERVAL_CONST",
		"USER_CONST",
		"SYSDATE_CONST",
		"SYSTIMESTAMP_CONST",
		"CURRENT_TIMESTAMP_CONST",
		"ALIAS_NAME",
		"EXISTS_EXPR",
		"SUBQUERY_EXPR",
		"TYPE_NAME_REF",
		"TYPE_NAME",
		"SORTED_DEF",
		"RAISE_STATEMENT",
		"PACKAGE_OBJ_SPEC",
		"PROCEDURE_SPEC",
		"SIMPLE_UPDATE_COMMAND",
		"SUBQUERY_UPDATE_COMMAND",
		"IMMEDIATE_COMMAND",
		"FUNCTION_SPEC",
		"NEGATE_FACTOR",
		"TABLE_TYPE_REF",
		"COLUMN_TYPE_REF",
		"STATEMENT_ANNOT",
		"ASTERISK_COLUMN",
		"IDENT_ASTERISK_COLUMN",
		"EXPR_COLUMN",
		"TABLE_REF",
		"TABLE_REF_WITH_LINK",
		"FROM_SUBQUERY",
		"FROM_PLAIN_TABLE",
		"SCHEMA_NAME",
		"COLUMN_NAME_REF",
		"ARITHMETIC_EXPR",
		"ASSIGNMENT_OP",
		"DBTIMEZONE",
		"SUBQUERY_CONDITION",
		"RECORD_ITEM",
		"EXCEPTION_DECL",
		"COMPLEX_NAME",
		"CHARACTER_SET",
		"AUTHID",
		"RESTRICT_REF_PRAGMA",
		"AUTONOMOUS_TRN_PRAGMA",
		"EXCEPTION_PRAGMA",
		"FIPSFLAG_PRAGMA",
		"BUILTIN_PRAGMA",
		"INTERFACE_PRAGMA",
		"TIMESTAMPG_PRAGMA",
		"SERIALLY_REUSABLE_PRAGMA",
		"TIMESTAMP_CONST",
		"SUBTYPE_DECL",
		"MEMBER_OF",
		"SQLPLUS_SET",
		"SQLPLUS_SHOW",
		"SQLPLUS_DEFINE",
		"SQLPLUS_VARIABLE",
		"SQLPLUS_EXEC",
		"SQLPLUS_WHENEVER",
		"SQLPLUS_PROMPT",
		"SQLPLUS_COLUMN",
		"SQLPLUS_START",
		"SQLPLUS_SERVEROUTPUT",
		"SQLPLUS_REPFOOTER",
		"SQLPLUS_REPHEADER",
		"SQLPLUS_EXIT",
		"SQLPLUS_QUIT",
		"SQLPLUS_RUNSCRIPT",
		"SQLPLUS_SPOOL",
		"CONSUMED_TILL_EOL",
		"OR_LOGICAL",
		"AND_LOGICAL",
		"NOT_LOGICAL",
		"LOGICAL_EXPR",
		"RELATION_OP",
		"SEQUENCE_EXPR",
		"SEQUENCE_REF",
		"ALIAS_IDENT",
		"COLUMN_NAME_DDL",
		"COLUMN_DEF",
		"TABLE_DEF",
		"A_COLUMN_DEF",
		"TABLE_COLLECTION",
		"VARRAY_COLLECTION",
		"REF_CURSOR",
		"OBJECT_TYPE_DEF",
		"AT_TIME_ZONE_EXPR",
		"TIMEZONE_SPEC",
		"GRANT_COMMAND",
		"REVOKE_COMMAND",
		"ALTER_TABLE",
		"ALTER_GENERIC",
		"ALTER_TABLE_CONSTRAINT",
		"CREATE_TEMP_TABLE",
		"COMMENT",
		"COMMENT_STR",
		"CREATE_INDEX",
		"INSERT_INTO_SUBQUERY_COMMAND",
		"CONDITIONAL_COMPILATION",
		"COND_COMP_SEQ",
		"COND_COMP_SEQ2",
		"COND_COMP_ERROR",
		"COLUMN_NAME_LIST",
		"OWNER_COLUMN_NAME_LIST",
		"CREATE_VIEW",
		"DATATYPE_PARAM_INFO",
		"CREATE_VIEW_COLUMN_DEF",
		"TABLE_FUNCTION",
		"ROWNUM",
		"ROWID",
		"CUSTOM_AGGR_FUNCTION",
		"LAST_STMT_RESULT_NUM",
		"LAST_STMT_RESULT_BOOL",
		"SQL_CURSOR_FAKE_ATTR",
		"CURRENT_OF_CLAUSE",
		"CURSOR_STATE",
		"SQLCODE_SYSVAR",
		"SQLERRM_SYSVAR",
		"COLLECTION_METHOD_CALL",
		"COLLECTION_METHOD_CALL2",
		"C_RECORD_ITEM_REF",
		"CALLABLE_NAME_REF",
		"BUILTIN_FUNC_NAME",
		"TRUNCATE_TABLE",
		"DROP_VIEW",
		"DROP_TABLE",
		"DROP_FUNCTION",
		"DROP_PROCEDURE",
		"DROP_PACKAGE",
		"DROP_INDEX",
		"DROP_SEQUENCE",
		"DROP_TYPE",
		"DROP_OPERATOR",
		"DROP_SYNONYM",
		"DROP_USER",
		"DROP_ROLE",
		"DROP_LIBRARY",
		"DROP_DB_LINK",
		"DROP_DIRECTORY",
		"DROP_TRIGGER",
		"CREATE_SYNONYM",
		"SYNONYM_NAME",
		"SYNONYM_OBJ",
		"SYNONYM_OBJ_WITH_LINK",
		"COLUMN_PK_SPEC",
		"COLUMN_FK_SPEC",
		"NOT_NULL_STMT",
		"COLUMN_CHECK_CONSTRAINT",
		"COLUMN_NOT_NULL_CONSTRAINT",
		"PK_SPEC",
		"FK_SPEC",
		"UNIQUE_CONSTRAINT",
		"CHECK_CONSTRAINT",
		"CONSTRAINT_NAME",
		"ADD_CONSTRAINT",
		"ADD_PRIMARY_KEY",
		"ALTER_COLUMN_SPEC",
		"IOT_TYPE",
		"HEAP_ORGINIZED",
		"EXTERNAL_TYPE",
		"EXTERNAL_TABLE_SPEC",
		"WRITE_ACCESS_PARAMS_SPEC",
		"LOADER_ACCESS_PARAMS",
		"EXT_FIELD_SPEC_LIST",
		"EXT_FIELD_SPEC",
		"RECORD_FMT_SPEC",
		"EXT_TABLE_LOCATION_SPEC",
		"STORAGE_PARAM",
		"STORAGE_SPEC",
		"PARALLEL_CLAUSE",
		"REJECT_SPEC",
		"NAME_FRAGMENT",
		"EXEC_NAME_REF",
		"COLLECTION_METHOD_NAME",
		"V_COLUMN_DEF",
		"TABLE_NAME_DDL",
		"VIEW_NAME",
		"INDEX_NAME",
		"VIEW_NAME_DDL",
		"SEQUENCE_NAME",
		"CREATE_TRIGGER",
		"CREATE_DIRECTORY",
		"CREATE_DB_LINK",
		"CREATE_SEQUENCE",
		"TRIGGER_FOR_EACH",
		"TRIGGER_NAME",
		"ALTER_TRIGGER",
		"DB_EVNT_TRIGGER_CLAUSE",
		"DDL_TRIGGER_CLAUSE",
		"DML_TRIGGER_CLAUSE",
		"TRIGGER_COLUMN_REF",
		"INSTEADOF_TRIGGER",
		"TRIGGER_TARGET",
		"FORALL_LOOP_SPEC",
		"CURSOR_REF_LOOP_SPEC",
		"CURSOR_LOOP_SPEC",
		"CURSOR_LOOP_INDEX",
		"NUM_LOOP_INDEX",
		"NUMERIC_LOOP_SPEC",
		"RECORD_ITEM_NAME",
		"GOTO_STATEMENT",
		"EXIT_STATEMENT",
		"LABEL_NAME",
		"PARTITION_SPEC",
		"RANGE_PARTITION",
		"HASH_PARTITION",
		"MONITORING_CLAUSE",
		"CREATE_TABLESPACE",
		"DROP_TABLESPACE",
		"TABLESPACE_NAME",
		"ALTER_TABLESPACE",
		"CREATE_USER",
		"CREATE_TYPE",
		"BIND_VAR",
		"RETURNING_CLAUSE",
		"TABLE_REF_NOT_RESOLVED",
		"VIEW_NAME_REF",
		"TABLE_NAME_REF",
		"GENERIC_REF",
		"CALL_NOT_RESOLVED",
		"BUILT_IT_FUNCTION_CALL",
		"UDF_CALL",
		"UDP_CALL",
		"\"package\"",
		"\"body\"",
		"\"alter\"",
		"\"drop\"",
		"\"table\"",
		"\"purge\"",
		"\"view\"",
		"\"cascade\"",
		"\"constraints\"",
		"\"function\"",
		"\"procedure\"",
		"\"index\"",
		"\"force\"",
		"\"sequence\"",
		"\"type\"",
		"\"validate\"",
		"\"public\"",
		"\"synonym\"",
		"\"operator\"",
		"\"user\"",
		"\"role\"",
		"\"directory\"",
		"\"library\"",
		"\"database\"",
		"\"link\"",
		"\"trigger\"",
		"\"associate\"",
		"\"statistics\"",
		"\"with\"",
		"\"column\"",
		"\"functions\"",
		"\"packages\"",
		"\"types\"",
		"\"indexes\"",
		"\"indextypes\"",
		"\"system\"",
		"\"managed\"",
		"\"storage\"",
		"\"default\"",
		"\"cost\"",
		"\"selectivity\"",
		"\"using\"",
		"\"null\"",
		"\"truncate\"",
		"\"comment\"",
		"\"on\"",
		"\"is\"",
		"\"not\"",
		"\"disable\"",
		"\"enable\"",
		"\"row\"",
		"\"movement\"",
		"\"constraint\"",
		"\"primary\"",
		"\"key\"",
		"\"references\"",
		"\"rely\"",
		"\"check\"",
		"\"unique\"",
		"\"sysdate\"",
		"\"systimestamp\"",
		"\"set\"",
		"\"long\"",
		"\"show\"",
		"\"var\"",
		"\"variable\"",
		"\"col\"",
		"\"exec\"",
		"\"execute\"",
		"\"whenever\"",
		"\"sqlerror\"",
		"\"oserror\"",
		"\"exit\"",
		"\"continue\"",
		"\"commit\"",
		"\"rollback\"",
		"\"none\"",
		"\"def\"",
		"\"define\"",
		"\"prompt\"",
		"\"rem\"",
		"\"host\"",
		"\"quit\"",
		"\"spool\"",
		"\"sta\"",
		"\"start\"",
		"\"repfooter\"",
		"\"off\"",
		"\"repheader\"",
		"\"serveroutput\"",
		"\"begin\"",
		"\"declare\"",
		"DOUBLE_DOT",
		"\"create\"",
		"\"or\"",
		"\"replace\"",
		"\"global\"",
		"\"temporary\"",
		"\"under\"",
		"\"final\"",
		"\"as\"",
		"\"object\"",
		"\"identified\"",
		"\"by\"",
		"\"externally\"",
		"\"globally\"",
		"\"tablespace\"",
		"\"quota\"",
		"\"unlimited\"",
		"\"profile\"",
		"\"password\"",
		"\"expire\"",
		"\"account\"",
		"\"lock\"",
		"\"unlock\"",
		"\"bigfile\"",
		"\"smallfile\"",
		"\"tempfile\"",
		"\"undo\"",
		"\"datafile\"",
		"\"next\"",
		"\"maxsize\"",
		"\"size\"",
		"\"reuse\"",
		"\"extent\"",
		"\"management\"",
		"\"local\"",
		"\"uniform\"",
		"\"dictionary\"",
		"\"retention\"",
		"\"guarantee\"",
		"\"noguarantee\"",
		"\"autoextend\"",
		"\"group\"",
		"\"logging\"",
		"\"nologging\"",
		"\"no\"",
		"\"online\"",
		"\"offline\"",
		"\"normal\"",
		"\"immediate\"",
		"\"read\"",
		"\"only\"",
		"\"write\"",
		"\"permanent\"",
		"\"including\"",
		"\"contents\"",
		"\"and\"",
		"\"datafiles\"",
		"\"add\"",
		"\"rename\"",
		"\"to\"",
		"\"end\"",
		"\"backup\"",
		"\"coalesce\"",
		"\"minimum\"",
		"\"maxvalue\"",
		"\"minvalue\"",
		"\"cycle\"",
		"\"nocycle\"",
		"\"cache\"",
		"\"nocache\"",
		"\"increment\"",
		"\"order\"",
		"\"noorder\"",
		"\"for\"",
		"\"connect\"",
		"\"after\"",
		"\"before\"",
		"\"startup\"",
		"\"shutdown\"",
		"\"servererror\"",
		"\"logon\"",
		"\"logoff\"",
		"\"analyze\"",
		"\"audit\"",
		"\"noaudit\"",
		"\"ddl\"",
		"\"diassociate\"",
		"\"grant\"",
		"\"revoke\"",
		"\"schema\"",
		"\"instead\"",
		"\"of\"",
		"\"delete\"",
		"\"insert\"",
		"\"update\"",
		"\"each\"",
		"\"referencing\"",
		"\"old\"",
		"\"new\"",
		"\"when\"",
		"\"bitmap\"",
		"\"asc\"",
		"\"desc\"",
		"\"preserve\"",
		"\"rows\"",
		"\"nested\"",
		"\"store\"",
		"\"return\"",
		"\"locator\"",
		"\"value\"",
		"\"lob\"",
		"\"chunk\"",
		"\"reads\"",
		"\"pctversion\"",
		"\"freepools\"",
		"\"in\"",
		"\"segment\"",
		"\"creation\"",
		"\"deferred\"",
		"\"cluster\"",
		"\"pctthreshold\"",
		"\"filesystem_like_logging\"",
		"\"compress\"",
		"\"all\"",
		"\"direct_load\"",
		"\"operations\"",
		"\"nocompress\"",
		"\"pctfree\"",
		"\"pctused\"",
		"\"initrans\"",
		"\"maxtrans\"",
		"\"compute\"",
		"\"parallel\"",
		"\"noparallel\"",
		"\"monitoring\"",
		"\"nomonitoring\"",
		"\"overflow\"",
		"\"partition\"",
		"\"range\"",
		"\"interval\"",
		"\"values\"",
		"\"less\"",
		"\"than\"",
		"\"hash\"",
		"\"partitions\"",
		"\"novalidate\"",
		"\"organization\"",
		"\"heap\"",
		"\"external\"",
		"\"degree\"",
		"\"instances\"",
		"\"reject\"",
		"\"limit\"",
		"\"initial\"",
		"\"minextents\"",
		"\"maxextents\"",
		"\"pctincrease\"",
		"\"freelists\"",
		"\"freelist\"",
		"\"groups\"",
		"\"optimal\"",
		"\"buffer_pool\"",
		"\"keep\"",
		"\"recycle\"",
		"\"flash_cache\"",
		"\"cell_flash_cache\"",
		"\"encrypt\"",
		"\"foreign\"",
		"\"restrict\"",
		"\"action\"",
		"\"modify\"",
		"\"sort\"",
		"\"nosort\"",
		"\"reverse\"",
		"\"visible\"",
		"\"novisible\"",
		"\"record\"",
		"\"ref\"",
		"\"cursor\"",
		"\"rowtype\"",
		"\"varray\"",
		"\"option\"",
		"\"view_column_def_$internal$\"",
		"\"timestamp\"",
		"\"authid\"",
		"\"wrapped\"",
		"\"pragma\"",
		"\"restrict_references\"",
		"\"interface\"",
		"\"builtin\"",
		"\"fipsflag\"",
		"\"exception_init\"",
		"\"constant\"",
		"\"subtype\"",
		"\"loop\"",
		"\"while\"",
		"\"sql\"",
		"\"found\"",
		"\"notfound\"",
		"\"rowcount\"",
		"\"isopen\"",
		"\"bulk_rowcount\"",
		"\"bulk_exceptions\"",
		"\"error_index\"",
		"\"error_code\"",
		"\"count\"",
		"\"case\"",
		"\"then\"",
		"\"else\"",
		"\"autonomous_transaction\"",
		"\"prior\"",
		"\"goto\"",
		"\"number\"",
		"\"binary_integer\"",
		"\"natural\"",
		"\"positive\"",
		"\"char\"",
		"\"byte\"",
		"\"raw\"",
		"\"boolean\"",
		"\"date\"",
		"\"time\"",
		"\"zone\"",
		"\"year\"",
		"\"month\"",
		"\"day\"",
		"\"second\"",
		"\"smallint\"",
		"\"real\"",
		"\"numeric\"",
		"\"int\"",
		"\"integer\"",
		"\"pls_integer\"",
		"\"double\"",
		"\"precision\"",
		"\"float\"",
		"\"decimal\"",
		"\"varchar\"",
		"\"varchar2\"",
		"\"nvarchar\"",
		"\"nvarchar2\"",
		"\"character\"",
		"\"rowid\"",
		"\"blob\"",
		"\"clob\"",
		"\"nclob\"",
		"\"bfile\"",
		"\"out\"",
		"\"nocopy\"",
		"\"any_cs\"",
		"\"charset\"",
		"\"exception\"",
		"\"serially_reusable\"",
		"\"pipelined\"",
		"\"parallel_enable\"",
		"\"deterministic\"",
		"\"language\"",
		"\"java\"",
		"\"name\"",
		"\"raise\"",
		"\"save\"",
		"\"exceptions\"",
		"\"forall\"",
		"\"indices\"",
		"\"true\"",
		"\"false\"",
		"\"**\"",
		"\"at\"",
		"\"current\"",
		"\"exists\"",
		"\"select\"",
		"\"like\"",
		"\"escape\"",
		"\"between\"",
		"\"member\"",
		"\"sqlcode\"",
		"\"sqlerrm\"",
		"\"cast\"",
		"\"decode\"",
		"\"trim\"",
		"\"multiset\"",
		"\"lag\"",
		"\"lead\"",
		"\"rank\"",
		"\"dense_rank\"",
		"\"extract\"",
		"\"minute\"",
		"\"hour\"",
		"\"any\"",
		"\"nextval\"",
		"\"currval\"",
		"\"over\"",
		"\"sessiontimezone\"",
		"\"dbtimezone\"",
		"\"distinct\"",
		"\"from\"",
		"\"timezone_hour\"",
		"\"timezone_minute\"",
		"\"timezone_region\"",
		"\"timezone_abbr\"",
		"\"leading\"",
		"\"trailing\"",
		"\"both\"",
		"\"work\"",
		"\"if\"",
		"\"elsif\"",
		"\"privileges\"",
		"\"union\"",
		"\"intersect\"",
		"\"minus\"",
		"\"bulk\"",
		"\"collect\"",
		"\"into\"",
		"\"session\"",
		"\"flush\"",
		"\"shared_pool\"",
		"\"reset\"",
		"\"sid\"",
		"\"left\"",
		"\"right\"",
		"\"inner\"",
		"\"outer\"",
		"\"join\"",
		"\"full\"",
		"\"where\"",
		"\"current_timestamp\"",
		"\"rownum\"",
		"\"the\"",
		"\"having\"",
		"\"nulls\"",
		"\"first\"",
		"\"last\"",
		"\"nowait\"",
		"\"wait\"",
		"\"merge\"",
		"\"matched\"",
		"\"returning\"",
		"\"transaction\"",
		"\"close\"",
		"\"fetch\"",
		"\"mode\"",
		"\"share\"",
		"\"exclusive\"",
		"\"open\"",
		"\"savepoint\"",
		"\"oracle_loader\"",
		"\"oracle_datapump\"",
		"\"access\"",
		"\"parameters\"",
		"\"nologfile\"",
		"\"logfile\"",
		"\"version\"",
		"\"compatible\"",
		"\"latest\"",
		"\"compression\"",
		"\"enabled\"",
		"\"disabled\"",
		"\"encryption\"",
		"\"records\"",
		"\"fixed\"",
		"\"delimited\"",
		"\"newline\"",
		"\"characterset\"",
		"\"data\"",
		"\"big\"",
		"\"little\"",
		"\"endian\"",
		"\"mark\"",
		"\"nocheck\"",
		"\"string\"",
		"\"sizes\"",
		"\"bytes\"",
		"\"characters\"",
		"\"load\"",
		"\"nobadfile\"",
		"\"badfile\"",
		"\"nodiscardfile\"",
		"\"discardfile\"",
		"\"readsize\"",
		"\"data_cache\"",
		"\"skip\"",
		"\"preprocessor\"",
		"\"fields\"",
		"\"missing\"",
		"\"field\"",
		"\"are\"",
		"\"transforms\"",
		"\"concat\"",
		"\"lobfile\"",
		"\"enclosed\"",
		"\"terminated\"",
		"\"whitespace\"",
		"\"optionally\"",
		"\"lrtrim\"",
		"\"notrim\"",
		"\"ltrim\"",
		"\"rtrim\"",
		"\"ldrtrim\"",
		"\"position\"",
		"\"unsigned\"",
		"\"zoned\"",
		"\"oracle_date\"",
		"\"oracle_number\"",
		"\"counted\"",
		"\"varraw\"",
		"\"varcharc\"",
		"\"varrawc\"",
		"\"date_format\"",
		"\"timezone\"",
		"\"mask\"",
		"\"location\"",
		"\"aggregate\"",
		"\"ldtrim\""
	};
	
	private static final long[] mk_tokenSet_0() {
		long[] data = new long[15];
		data[0]=2L;
		return data;
	}
	public static final BitSet _tokenSet_0 = new BitSet(mk_tokenSet_0());
	private static final long[] mk_tokenSet_1() {
		long[] data = new long[30];
		data[0]=270651315524345346L;
		data[6]=-9279361777664L;
		data[7]=-3607664776500740225L;
		data[8]=-8796093023233L;
		data[9]=-8070468124443511813L;
		data[10]=-536944010854402L;
		data[11]=-13637809453161971L;
		data[12]=8069861189983135743L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_1 = new BitSet(mk_tokenSet_1());
	private static final long[] mk_tokenSet_2() {
		long[] data = new long[26];
		data[0]=2181038080L;
		data[6]=-9222703514980974592L;
		data[7]=272673850130433L;
		data[9]=29056L;
		for (int i = 11; i<=12; i++) { data[i]=4611686018427387904L; }
		return data;
	}
	public static final BitSet _tokenSet_2 = new BitSet(mk_tokenSet_2());
	private static final long[] mk_tokenSet_3() {
		long[] data = new long[30];
		data[0]=-14L;
		for (int i = 1; i<=13; i++) { data[i]=-1L; }
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_3 = new BitSet(mk_tokenSet_3());
	private static final long[] mk_tokenSet_4() {
		long[] data = new long[22];
		data[6]=46969310412800L;
		data[7]=4626322717216358400L;
		data[8]=1408L;
		data[9]=1048576L;
		data[10]=274877906944L;
		return data;
	}
	public static final BitSet _tokenSet_4 = new BitSet(mk_tokenSet_4());
	private static final long[] mk_tokenSet_5() {
		long[] data = new long[30];
		data[0]=22020096L;
		data[6]=-7205759678684332032L;
		data[7]=-3677119929864137615L;
		data[8]=-468542036820099073L;
		data[9]=-8251115721437342725L;
		data[10]=4607763382424567806L;
		data[11]=4073370039112671748L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_5 = new BitSet(mk_tokenSet_5());
	private static final long[] mk_tokenSet_6() {
		long[] data = new long[26];
		data[0]=2181038082L;
		data[6]=-9222703514980974592L;
		data[7]=835623803551745L;
		data[9]=29056L;
		for (int i = 11; i<=12; i++) { data[i]=4611686018427387904L; }
		return data;
	}
	public static final BitSet _tokenSet_6 = new BitSet(mk_tokenSet_6());
	private static final long[] mk_tokenSet_7() {
		long[] data = new long[30];
		data[0]=22020096L;
		data[6]=-7205803869149855744L;
		data[7]=-3681625728514780047L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4607763107546660862L;
		data[11]=4073370039112671744L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_7 = new BitSet(mk_tokenSet_7());
	private static final long[] mk_tokenSet_8() {
		long[] data = new long[30];
		data[0]=290455552L;
		data[6]=-7205803869149855744L;
		data[7]=-3609568134476852107L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4607763107546660862L;
		data[11]=4073370039112671744L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_8 = new BitSet(mk_tokenSet_8());
	private static final long[] mk_tokenSet_9() {
		long[] data = new long[22];
		data[0]=268435456L;
		data[7]=72057594037927940L;
		data[10]=3298534883328L;
		return data;
	}
	public static final BitSet _tokenSet_9 = new BitSet(mk_tokenSet_9());
	private static final long[] mk_tokenSet_10() {
		long[] data = new long[26];
		data[0]=2248146946L;
		data[6]=-9222703514980974592L;
		data[7]=835623803551745L;
		data[9]=29056L;
		for (int i = 11; i<=12; i++) { data[i]=4611686018427387904L; }
		return data;
	}
	public static final BitSet _tokenSet_10 = new BitSet(mk_tokenSet_10());
	private static final long[] mk_tokenSet_11() {
		long[] data = new long[30];
		data[0]=22020096L;
		data[6]=-7205803869149855744L;
		data[7]=-3681625728514779535L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4607763107555049470L;
		data[11]=4073370039112671744L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_11 = new BitSet(mk_tokenSet_11());
	private static final long[] mk_tokenSet_12() {
		long[] data = new long[30];
		data[0]=22020096L;
		data[6]=-7205803869133078528L;
		data[7]=-3681625728514780047L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4607763107546660862L;
		data[11]=4073370039112671744L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_12 = new BitSet(mk_tokenSet_12());
	private static final long[] mk_tokenSet_13() {
		long[] data = new long[30];
		data[0]=290455552L;
		data[6]=-7205803869133078528L;
		data[7]=-3681625728514780047L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4607763107546660862L;
		data[11]=4073370039112671744L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_13 = new BitSet(mk_tokenSet_13());
	private static final long[] mk_tokenSet_14() {
		long[] data = new long[18];
		data[7]=4620693217682128896L;
		data[8]=1408L;
		return data;
	}
	public static final BitSet _tokenSet_14 = new BitSet(mk_tokenSet_14());
	private static final long[] mk_tokenSet_15() {
		long[] data = new long[18];
		data[0]=20971520L;
		data[7]=4620693217682128896L;
		data[8]=1024L;
		return data;
	}
	public static final BitSet _tokenSet_15 = new BitSet(mk_tokenSet_15());
	private static final long[] mk_tokenSet_16() {
		long[] data = new long[18];
		data[0]=20971520L;
		data[6]=4294967296L;
		data[7]=4620693217682128896L;
		data[8]=79389865984L;
		return data;
	}
	public static final BitSet _tokenSet_16 = new BitSet(mk_tokenSet_16());
	private static final long[] mk_tokenSet_17() {
		long[] data = new long[30];
		data[0]=18014398530453504L;
		data[6]=-7359207729846550528L;
		data[7]=-4546246488225638800L;
		data[8]=-468524444634072065L;
		data[9]=-8323178263278644613L;
		data[10]=4603264335470919678L;
		data[11]=3496909303989117440L;
		data[12]=3368945976137410521L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_17 = new BitSet(mk_tokenSet_17());
	private static final long[] mk_tokenSet_18() {
		long[] data = new long[30];
		data[0]=18298100927037440L;
		data[6]=-2594117850718273536L;
		data[7]=-3681412422990064007L;
		data[8]=-324426848744244225L;
		data[9]=-8251106925211126789L;
		data[10]=9223363937133133822L;
		data[11]=8921503868227928060L;
		data[12]=7989639198114572281L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_18 = new BitSet(mk_tokenSet_18());
	private static final long[] mk_tokenSet_19() {
		long[] data = new long[30];
		data[0]=18014398530453504L;
		data[6]=-7359207729846550528L;
		data[7]=-4546316856969816464L;
		data[8]=-468542036820116481L;
		data[9]=-8323178263278644613L;
		data[10]=4603264335470919678L;
		data[11]=3496909303989117440L;
		data[12]=3368945976137410521L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_19 = new BitSet(mk_tokenSet_19());
	private static final long[] mk_tokenSet_20() {
		long[] data = new long[26];
		data[0]=36607885314L;
		data[6]=-9222703514980974592L;
		data[7]=835623803551745L;
		data[9]=29056L;
		for (int i = 11; i<=12; i++) { data[i]=4611686018427387904L; }
		return data;
	}
	public static final BitSet _tokenSet_20 = new BitSet(mk_tokenSet_20());
	private static final long[] mk_tokenSet_21() {
		long[] data = new long[22];
		data[7]=72057594037927940L;
		data[10]=3298534883328L;
		return data;
	}
	public static final BitSet _tokenSet_21 = new BitSet(mk_tokenSet_21());
	private static final long[] mk_tokenSet_22() {
		long[] data = new long[30];
		data[0]=18014398530453504L;
		data[6]=-7359207729846550528L;
		data[7]=-4546316856969816464L;
		data[8]=-468524444634072065L;
		data[9]=-8323178263278644613L;
		data[10]=4603264335470919678L;
		data[11]=3496909303989117440L;
		data[12]=3368945976137410521L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_22 = new BitSet(mk_tokenSet_22());
	private static final long[] mk_tokenSet_23() {
		long[] data = new long[30];
		data[0]=281503394299904L;
		data[6]=-2594117850722467840L;
		data[7]=-3681623529491163527L;
		data[8]=-468542036820100097L;
		data[9]=-8251106925345369093L;
		data[10]=9219986237412605950L;
		data[11]=4289551651477372916L;
		data[12]=3377953175392217081L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_23 = new BitSet(mk_tokenSet_23());
	private static final long[] mk_tokenSet_24() {
		long[] data = new long[30];
		data[0]=20971520L;
		data[6]=-7359207729846550528L;
		data[7]=-4546246488225638800L;
		data[8]=-468542036820116481L;
		data[9]=-8323178263278644613L;
		data[10]=4603264335470919678L;
		data[11]=3496909303989117440L;
		data[12]=3368945976137410521L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_24 = new BitSet(mk_tokenSet_24());
	private static final long[] mk_tokenSet_25() {
		long[] data = new long[30];
		data[0]=18016600104894464L;
		data[6]=-2594117850718273536L;
		data[7]=-3681412422990162319L;
		data[8]=-324409256558199809L;
		data[9]=-8251115721304148997L;
		data[10]=9223249587923845118L;
		data[11]=8705331086114144254L;
		data[12]=7962617600350283769L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_25 = new BitSet(mk_tokenSet_25());
	private static final long[] mk_tokenSet_26() {
		long[] data = new long[30];
		data[0]=234488785571872770L;
		data[6]=-2305843490318188544L;
		data[7]=-3608790676407329155L;
		data[8]=-324400460465177601L;
		data[9]=-8251106925210602501L;
		data[10]=9222831790685159422L;
		data[11]=8921503868227928060L;
		data[12]=7989640299786266617L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_26 = new BitSet(mk_tokenSet_26());
	private static final long[] mk_tokenSet_27() {
		long[] data = new long[30];
		data[0]=234187217252122626L;
		data[6]=-7359172545461878784L;
		data[7]=-4545539398900672911L;
		data[8]=-468524444634072065L;
		data[9]=-8323178263278619653L;
		data[10]=4603264335470919678L;
		data[11]=8108595322416505344L;
		data[12]=7980631994564798425L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_27 = new BitSet(mk_tokenSet_27());
	private static final long[] mk_tokenSet_28() {
		long[] data = new long[30];
		data[0]=281504132497408L;
		data[6]=-2594117850722467840L;
		data[7]=-3681623529491409295L;
		data[8]=-468542036820100097L;
		data[9]=-8251106925345369093L;
		data[10]=9219449675738251262L;
		data[11]=8901228856833712644L;
		data[12]=3377953175396411385L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_28 = new BitSet(mk_tokenSet_28());
	private static final long[] mk_tokenSet_29() {
		long[] data = new long[30];
		data[0]=282913687339008L;
		data[6]=-2594117850722467840L;
		data[7]=-3609565935453481351L;
		data[8]=-468542036820100097L;
		data[9]=-8251106925344844805L;
		data[10]=9219449675738251262L;
		data[11]=9189459232985424388L;
		data[12]=3377954549794334713L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_29 = new BitSet(mk_tokenSet_29());
	private static final long[] mk_tokenSet_30() {
		long[] data = new long[30];
		data[0]=234189420705611778L;
		data[6]=-2594082664727183360L;
		data[7]=-3680848270445635983L;
		data[8]=-324409256558199809L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617608940218361L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_30 = new BitSet(mk_tokenSet_30());
	private static final long[] mk_tokenSet_31() {
		long[] data = new long[30];
		data[0]=22085632L;
		data[6]=-7205803869149855744L;
		data[7]=-3681625728514780047L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4607763107546660862L;
		data[11]=4073370039112671744L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_31 = new BitSet(mk_tokenSet_31());
	private static final long[] mk_tokenSet_32() {
		long[] data = new long[30];
		data[0]=22020096L;
		data[6]=-7205803869149855744L;
		data[7]=-3681625728514780047L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4607763657302474750L;
		data[11]=4073370039112671744L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_32 = new BitSet(mk_tokenSet_32());
	private static final long[] mk_tokenSet_33() {
		long[] data = new long[30];
		data[0]=234472293434523650L;
		data[6]=-2594082664727183360L;
		data[7]=-3608790676407593351L;
		data[8]=-324409256558199809L;
		data[9]=-8251106925210602501L;
		data[10]=9222827375458779134L;
		data[11]=9209734227401613837L;
		data[12]=7989640581106624505L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_33 = new BitSet(mk_tokenSet_33());
	private static final long[] mk_tokenSet_34() {
		long[] data = new long[30];
		data[0]=234189416410644482L;
		data[6]=-2594082664727183360L;
		data[7]=-3680848270445635983L;
		data[8]=-324409256558199809L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617608940218361L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_34 = new BitSet(mk_tokenSet_34());
	private static final long[] mk_tokenSet_35() {
		long[] data = new long[30];
		data[0]=22020096L;
		data[6]=-7205803869149855744L;
		data[7]=-3681623529491523983L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4607763107555049470L;
		data[11]=4073370039112671748L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_35 = new BitSet(mk_tokenSet_35());
	private static final long[] mk_tokenSet_36() {
		long[] data = new long[30];
		data[0]=22020096L;
		data[6]=-7205803869149855744L;
		data[7]=-3609568134476852111L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4607763657302474750L;
		data[11]=4073370039112671744L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_36 = new BitSet(mk_tokenSet_36());
	private static final long[] mk_tokenSet_37() {
		long[] data = new long[30];
		data[0]=234189416410644482L;
		data[6]=-2594082664727183360L;
		data[7]=-3680848270445635983L;
		data[8]=-324409256558199809L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617608940218361L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_37 = new BitSet(mk_tokenSet_37());
	private static final long[] mk_tokenSet_38() {
		long[] data = new long[30];
		data[0]=281503058755584L;
		data[6]=-2594117850722467840L;
		data[7]=-3681623529491425671L;
		data[8]=-468542036820100097L;
		data[9]=-8251106925345369093L;
		data[10]=9219449675738251262L;
		data[11]=4289542838406324740L;
		data[12]=3377953175392217081L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_38 = new BitSet(mk_tokenSet_38());
	private static final long[] mk_tokenSet_39() {
		long[] data = new long[30];
		data[0]=234189416410644482L;
		data[6]=-2594082664727183360L;
		data[7]=-3680848270445635983L;
		data[8]=-324400460465177601L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617608940218361L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_39 = new BitSet(mk_tokenSet_39());
	private static final long[] mk_tokenSet_40() {
		long[] data = new long[30];
		data[0]=234189416419295234L;
		data[6]=-2594082664727183360L;
		data[7]=-3680848270445635983L;
		data[8]=-324409256558199809L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617608940218361L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_40 = new BitSet(mk_tokenSet_40());
	private static final long[] mk_tokenSet_41() {
		long[] data = new long[30];
		data[0]=234187217252122626L;
		data[6]=-7359172545461878784L;
		data[7]=-4545539398900672903L;
		data[8]=-468524444634072065L;
		data[9]=-8323178263278619653L;
		data[10]=4603264335470919678L;
		data[11]=8108595322416505344L;
		data[12]=7980631994564798425L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_41 = new BitSet(mk_tokenSet_41());
	private static final long[] mk_tokenSet_42() {
		long[] data = new long[26];
		data[0]=36607885314L;
		data[6]=-9222703514947420160L;
		data[7]=835623803551745L;
		data[9]=29056L;
		for (int i = 11; i<=12; i++) { data[i]=4611686018427387904L; }
		return data;
	}
	public static final BitSet _tokenSet_42 = new BitSet(mk_tokenSet_42());
	private static final long[] mk_tokenSet_43() {
		long[] data = new long[26];
		data[0]=36607885314L;
		data[6]=-9222703514846756864L;
		data[7]=835623803551745L;
		data[9]=29056L;
		for (int i = 11; i<=12; i++) { data[i]=4611686018427387904L; }
		return data;
	}
	public static final BitSet _tokenSet_43 = new BitSet(mk_tokenSet_43());
	private static final long[] mk_tokenSet_44() {
		long[] data = new long[26];
		data[0]=36876320770L;
		data[6]=-9222703514980974592L;
		data[7]=835623803551745L;
		data[9]=29056L;
		for (int i = 11; i<=12; i++) { data[i]=4611686018427387904L; }
		return data;
	}
	public static final BitSet _tokenSet_44 = new BitSet(mk_tokenSet_44());
	private static final long[] mk_tokenSet_45() {
		long[] data = new long[26];
		data[0]=36607885314L;
		data[6]=-9222703510686007296L;
		data[7]=835623803551745L;
		data[9]=29056L;
		for (int i = 11; i<=12; i++) { data[i]=4611686018427387904L; }
		return data;
	}
	public static final BitSet _tokenSet_45 = new BitSet(mk_tokenSet_45());
	private static final long[] mk_tokenSet_46() {
		long[] data = new long[30];
		data[0]=22020096L;
		data[6]=-7205803869149855744L;
		data[7]=-3681623529491524495L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4607763107546660862L;
		data[11]=4073370039112671748L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_46 = new BitSet(mk_tokenSet_46());
	private static final long[] mk_tokenSet_47() {
		long[] data = new long[26];
		data[0]=36876320770L;
		data[6]=-9222703476326268928L;
		data[7]=835623803551745L;
		data[9]=29056L;
		for (int i = 11; i<=12; i++) { data[i]=4611686018427387904L; }
		return data;
	}
	public static final BitSet _tokenSet_47 = new BitSet(mk_tokenSet_47());
	private static final long[] mk_tokenSet_48() {
		long[] data = new long[16];
		data[0]=33554432L;
		data[6]=562949953421312L;
		data[7]=272670628904960L;
		return data;
	}
	public static final BitSet _tokenSet_48 = new BitSet(mk_tokenSet_48());
	private static final long[] mk_tokenSet_49() {
		long[] data = new long[15];
		data[0]=268435456L;
		return data;
	}
	public static final BitSet _tokenSet_49 = new BitSet(mk_tokenSet_49());
	private static final long[] mk_tokenSet_50() {
		long[] data = new long[30];
		data[0]=234189696388825090L;
		data[6]=-288239655513489408L;
		data[7]=-3608790676407708041L;
		data[8]=-150083353969665L;
		data[9]=-6954078994261117957L;
		data[10]=9222827375525887998L;
		data[11]=8705331051956249101L;
		data[12]=7970780623782995961L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_50 = new BitSet(mk_tokenSet_50());
	private static final long[] mk_tokenSet_51() {
		long[] data = new long[26];
		data[0]=36607885314L;
		data[6]=-9222703514980974592L;
		data[7]=72893217841479685L;
		data[9]=29056L;
		data[10]=3298534883328L;
		for (int i = 11; i<=12; i++) { data[i]=4611686018427387904L; }
		return data;
	}
	public static final BitSet _tokenSet_51 = new BitSet(mk_tokenSet_51());
	private static final long[] mk_tokenSet_52() {
		long[] data = new long[26];
		data[0]=36607885314L;
		data[6]=-9222703510686007296L;
		data[7]=835623803551747L;
		data[9]=29056L;
		for (int i = 11; i<=12; i++) { data[i]=4611686018427387904L; }
		return data;
	}
	public static final BitSet _tokenSet_52 = new BitSet(mk_tokenSet_52());
	private static final long[] mk_tokenSet_53() {
		long[] data = new long[26];
		data[0]=36607885314L;
		data[6]=-9222703514980974592L;
		data[7]=835623803551745L;
		data[8]=143833713099145216L;
		data[9]=29056L;
		for (int i = 11; i<=12; i++) { data[i]=4611686018427387904L; }
		return data;
	}
	public static final BitSet _tokenSet_53 = new BitSet(mk_tokenSet_53());
	private static final long[] mk_tokenSet_54() {
		long[] data = new long[30];
		data[0]=234187217788993538L;
		data[6]=-4765099160096473088L;
		data[7]=-4185251428711033227L;
		data[8]=-180294068482360321L;
		data[9]=-8323178263144401925L;
		data[10]=4603264335470919678L;
		data[11]=8108595322416505344L;
		data[12]=7980631994564798425L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_54 = new BitSet(mk_tokenSet_54());
	private static final long[] mk_tokenSet_55() {
		long[] data = new long[26];
		data[0]=36607885314L;
		data[6]=-9222422040004263936L;
		data[7]=835623803551745L;
		data[9]=29056L;
		for (int i = 11; i<=12; i++) { data[i]=4611686018427387904L; }
		return data;
	}
	public static final BitSet _tokenSet_55 = new BitSet(mk_tokenSet_55());
	private static final long[] mk_tokenSet_56() {
		long[] data = new long[15];
		data[0]=536870912L;
		data[6]=2305843009213693952L;
		return data;
	}
	public static final BitSet _tokenSet_56 = new BitSet(mk_tokenSet_56());
	private static final long[] mk_tokenSet_57() {
		long[] data = new long[30];
		data[0]=270659836739460610L;
		data[6]=-9279361777664L;
		data[7]=-3607664776500756611L;
		data[8]=-149533598155777L;
		data[9]=-8251106890844572677L;
		data[10]=-540246169616386L;
		data[11]=-9134209825791475L;
		data[12]=8069861189983135743L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_57 = new BitSet(mk_tokenSet_57());
	private static final long[] mk_tokenSet_58() {
		long[] data = new long[30];
		data[0]=234189696120389634L;
		data[6]=-288239655513489408L;
		data[7]=-3680848270445635979L;
		data[8]=-324400460465177601L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=9115539354065233913L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_58 = new BitSet(mk_tokenSet_58());
	private static final long[] mk_tokenSet_59() {
		long[] data = new long[30];
		data[0]=270642244284980738L;
		data[6]=-9279361777664L;
		data[7]=-3607664776500756609L;
		data[8]=-149533581378561L;
		data[9]=-8070468125517253637L;
		data[10]=-540242545737730L;
		data[11]=-9134209825791475L;
		data[12]=8069861189983135743L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_59 = new BitSet(mk_tokenSet_59());
	private static final long[] mk_tokenSet_60() {
		long[] data = new long[30];
		data[0]=270642244284980738L;
		data[6]=-9279361777664L;
		data[7]=-3607664776500756609L;
		data[8]=-140737488356353L;
		data[9]=-8251106890844572677L;
		data[10]=-540246169616386L;
		data[11]=-13637809453161971L;
		data[12]=8069861189983135743L;
		data[13]=-563018673030769L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_60 = new BitSet(mk_tokenSet_60());
	private static final long[] mk_tokenSet_61() {
		long[] data = new long[16];
		data[6]=4899916394579099648L;
		data[7]=11016L;
		return data;
	}
	public static final BitSet _tokenSet_61 = new BitSet(mk_tokenSet_61());
	private static final long[] mk_tokenSet_62() {
		long[] data = new long[15];
		data[0]=4831838208L;
		return data;
	}
	public static final BitSet _tokenSet_62 = new BitSet(mk_tokenSet_62());
	private static final long[] mk_tokenSet_63() {
		long[] data = new long[30];
		data[0]=4853858304L;
		data[6]=-7205803869149855744L;
		data[7]=-3681625728514517391L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4607763657310863358L;
		data[11]=4073370073270566896L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_63 = new BitSet(mk_tokenSet_63());
	private static final long[] mk_tokenSet_64() {
		long[] data = new long[24];
		data[7]=262144L;
		data[9]=576460752303423488L;
		data[10]=549755813888L;
		data[11]=549688188400L;
		return data;
	}
	public static final BitSet _tokenSet_64 = new BitSet(mk_tokenSet_64());
	private static final long[] mk_tokenSet_65() {
		long[] data = new long[30];
		data[0]=270378361485794818L;
		data[6]=-9277214294016L;
		data[7]=-3607664776500756611L;
		data[8]=-149533598155777L;
		data[9]=-8251115686937594885L;
		data[10]=-540246169616386L;
		data[11]=-517935406012455411L;
		data[12]=8060853990728329215L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_65 = new BitSet(mk_tokenSet_65());
	private static final long[] mk_tokenSet_66() {
		long[] data = new long[30];
		data[0]=22020096L;
		data[6]=-7205803869149855744L;
		data[7]=-3681625728514780047L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4607763691662213118L;
		data[11]=4073370039112671744L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_66 = new BitSet(mk_tokenSet_66());
	private static final long[] mk_tokenSet_67() {
		long[] data = new long[30];
		data[0]=270378361754230274L;
		data[6]=-9277214294016L;
		data[7]=-3607664776500756611L;
		data[8]=-149533598155777L;
		data[9]=-8251115686937594885L;
		data[10]=-540246169616386L;
		data[11]=-517935406012456435L;
		data[12]=8060853990728329215L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_67 = new BitSet(mk_tokenSet_67());
	private static final long[] mk_tokenSet_68() {
		long[] data = new long[30];
		data[0]=270378361485794818L;
		data[6]=-9277214294016L;
		data[7]=-3607664776500756611L;
		data[8]=-149533598155777L;
		data[9]=-8251115686937594885L;
		data[10]=-540246169616386L;
		data[11]=-517935406012456435L;
		data[12]=8060853990728329215L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_68 = new BitSet(mk_tokenSet_68());
	private static final long[] mk_tokenSet_69() {
		long[] data = new long[30];
		data[0]=234189421242482690L;
		data[6]=-2305852288575471616L;
		data[7]=-3680848270445625479L;
		data[8]=-324409256558199809L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617608940218361L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_69 = new BitSet(mk_tokenSet_69());
	private static final long[] mk_tokenSet_70() {
		long[] data = new long[30];
		data[0]=234189421242482690L;
		data[6]=-2305852288575471616L;
		data[7]=-3680848270445609095L;
		data[8]=-324409256558199809L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617608940218361L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_70 = new BitSet(mk_tokenSet_70());
	private static final long[] mk_tokenSet_71() {
		long[] data = new long[30];
		data[0]=234189420705611778L;
		data[6]=-288239655513489408L;
		data[7]=-3680848270445635983L;
		data[8]=-324409256558199809L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617608940218361L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_71 = new BitSet(mk_tokenSet_71());
	private static final long[] mk_tokenSet_72() {
		long[] data = new long[26];
		data[0]=2248146946L;
		data[6]=-9078588326905118720L;
		data[7]=4684579236268867633L;
		data[8]=13510937059524608L;
		data[9]=288168322464248192L;
		data[10]=4L;
		for (int i = 11; i<=12; i++) { data[i]=4611686018427387904L; }
		return data;
	}
	public static final BitSet _tokenSet_72 = new BitSet(mk_tokenSet_72());
	private static final long[] mk_tokenSet_73() {
		long[] data = new long[30];
		data[0]=234189416410644482L;
		data[6]=-2594082664727183360L;
		data[7]=-3680848270445609351L;
		data[8]=-324409256558199809L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617608940218361L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_73 = new BitSet(mk_tokenSet_73());
	private static final long[] mk_tokenSet_74() {
		long[] data = new long[30];
		data[0]=270218218261446658L;
		data[6]=-9279361777664L;
		data[7]=-3608790676407697543L;
		data[8]=-150083353969665L;
		data[9]=-8251115721303624709L;
		data[10]=-544661395996674L;
		data[11]=8705331051956249101L;
		data[12]=7970780623791384569L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_74 = new BitSet(mk_tokenSet_74());
	private static final long[] mk_tokenSet_75() {
		long[] data = new long[30];
		data[0]=281511615135746L;
		data[6]=-7205768683154571264L;
		data[7]=-3680848270445636493L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438366725L;
		data[10]=4607763107546660862L;
		data[11]=8685056057540059648L;
		data[12]=7962617596055316473L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_75 = new BitSet(mk_tokenSet_75());
	private static final long[] mk_tokenSet_76() {
		long[] data = new long[30];
		data[0]=281477288951808L;
		data[6]=-2594117850722467840L;
		data[7]=-3681623529491425679L;
		data[8]=-468542036820100097L;
		data[9]=-8251106925345369093L;
		data[10]=9219449675738251262L;
		data[11]=4289542838406324740L;
		data[12]=3377953175392217081L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_76 = new BitSet(mk_tokenSet_76());
	private static final long[] mk_tokenSet_77() {
		long[] data = new long[30];
		data[0]=281812665761794L;
		data[6]=-2594082664727183360L;
		data[7]=-3680848270445537671L;
		data[8]=-468542036820100097L;
		data[9]=-8251106925344820229L;
		data[10]=9219449675738251262L;
		data[11]=8901228856833712644L;
		data[12]=7989639193819604985L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_77 = new BitSet(mk_tokenSet_77());
	private static final long[] mk_tokenSet_78() {
		long[] data = new long[30];
		data[0]=36629905410L;
		data[6]=-7205768683154571264L;
		data[7]=-3680848270445636495L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438366725L;
		data[10]=4607763107546660862L;
		data[11]=8685056057540059648L;
		data[12]=7962617596055316473L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_78 = new BitSet(mk_tokenSet_78());
	private static final long[] mk_tokenSet_79() {
		long[] data = new long[30];
		data[0]=281503058755584L;
		data[6]=-2594117850722467840L;
		data[7]=-3681623529491425679L;
		data[8]=-468542036820100097L;
		data[9]=-8251106925345369093L;
		data[10]=9219449675738251262L;
		data[11]=4289542838406324740L;
		data[12]=3377953175392217081L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_79 = new BitSet(mk_tokenSet_79());
	private static final long[] mk_tokenSet_80() {
		long[] data = new long[30];
		data[0]=270695364708933122L;
		data[6]=-9277214294016L;
		data[7]=-3607664776500494465L;
		data[8]=-140737505133569L;
		data[9]=-6917546620910340101L;
		data[10]=-540246102507522L;
		data[11]=-9026990464057347L;
		data[12]=9222782694589982719L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_80 = new BitSet(mk_tokenSet_80());
	private static final long[] mk_tokenSet_81() {
		long[] data = new long[30];
		data[0]=270642244284980738L;
		data[6]=-9279361777664L;
		data[7]=-3607664776500756611L;
		data[8]=-149533598155777L;
		data[9]=-8251106890844572677L;
		data[10]=-540246169616386L;
		data[11]=-13637809453161971L;
		data[12]=8069861189983135743L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_81 = new BitSet(mk_tokenSet_81());
	private static final long[] mk_tokenSet_82() {
		long[] data = new long[30];
		data[0]=281507353722880L;
		data[6]=-2594117850722467840L;
		data[7]=-3681623529491425671L;
		data[8]=-468542036820100097L;
		data[9]=-8251106925345369093L;
		data[10]=9219449675738251262L;
		data[11]=4289542838406324740L;
		data[12]=3377953175392217081L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_82 = new BitSet(mk_tokenSet_82());
	private static final long[] mk_tokenSet_83() {
		long[] data = new long[30];
		data[0]=281503058755584L;
		data[6]=-2594117850722467840L;
		data[7]=-3681623529491425671L;
		data[8]=-468542036820100097L;
		data[9]=-8251106925345369093L;
		data[10]=9219449675738251262L;
		data[11]=4289542838406324740L;
		data[12]=3377953177271265273L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_83 = new BitSet(mk_tokenSet_83());
	private static final long[] mk_tokenSet_84() {
		long[] data = new long[30];
		data[0]=281504132497408L;
		data[6]=-2594117850722467840L;
		data[7]=-3681623529491425679L;
		data[8]=-468542036820100097L;
		data[9]=-8251106925345369093L;
		data[10]=9219449675738251262L;
		data[11]=4289542838406324740L;
		data[12]=3377953175396411385L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_84 = new BitSet(mk_tokenSet_84());
	private static final long[] mk_tokenSet_85() {
		long[] data = new long[26];
		data[11]=491520L;
		data[12]=251707392L;
		return data;
	}
	public static final BitSet _tokenSet_85 = new BitSet(mk_tokenSet_85());
	private static final long[] mk_tokenSet_86() {
		long[] data = new long[26];
		data[0]=8650752L;
		data[11]=491520L;
		data[12]=49152L;
		return data;
	}
	public static final BitSet _tokenSet_86 = new BitSet(mk_tokenSet_86());
	private static final long[] mk_tokenSet_87() {
		long[] data = new long[30];
		data[0]=270642244285242882L;
		data[6]=-9279361777664L;
		data[7]=-3607664776500756611L;
		data[8]=-149533598155777L;
		data[9]=-8251106890844572677L;
		data[10]=-540246169616386L;
		data[11]=-13637809453161971L;
		data[12]=8069861189983135743L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_87 = new BitSet(mk_tokenSet_87());
	private static final long[] mk_tokenSet_88() {
		long[] data = new long[30];
		data[0]=423792372751872L;
		data[6]=-2594117850722467840L;
		data[7]=-3680497629584583043L;
		data[8]=-468541487064286209L;
		data[9]=-8251106890985104389L;
		data[10]=9219449675738251262L;
		data[11]=-33912803869351420L;
		data[12]=3377953175392217087L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_88 = new BitSet(mk_tokenSet_88());
	private static final long[] mk_tokenSet_89() {
		long[] data = new long[30];
		data[0]=22020096L;
		data[6]=-7205803869149855744L;
		data[7]=-3681625728514681743L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4607763657302474750L;
		data[11]=4073370056292540928L;
		data[12]=3377953175392151545L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_89 = new BitSet(mk_tokenSet_89());
	private static final long[] mk_tokenSet_90() {
		long[] data = new long[30];
		data[0]=270642244553416194L;
		data[6]=-9279361777664L;
		data[7]=-3607664776500756611L;
		data[8]=-149533598155777L;
		data[9]=-8251106890844572677L;
		data[10]=-540246169616386L;
		data[11]=-13637809453161971L;
		data[12]=8069861189983135743L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_90 = new BitSet(mk_tokenSet_90());
	private static final long[] mk_tokenSet_91() {
		long[] data = new long[30];
		data[0]=8611954688L;
		data[6]=-7205803869149855744L;
		data[7]=-3681625728514780047L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4607763657302474750L;
		data[11]=4073370039112671744L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_91 = new BitSet(mk_tokenSet_91());
	private static final long[] mk_tokenSet_92() {
		long[] data = new long[30];
		data[0]=156237824L;
		data[6]=-7205803869149855744L;
		data[7]=-3681623529491523983L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4607763657310863358L;
		data[11]=4073370039112671748L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_92 = new BitSet(mk_tokenSet_92());
	private static final long[] mk_tokenSet_93() {
		long[] data = new long[30];
		data[0]=270378361485794818L;
		data[6]=-9277214294016L;
		data[7]=-3607664776500756611L;
		data[8]=-149533598155777L;
		data[9]=-8251115686937594885L;
		data[10]=-540246169616386L;
		data[11]=-517935406012456179L;
		data[12]=8060853990728329215L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_93 = new BitSet(mk_tokenSet_93());
	private static final long[] mk_tokenSet_94() {
		long[] data = new long[30];
		data[0]=17594623983616L;
		data[6]=-7205803869149855744L;
		data[7]=-3681625728514780047L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4607763107546660862L;
		data[11]=4073370039112671744L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_94 = new BitSet(mk_tokenSet_94());
	private static final long[] mk_tokenSet_95() {
		long[] data = new long[30];
		data[0]=299099808202752L;
		data[6]=-2594117850722467840L;
		data[7]=-3681623529491425671L;
		data[8]=-468542036820100097L;
		data[9]=-8251106925345369093L;
		data[10]=9219449675738251262L;
		data[11]=4289542838406324740L;
		data[12]=3377953175392217081L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_95 = new BitSet(mk_tokenSet_95());
	private static final long[] mk_tokenSet_96() {
		long[] data = new long[30];
		data[0]=270642519431585282L;
		data[6]=-9279361777664L;
		data[7]=-3607664776500756611L;
		data[8]=-149533598155777L;
		data[9]=-8251106890844572677L;
		data[10]=-540246169616386L;
		data[11]=-13637809453161971L;
		data[12]=8069861189983135743L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_96 = new BitSet(mk_tokenSet_96());
	private static final long[] mk_tokenSet_97() {
		long[] data = new long[30];
		data[0]=270360769299750402L;
		data[6]=-9279361777664L;
		data[7]=-3607664776500756611L;
		data[8]=-149533598155777L;
		data[9]=-8251115686937594885L;
		data[10]=-540246169616386L;
		data[11]=-518040967718657523L;
		data[12]=8060853990728329215L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_97 = new BitSet(mk_tokenSet_97());
	private static final long[] mk_tokenSet_98() {
		long[] data = new long[30];
		data[0]=-8208L;
		for (int i = 1; i<=13; i++) { data[i]=-1L; }
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_98 = new BitSet(mk_tokenSet_98());
	private static final long[] mk_tokenSet_99() {
		long[] data = new long[30];
		data[0]=290455552L;
		data[6]=-7205803869149855744L;
		data[7]=-3681342054514813839L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4607763107546660862L;
		data[11]=4073370039112671748L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_99 = new BitSet(mk_tokenSet_99());
	private static final long[] mk_tokenSet_100() {
		long[] data = new long[26];
		data[0]=105327362050L;
		data[6]=-9222703514980974592L;
		data[7]=835623803551745L;
		data[9]=29056L;
		for (int i = 11; i<=12; i++) { data[i]=4611686018427387904L; }
		return data;
	}
	public static final BitSet _tokenSet_100 = new BitSet(mk_tokenSet_100());
	private static final long[] mk_tokenSet_101() {
		long[] data = new long[30];
		data[0]=20971520L;
		data[6]=-7359207729846550528L;
		data[7]=-4546316856969816464L;
		data[8]=-468542036820116481L;
		data[9]=-8323178263278644613L;
		data[10]=4603264335470919678L;
		data[11]=3496909303989117440L;
		data[12]=3368945976137410521L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_101 = new BitSet(mk_tokenSet_101());
	private static final long[] mk_tokenSet_102() {
		long[] data = new long[30];
		data[0]=22020096L;
		data[6]=-7205803869149855744L;
		data[7]=-3681625728514779535L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4607763657310863358L;
		data[11]=4073370039112671744L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_102 = new BitSet(mk_tokenSet_102());
	private static final long[] mk_tokenSet_103() {
		long[] data = new long[30];
		data[0]=18145117995008L;
		data[6]=-288274841504579584L;
		data[7]=-3681412422990424463L;
		data[8]=-324426848744244225L;
		data[9]=-8251115721304148997L;
		data[10]=9222827375458779134L;
		data[11]=8709825855490597388L;
		data[12]=7962618974748207097L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_103 = new BitSet(mk_tokenSet_103());
	private static final long[] mk_tokenSet_104() {
		long[] data = new long[30];
		data[0]=234488476300673024L;
		data[6]=-2594073866478288896L;
		data[7]=-3681412422990307719L;
		data[8]=-324400460465177601L;
		data[9]=-8251106890850864133L;
		data[10]=9222831790685159422L;
		data[11]=8930511600260456973L;
		data[12]=7989640308376201209L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_104 = new BitSet(mk_tokenSet_104());
	private static final long[] mk_tokenSet_105() {
		long[] data = new long[30];
		data[0]=18144849559552L;
		data[6]=-288274841504579584L;
		data[7]=-3681412422990424463L;
		data[8]=-324426848744244225L;
		data[9]=-8251115721304148997L;
		data[10]=9222827375458779134L;
		data[11]=8709825855490597388L;
		data[12]=7962618974748207097L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_105 = new BitSet(mk_tokenSet_105());
	private static final long[] mk_tokenSet_106() {
		long[] data = new long[30];
		data[0]=234189416679079938L;
		data[6]=-2594082664727183360L;
		data[7]=-3680848270445635983L;
		data[8]=-324409256558199809L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617608940218361L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_106 = new BitSet(mk_tokenSet_106());
	private static final long[] mk_tokenSet_107() {
		long[] data = new long[30];
		data[0]=234189490230394882L;
		data[6]=-2594082664727183360L;
		data[7]=-3680848270445635983L;
		data[8]=-324409256558199809L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617608940218361L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_107 = new BitSet(mk_tokenSet_107());
	private static final long[] mk_tokenSet_108() {
		long[] data = new long[22];
		data[0]=2147483648L;
		data[6]=144115188075855872L;
		data[7]=4683743612465315888L;
		data[8]=13510937059524608L;
		data[9]=288168322464219136L;
		data[10]=4L;
		return data;
	}
	public static final BitSet _tokenSet_108 = new BitSet(mk_tokenSet_108());
	private static final long[] mk_tokenSet_109() {
		long[] data = new long[22];
		data[7]=25344L;
		data[10]=8388608L;
		return data;
	}
	public static final BitSet _tokenSet_109 = new BitSet(mk_tokenSet_109());
	private static final long[] mk_tokenSet_110() {
		long[] data = new long[22];
		data[6]=144115188075855872L;
		data[7]=4611686018427387952L;
		data[8]=13510937059524608L;
		data[9]=288168322464219136L;
		data[10]=4L;
		return data;
	}
	public static final BitSet _tokenSet_110 = new BitSet(mk_tokenSet_110());
	private static final long[] mk_tokenSet_111() {
		long[] data = new long[26];
		data[0]=2516582402L;
		data[6]=-9222703514980974592L;
		data[7]=72893217841479681L;
		data[9]=29056L;
		for (int i = 11; i<=12; i++) { data[i]=4611686018427387904L; }
		return data;
	}
	public static final BitSet _tokenSet_111 = new BitSet(mk_tokenSet_111());
	private static final long[] mk_tokenSet_112() {
		long[] data = new long[26];
		data[0]=2248146946L;
		data[6]=-9222703514980974592L;
		data[7]=835623803551745L;
		data[8]=143833713099145216L;
		data[9]=29056L;
		for (int i = 11; i<=12; i++) { data[i]=4611686018427387904L; }
		return data;
	}
	public static final BitSet _tokenSet_112 = new BitSet(mk_tokenSet_112());
	private static final long[] mk_tokenSet_113() {
		long[] data = new long[18];
		data[7]=2199023255552L;
		data[8]=143833713099145216L;
		return data;
	}
	public static final BitSet _tokenSet_113 = new BitSet(mk_tokenSet_113());
	private static final long[] mk_tokenSet_114() {
		long[] data = new long[26];
		data[0]=281477224857602L;
		data[6]=-9222422040004263936L;
		data[7]=577296376106975233L;
		data[8]=143833713099145216L;
		data[9]=29056L;
		for (int i = 11; i<=12; i++) { data[i]=4611686018427387904L; }
		return data;
	}
	public static final BitSet _tokenSet_114 = new BitSet(mk_tokenSet_114());
	private static final long[] mk_tokenSet_115() {
		long[] data = new long[18];
		data[6]=4294967296L;
		data[7]=9007199254740992L;
		data[8]=79389865984L;
		return data;
	}
	public static final BitSet _tokenSet_115 = new BitSet(mk_tokenSet_115());
	private static final long[] mk_tokenSet_116() {
		long[] data = new long[18];
		data[6]=288230376151711744L;
		data[7]=-9214364837600034816L;
		data[8]=22L;
		return data;
	}
	public static final BitSet _tokenSet_116 = new BitSet(mk_tokenSet_116());
	private static final long[] mk_tokenSet_117() {
		long[] data = new long[16];
		data[7]=90071992547409924L;
		return data;
	}
	public static final BitSet _tokenSet_117 = new BitSet(mk_tokenSet_117());
	private static final long[] mk_tokenSet_118() {
		long[] data = new long[26];
		data[0]=2248146946L;
		data[6]=-8934473138829262848L;
		data[7]=-9213529213796483071L;
		data[8]=22L;
		data[9]=29056L;
		for (int i = 11; i<=12; i++) { data[i]=4611686018427387904L; }
		return data;
	}
	public static final BitSet _tokenSet_118 = new BitSet(mk_tokenSet_118());
	private static final long[] mk_tokenSet_119() {
		long[] data = new long[30];
		data[0]=234189421242482690L;
		data[6]=-2305852288575471616L;
		data[7]=-3608790676407708047L;
		data[8]=-324268519053067265L;
		data[9]=-8070476955976305669L;
		data[10]=9222827379082657790L;
		data[11]=8705331051956249101L;
		data[12]=7962617608940218361L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_119 = new BitSet(mk_tokenSet_119());
	private static final long[] mk_tokenSet_120() {
		long[] data = new long[30];
		data[0]=234189416947515394L;
		data[6]=-2594082664727183360L;
		data[7]=-3680848270445635983L;
		data[8]=-324409256541422593L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617608940218361L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_120 = new BitSet(mk_tokenSet_120());
	private static final long[] mk_tokenSet_121() {
		long[] data = new long[30];
		data[0]=234189416947515394L;
		data[6]=-2594082664727183360L;
		data[7]=-3680848270445635983L;
		data[8]=-324409256558199809L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617608940218361L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_121 = new BitSet(mk_tokenSet_121());
	private static final long[] mk_tokenSet_122() {
		long[] data = new long[26];
		data[0]=2248146946L;
		data[6]=-9222703514980974592L;
		data[7]=835623803551745L;
		data[8]=2164736L;
		data[9]=29056L;
		for (int i = 11; i<=12; i++) { data[i]=4611686018427387904L; }
		return data;
	}
	public static final BitSet _tokenSet_122 = new BitSet(mk_tokenSet_122());
	private static final long[] mk_tokenSet_123() {
		long[] data = new long[26];
		data[0]=2248146946L;
		data[6]=-9222703510686007296L;
		data[7]=9842823058292737L;
		data[8]=79389865984L;
		data[9]=29056L;
		for (int i = 11; i<=12; i++) { data[i]=4611686018427387904L; }
		return data;
	}
	public static final BitSet _tokenSet_123 = new BitSet(mk_tokenSet_123());
	private static final long[] mk_tokenSet_124() {
		long[] data = new long[26];
		data[0]=2248146946L;
		data[6]=-9222703510686007296L;
		data[7]=9842823058292737L;
		data[8]=79391963136L;
		data[9]=29056L;
		for (int i = 11; i<=12; i++) { data[i]=4611686018427387904L; }
		return data;
	}
	public static final BitSet _tokenSet_124 = new BitSet(mk_tokenSet_124());
	private static final long[] mk_tokenSet_125() {
		long[] data = new long[18];
		data[8]=6597069769216L;
		return data;
	}
	public static final BitSet _tokenSet_125 = new BitSet(mk_tokenSet_125());
	private static final long[] mk_tokenSet_126() {
		long[] data = new long[18];
		data[8]=1610615296L;
		return data;
	}
	public static final BitSet _tokenSet_126 = new BitSet(mk_tokenSet_126());
	private static final long[] mk_tokenSet_127() {
		long[] data = new long[18];
		data[8]=144115188075855872L;
		return data;
	}
	public static final BitSet _tokenSet_127 = new BitSet(mk_tokenSet_127());
	private static final long[] mk_tokenSet_128() {
		long[] data = new long[20];
		data[7]=48L;
		data[8]=1729382256910270464L;
		data[9]=1024L;
		return data;
	}
	public static final BitSet _tokenSet_128 = new BitSet(mk_tokenSet_128());
	private static final long[] mk_tokenSet_129() {
		long[] data = new long[20];
		data[7]=211106232532992L;
		data[8]=144115188075855872L;
		data[9]=589824L;
		return data;
	}
	public static final BitSet _tokenSet_129 = new BitSet(mk_tokenSet_129());
	private static final long[] mk_tokenSet_130() {
		long[] data = new long[16];
		data[7]=211106232532992L;
		return data;
	}
	public static final BitSet _tokenSet_130 = new BitSet(mk_tokenSet_130());
	private static final long[] mk_tokenSet_131() {
		long[] data = new long[16];
		data[7]=1125899906842626L;
		return data;
	}
	public static final BitSet _tokenSet_131 = new BitSet(mk_tokenSet_131());
	private static final long[] mk_tokenSet_132() {
		long[] data = new long[30];
		data[0]=234189421242482690L;
		data[6]=-288239655513489408L;
		data[7]=-3680848270445619341L;
		data[8]=-324409256558199809L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617608940218361L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_132 = new BitSet(mk_tokenSet_132());
	private static final long[] mk_tokenSet_133() {
		long[] data = new long[15];
		data[0]=4294967296L;
		return data;
	}
	public static final BitSet _tokenSet_133 = new BitSet(mk_tokenSet_133());
	private static final long[] mk_tokenSet_134() {
		long[] data = new long[22];
		data[0]=2147483648L;
		data[6]=144115188075855872L;
		data[7]=4683743612465315890L;
		data[8]=13510937059524608L;
		data[9]=288168322464219136L;
		data[10]=4L;
		return data;
	}
	public static final BitSet _tokenSet_134 = new BitSet(mk_tokenSet_134());
	private static final long[] mk_tokenSet_135() {
		long[] data = new long[26];
		data[0]=2248146946L;
		data[6]=-9078588326905118720L;
		data[7]=4612521642230939697L;
		data[8]=13510937059524608L;
		data[9]=288168323537990016L;
		data[10]=4L;
		for (int i = 11; i<=12; i++) { data[i]=4611686018427387904L; }
		return data;
	}
	public static final BitSet _tokenSet_135 = new BitSet(mk_tokenSet_135());
	private static final long[] mk_tokenSet_136() {
		long[] data = new long[20];
		data[6]=144115188075855872L;
		data[7]=4611686018427387952L;
		data[8]=13510798884208640L;
		data[9]=27917287424L;
		return data;
	}
	public static final BitSet _tokenSet_136 = new BitSet(mk_tokenSet_136());
	private static final long[] mk_tokenSet_137() {
		long[] data = new long[26];
		data[0]=2248146946L;
		data[6]=-9078588326905118720L;
		data[7]=4612521642230939697L;
		data[8]=13510937059524608L;
		data[9]=288168322464248192L;
		data[10]=4L;
		for (int i = 11; i<=12; i++) { data[i]=4611686018427387904L; }
		return data;
	}
	public static final BitSet _tokenSet_137 = new BitSet(mk_tokenSet_137());
	private static final long[] mk_tokenSet_138() {
		long[] data = new long[30];
		data[0]=234189420705611778L;
		data[6]=-288239655513489408L;
		data[7]=-3680848270445635983L;
		data[8]=-324409256558199809L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617608940218361L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_138 = new BitSet(mk_tokenSet_138());
	private static final long[] mk_tokenSet_139() {
		long[] data = new long[26];
		data[0]=2248146946L;
		data[6]=-9078588326905118720L;
		data[7]=4684579236268867633L;
		data[8]=13510937059524608L;
		data[9]=288168322464248192L;
		data[10]=132L;
		for (int i = 11; i<=12; i++) { data[i]=4611686018427387904L; }
		return data;
	}
	public static final BitSet _tokenSet_139 = new BitSet(mk_tokenSet_139());
	private static final long[] mk_tokenSet_140() {
		long[] data = new long[20];
		data[0]=4294967296L;
		data[6]=144115188075855872L;
		data[7]=4611686018427387952L;
		data[8]=13510798884208640L;
		data[9]=27917287424L;
		return data;
	}
	public static final BitSet _tokenSet_140 = new BitSet(mk_tokenSet_140());
	private static final long[] mk_tokenSet_141() {
		long[] data = new long[22];
		data[8]=4096L;
		data[10]=7568896L;
		return data;
	}
	public static final BitSet _tokenSet_141 = new BitSet(mk_tokenSet_141());
	private static final long[] mk_tokenSet_142() {
		long[] data = new long[30];
		data[0]=234189421242482690L;
		data[6]=-2594082664727183360L;
		data[7]=-3608790676407708047L;
		data[8]=-324409256558199809L;
		data[9]=-8070476955976305669L;
		data[10]=9222827379082657790L;
		data[11]=8705331051956249101L;
		data[12]=7962617608940218361L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_142 = new BitSet(mk_tokenSet_142());
	private static final long[] mk_tokenSet_143() {
		long[] data = new long[22];
		data[6]=144115188075855872L;
		data[7]=4611686018427387904L;
		data[8]=738197504L;
		data[9]=4440927464587264L;
		data[10]=4L;
		return data;
	}
	public static final BitSet _tokenSet_143 = new BitSet(mk_tokenSet_143());
	private static final long[] mk_tokenSet_144() {
		long[] data = new long[26];
		data[0]=7079985154L;
		data[6]=-9078588326905118720L;
		data[7]=4684579236268867633L;
		data[8]=13510937059524608L;
		data[9]=288168322464248192L;
		data[10]=4L;
		for (int i = 11; i<=12; i++) { data[i]=4611686018427387904L; }
		return data;
	}
	public static final BitSet _tokenSet_144 = new BitSet(mk_tokenSet_144());
	private static final long[] mk_tokenSet_145() {
		long[] data = new long[22];
		data[8]=13510798882111488L;
		data[9]=67553994410557440L;
		data[10]=128L;
		return data;
	}
	public static final BitSet _tokenSet_145 = new BitSet(mk_tokenSet_145());
	private static final long[] mk_tokenSet_146() {
		long[] data = new long[26];
		data[0]=281477224857602L;
		data[6]=-9078588326905118720L;
		data[7]=4684579236268867633L;
		data[8]=13510937059524608L;
		data[9]=288168322464248192L;
		data[10]=388L;
		for (int i = 11; i<=12; i++) { data[i]=4611686018427387904L; }
		return data;
	}
	public static final BitSet _tokenSet_146 = new BitSet(mk_tokenSet_146());
	private static final long[] mk_tokenSet_147() {
		long[] data = new long[22];
		data[6]=34359738368L;
		data[7]=17152L;
		data[10]=2L;
		return data;
	}
	public static final BitSet _tokenSet_147 = new BitSet(mk_tokenSet_147());
	private static final long[] mk_tokenSet_148() {
		long[] data = new long[30];
		data[0]=234189421242482690L;
		data[6]=-2594082664727183360L;
		data[7]=-3608790676407708047L;
		data[8]=-324409256558199809L;
		data[9]=-8070476955976305669L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617608940218361L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_148 = new BitSet(mk_tokenSet_148());
	private static final long[] mk_tokenSet_149() {
		long[] data = new long[20];
		data[6]=144115188075855872L;
		data[9]=4362862139015168L;
		return data;
	}
	public static final BitSet _tokenSet_149 = new BitSet(mk_tokenSet_149());
	private static final long[] mk_tokenSet_150() {
		long[] data = new long[26];
		data[0]=2269118466L;
		data[6]=-9078588326905118720L;
		data[7]=4684579236268867633L;
		data[8]=13510937059528704L;
		data[9]=288168322464248192L;
		data[10]=7568900L;
		for (int i = 11; i<=12; i++) { data[i]=4611686018427387904L; }
		return data;
	}
	public static final BitSet _tokenSet_150 = new BitSet(mk_tokenSet_150());
	private static final long[] mk_tokenSet_151() {
		long[] data = new long[30];
		data[0]=4853858304L;
		data[6]=-7205803869149855744L;
		data[7]=-3681625728514780047L;
		data[8]=-468542036820100097L;
		data[9]=-8251045352694213637L;
		data[10]=4607763107546660862L;
		data[11]=4073370039112671744L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_151 = new BitSet(mk_tokenSet_151());
	private static final long[] mk_tokenSet_152() {
		long[] data = new long[30];
		data[0]=4853858304L;
		data[6]=-7205803869149855744L;
		data[7]=-3681625728514780047L;
		data[8]=-468542036820100097L;
		data[9]=-8250620941205892101L;
		data[10]=4607763107546660862L;
		data[11]=4073370039112671744L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_152 = new BitSet(mk_tokenSet_152());
	private static final long[] mk_tokenSet_153() {
		long[] data = new long[20];
		data[6]=144115188075855872L;
		data[7]=4611686018427387904L;
		data[8]=738197504L;
		data[9]=76498521502515200L;
		return data;
	}
	public static final BitSet _tokenSet_153 = new BitSet(mk_tokenSet_153());
	private static final long[] mk_tokenSet_154() {
		long[] data = new long[20];
		data[0]=4831838208L;
		data[6]=144115188075855872L;
		data[7]=4611686018427387904L;
		data[8]=738197504L;
		data[9]=1229420026109362176L;
		return data;
	}
	public static final BitSet _tokenSet_154 = new BitSet(mk_tokenSet_154());
	private static final long[] mk_tokenSet_155() {
		long[] data = new long[20];
		data[0]=4831838208L;
		data[6]=144115188075855872L;
		data[7]=4611686018427387904L;
		data[8]=738197504L;
		data[9]=76498521502515200L;
		return data;
	}
	public static final BitSet _tokenSet_155 = new BitSet(mk_tokenSet_155());
	private static final long[] mk_tokenSet_156() {
		long[] data = new long[30];
		data[0]=234470896219193346L;
		data[6]=-2594082664727183360L;
		data[7]=-3608790676407708047L;
		data[8]=-324409256558199809L;
		data[9]=-8070476955976305669L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617608940218361L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_156 = new BitSet(mk_tokenSet_156());
	private static final long[] mk_tokenSet_157() {
		long[] data = new long[20];
		data[0]=4831838208L;
		data[7]=4611686018427387904L;
		data[9]=72132360828616704L;
		return data;
	}
	public static final BitSet _tokenSet_157 = new BitSet(mk_tokenSet_157());
	private static final long[] mk_tokenSet_158() {
		long[] data = new long[20];
		data[7]=4611686018427387904L;
		data[9]=72132360828616704L;
		return data;
	}
	public static final BitSet _tokenSet_158 = new BitSet(mk_tokenSet_158());
	private static final long[] mk_tokenSet_159() {
		long[] data = new long[22];
		data[0]=4294967296L;
		data[8]=4096L;
		data[10]=7568896L;
		return data;
	}
	public static final BitSet _tokenSet_159 = new BitSet(mk_tokenSet_159());
	private static final long[] mk_tokenSet_160() {
		long[] data = new long[30];
		data[0]=234189421510918146L;
		data[6]=-2594082664727183360L;
		data[7]=-3680848270445635983L;
		data[8]=-324409256558199809L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617608940218361L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_160 = new BitSet(mk_tokenSet_160());
	private static final long[] mk_tokenSet_161() {
		long[] data = new long[30];
		data[0]=234189421242482690L;
		data[6]=-2594082664727183360L;
		data[7]=-3680848270445635983L;
		data[8]=-324409256558199809L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617608940218361L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_161 = new BitSet(mk_tokenSet_161());
	private static final long[] mk_tokenSet_162() {
		long[] data = new long[22];
		data[6]=144115188075855872L;
		data[7]=4616189618054758400L;
		data[8]=738459648L;
		data[9]=17875860044382208L;
		data[10]=4160749568L;
		return data;
	}
	public static final BitSet _tokenSet_162 = new BitSet(mk_tokenSet_162());
	private static final long[] mk_tokenSet_163() {
		long[] data = new long[30];
		data[0]=234470896219193346L;
		data[6]=-2305852288575471616L;
		data[7]=-3680848270445635983L;
		data[8]=-324409256558199809L;
		data[9]=-8106576121739447301L;
		data[10]=9222827379082657790L;
		data[11]=8705331051956249101L;
		data[12]=7962617608940218361L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_163 = new BitSet(mk_tokenSet_163());
	private static final long[] mk_tokenSet_164() {
		long[] data = new long[30];
		data[0]=234189416410644482L;
		data[6]=-2594082664727183360L;
		data[7]=-3680848270445635983L;
		data[8]=-324409256558199809L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375525887998L;
		data[11]=8705331051956249101L;
		data[12]=7962617608940218361L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_164 = new BitSet(mk_tokenSet_164());
	private static final long[] mk_tokenSet_165() {
		long[] data = new long[22];
		data[6]=8388608L;
		data[8]=6597069766656L;
		data[10]=67108864L;
		return data;
	}
	public static final BitSet _tokenSet_165 = new BitSet(mk_tokenSet_165());
	private static final long[] mk_tokenSet_166() {
		long[] data = new long[30];
		data[0]=2169503744L;
		data[6]=-2594117850722467840L;
		data[7]=-3681625728514754695L;
		data[8]=-468533240727077889L;
		data[9]=-8251115721438391301L;
		data[10]=4607763657310863358L;
		data[11]=4073370039112671744L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_166 = new BitSet(mk_tokenSet_166());
	private static final long[] mk_tokenSet_167() {
		long[] data = new long[30];
		data[0]=234470917165678594L;
		data[6]=-288239655513489408L;
		data[7]=-3680848270445250695L;
		data[8]=-324409256558199809L;
		data[9]=-8251106925210602501L;
		data[10]=9222827375458779134L;
		data[11]=8921503868227928061L;
		data[12]=7989639206704506873L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_167 = new BitSet(mk_tokenSet_167());
	private static final long[] mk_tokenSet_168() {
		long[] data = new long[30];
		data[0]=22020096L;
		data[6]=-2594117850722467840L;
		data[7]=-3681625728514754695L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4607763657310863358L;
		data[11]=4073370039112671744L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_168 = new BitSet(mk_tokenSet_168());
	private static final long[] mk_tokenSet_169() {
		long[] data = new long[22];
		data[6]=4611686018427387904L;
		data[7]=25352L;
		data[10]=8388608L;
		return data;
	}
	public static final BitSet _tokenSet_169 = new BitSet(mk_tokenSet_169());
	private static final long[] mk_tokenSet_170() {
		long[] data = new long[30];
		data[0]=234470921997516802L;
		data[6]=-2305852288575471616L;
		data[7]=-3680848270445510791L;
		data[8]=-324409256558199809L;
		data[9]=-8251106925210602501L;
		data[10]=9222827375458779134L;
		data[11]=8921503851249902093L;
		data[12]=7989639206704506873L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_170 = new BitSet(mk_tokenSet_170());
	private static final long[] mk_tokenSet_171() {
		long[] data = new long[30];
		data[0]=234189420705611778L;
		data[6]=-288239655513489408L;
		data[7]=-3680848270445635981L;
		data[8]=-324409256558199809L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617608940218361L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_171 = new BitSet(mk_tokenSet_171());
	private static final long[] mk_tokenSet_172() {
		long[] data = new long[30];
		data[0]=22020096L;
		data[6]=-7205803867002372096L;
		data[7]=-3677122128887409551L;
		data[8]=-468542036820100097L;
		data[9]=-8250691309950069765L;
		data[10]=4607763111170539518L;
		data[11]=4073370039112671744L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_172 = new BitSet(mk_tokenSet_172());
	private static final long[] mk_tokenSet_173() {
		long[] data = new long[22];
		data[6]=144115188075855872L;
		data[7]=4611686018427387904L;
		data[8]=738197504L;
		data[9]=17875860044382208L;
		data[10]=4160749568L;
		return data;
	}
	public static final BitSet _tokenSet_173 = new BitSet(mk_tokenSet_173());
	private static final long[] mk_tokenSet_174() {
		long[] data = new long[30];
		data[0]=234470896219193346L;
		data[6]=-2305852288575471616L;
		data[7]=-3680848270445635983L;
		data[8]=-324409256558199809L;
		data[9]=-8250691309815303173L;
		data[10]=9222827379082657790L;
		data[11]=8705331051956249101L;
		data[12]=7962617608940218361L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_174 = new BitSet(mk_tokenSet_174());
	private static final long[] mk_tokenSet_175() {
		long[] data = new long[30];
		data[0]=234189421242482690L;
		data[6]=-2594082664727183360L;
		data[7]=-3680848270445635983L;
		data[8]=-324409256558199809L;
		data[9]=-8250691309815303173L;
		data[10]=9222827379082657790L;
		data[11]=8705331051956249101L;
		data[12]=7962617608940218361L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_175 = new BitSet(mk_tokenSet_175());
	private static final long[] mk_tokenSet_176() {
		long[] data = new long[20];
		data[0]=4831838208L;
		data[6]=144115188075855872L;
		data[7]=4611686018427387904L;
		data[8]=738197504L;
		data[9]=4440927464587264L;
		return data;
	}
	public static final BitSet _tokenSet_176 = new BitSet(mk_tokenSet_176());
	private static final long[] mk_tokenSet_177() {
		long[] data = new long[20];
		data[6]=144115188075855872L;
		data[7]=4611686018427387904L;
		data[8]=738197504L;
		data[9]=4440927464587264L;
		return data;
	}
	public static final BitSet _tokenSet_177 = new BitSet(mk_tokenSet_177());
	private static final long[] mk_tokenSet_178() {
		long[] data = new long[20];
		data[0]=281481977004032L;
		data[6]=144255925564211200L;
		data[7]=4611686018427387904L;
		data[8]=144115188814053376L;
		data[9]=4440927464587264L;
		return data;
	}
	public static final BitSet _tokenSet_178 = new BitSet(mk_tokenSet_178());
	private static final long[] mk_tokenSet_179() {
		long[] data = new long[30];
		data[0]=234470896219193346L;
		data[6]=-2594082664727183360L;
		data[7]=-3608790676407708047L;
		data[8]=-324409256558199809L;
		data[9]=-8070450567697239045L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617608940218361L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_179 = new BitSet(mk_tokenSet_179());
	private static final long[] mk_tokenSet_180() {
		long[] data = new long[20];
		data[0]=281479808548864L;
		data[6]=144115188075855872L;
		data[7]=4611686018427387904L;
		data[8]=144115188814053376L;
		data[9]=4440927464587264L;
		return data;
	}
	public static final BitSet _tokenSet_180 = new BitSet(mk_tokenSet_180());
	private static final long[] mk_tokenSet_181() {
		long[] data = new long[30];
		data[0]=234187492130029570L;
		data[6]=-7359172545461878784L;
		data[7]=-4545539398900672911L;
		data[8]=-468524444634072065L;
		data[9]=-8323178263278619653L;
		data[10]=4603264335470919678L;
		data[11]=8108595322416505344L;
		data[12]=7980631994564798425L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_181 = new BitSet(mk_tokenSet_181());
	private static final long[] mk_tokenSet_182() {
		long[] data = new long[16];
		data[0]=2147483648L;
		data[7]=72057594037927936L;
		return data;
	}
	public static final BitSet _tokenSet_182 = new BitSet(mk_tokenSet_182());
	private static final long[] mk_tokenSet_183() {
		long[] data = new long[15];
		data[0]=67108864L;
		return data;
	}
	public static final BitSet _tokenSet_183 = new BitSet(mk_tokenSet_183());
	private static final long[] mk_tokenSet_184() {
		long[] data = new long[30];
		data[0]=234187180644237312L;
		data[6]=-7359207729846550528L;
		data[7]=-4546246488225638800L;
		data[8]=-468524444634072065L;
		data[9]=-8323178263278644613L;
		data[10]=4603264335470919678L;
		data[11]=3496909303989117440L;
		data[12]=3368945976137410521L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_184 = new BitSet(mk_tokenSet_184());
	private static final long[] mk_tokenSet_185() {
		long[] data = new long[30];
		data[0]=20971520L;
		data[6]=-7359207748637032448L;
		data[7]=-4546316856969816464L;
		data[8]=-468542036820116481L;
		data[9]=-8323178263278644613L;
		data[10]=4602696970291118078L;
		data[11]=3496909303989117440L;
		data[12]=3368945976137410521L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_185 = new BitSet(mk_tokenSet_185());
	private static final long[] mk_tokenSet_186() {
		long[] data = new long[30];
		data[0]=22020096L;
		data[6]=-7205803869149855744L;
		data[7]=-3681625728514517391L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4608045132287574014L;
		data[11]=4073370073270566896L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_186 = new BitSet(mk_tokenSet_186());
	private static final long[] mk_tokenSet_187() {
		long[] data = new long[15];
		data[0]=216172782113783808L;
		return data;
	}
	public static final BitSet _tokenSet_187 = new BitSet(mk_tokenSet_187());
	private static final long[] mk_tokenSet_188() {
		long[] data = new long[30];
		data[0]=504403158286467072L;
		data[6]=-7359207729846550528L;
		data[7]=-4546316856969816464L;
		data[8]=-468542036820116481L;
		data[9]=-8323178263278644613L;
		data[10]=4603264335470919678L;
		data[11]=3496909303989117440L;
		data[12]=3368945976137410521L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_188 = new BitSet(mk_tokenSet_188());
	private static final long[] mk_tokenSet_189() {
		long[] data = new long[18];
		data[8]=17592186044416L;
		return data;
	}
	public static final BitSet _tokenSet_189 = new BitSet(mk_tokenSet_189());
	private static final long[] mk_tokenSet_190() {
		long[] data = new long[30];
		data[0]=18016599836459008L;
		data[6]=-2594117850718273536L;
		data[7]=-3681412422990424463L;
		data[8]=-324426848744244225L;
		data[9]=-8251115721304148997L;
		data[10]=9222827375458779134L;
		data[11]=8705322255863226892L;
		data[12]=7962617600350283769L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_190 = new BitSet(mk_tokenSet_190());
	private static final long[] mk_tokenSet_191() {
		long[] data = new long[26];
		data[0]=216172782113783808L;
		data[8]=17592186044416L;
		data[9]=524288L;
		data[11]=8796093022209L;
		data[12]=8589934592L;
		return data;
	}
	public static final BitSet _tokenSet_191 = new BitSet(mk_tokenSet_191());
	private static final long[] mk_tokenSet_192() {
		long[] data = new long[30];
		data[0]=22020096L;
		data[6]=-7205803869149855744L;
		data[7]=-3681625728514517391L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4607763657310863358L;
		data[11]=4073370073270566896L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_192 = new BitSet(mk_tokenSet_192());
	private static final long[] mk_tokenSet_193() {
		long[] data = new long[24];
		data[0]=2147483648L;
		data[6]=281474976710656L;
		data[7]=4L;
		data[11]=67273728L;
		return data;
	}
	public static final BitSet _tokenSet_193 = new BitSet(mk_tokenSet_193());
	private static final long[] mk_tokenSet_194() {
		long[] data = new long[30];
		data[0]=281482514923520L;
		data[6]=-7205803869149855744L;
		data[7]=-3681625728514517387L;
		data[8]=-468533240727077889L;
		data[9]=-8251115721438391301L;
		data[10]=4607763657310863358L;
		data[11]=4073370073270566896L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_194 = new BitSet(mk_tokenSet_194());
	private static final long[] mk_tokenSet_195() {
		long[] data = new long[24];
		data[0]=277360934912L;
		data[6]=281474976710656L;
		data[7]=8L;
		data[11]=67273728L;
		return data;
	}
	public static final BitSet _tokenSet_195 = new BitSet(mk_tokenSet_195());
	private static final long[] mk_tokenSet_196() {
		long[] data = new long[30];
		data[0]=234468663205298176L;
		data[6]=-2594117849111855104L;
		data[7]=-3681555359770503559L;
		data[8]=-468515648541033473L;
		data[9]=-8251115721438391301L;
		data[10]=4607768106896982014L;
		data[11]=4073370056292540928L;
		data[12]=3368945976137410553L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_196 = new BitSet(mk_tokenSet_196());
	private static final long[] mk_tokenSet_197() {
		long[] data = new long[30];
		data[0]=234204772897390592L;
		data[6]=-7070977353694838784L;
		data[7]=-4546246488225638800L;
		data[8]=-468524444634072065L;
		data[9]=-8323178263278644613L;
		data[10]=4603264335470919678L;
		data[11]=3496909303989117440L;
		data[12]=3368945976137410521L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_197 = new BitSet(mk_tokenSet_197());
	private static final long[] mk_tokenSet_198() {
		long[] data = new long[30];
		data[0]=234187180711346176L;
		data[6]=-7359207729846550528L;
		data[7]=-4546246488225638800L;
		data[8]=-468524444634072065L;
		data[9]=-8323178263278644613L;
		data[10]=4603264335470919678L;
		data[11]=3496909303989117440L;
		data[12]=3368945976137410521L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_198 = new BitSet(mk_tokenSet_198());
	private static final long[] mk_tokenSet_199() {
		long[] data = new long[30];
		data[0]=270360769299750402L;
		data[6]=-9279361777664L;
		data[7]=-3607664776500756611L;
		data[8]=-149533598155777L;
		data[9]=-8251115686937594885L;
		data[10]=-540246169616386L;
		data[11]=-229810591566945779L;
		data[12]=8060853990728329215L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_199 = new BitSet(mk_tokenSet_199());
	private static final long[] mk_tokenSet_200() {
		long[] data = new long[20];
		data[0]=277025390592L;
		data[7]=4L;
		data[9]=134217728L;
		return data;
	}
	public static final BitSet _tokenSet_200 = new BitSet(mk_tokenSet_200());
	private static final long[] mk_tokenSet_201() {
		long[] data = new long[30];
		data[0]=234187217252122626L;
		data[6]=-7359172545461878784L;
		data[7]=-4473481804862744971L;
		data[8]=-468524444634072065L;
		data[9]=-8323178263144401925L;
		data[10]=4603264335470919678L;
		data[11]=8108595322416505344L;
		data[12]=7980631994564798425L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_201 = new BitSet(mk_tokenSet_201());
	private static final long[] mk_tokenSet_202() {
		long[] data = new long[30];
		data[0]=234187217252122626L;
		data[6]=-5053329536248184832L;
		data[7]=-4473481804862744971L;
		data[8]=-468524444634072065L;
		data[9]=-8323178263278619653L;
		data[10]=4603264335470919678L;
		data[11]=8108700884122706432L;
		data[12]=7980631994564798425L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_202 = new BitSet(mk_tokenSet_202());
	private static final long[] mk_tokenSet_203() {
		long[] data = new long[22];
		data[0]=4362076160L;
		data[10]=1125899906842624L;
		return data;
	}
	public static final BitSet _tokenSet_203 = new BitSet(mk_tokenSet_203());
	private static final long[] mk_tokenSet_204() {
		long[] data = new long[30];
		data[0]=2303721472L;
		data[6]=-2594117850718273536L;
		data[7]=-3681412422990424463L;
		data[8]=-324426848744244225L;
		data[9]=-8251115721304148997L;
		data[10]=9222827375458779134L;
		data[11]=8705322255863226892L;
		data[12]=7962617600350283769L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_204 = new BitSet(mk_tokenSet_204());
	private static final long[] mk_tokenSet_205() {
		long[] data = new long[30];
		data[0]=234189381950242816L;
		data[6]=-2594117850718273536L;
		data[7]=-3681412422990424463L;
		data[8]=-324409256558199809L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617608940218361L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_205 = new BitSet(mk_tokenSet_205());
	private static final long[] mk_tokenSet_206() {
		long[] data = new long[22];
		data[0]=20971520L;
		data[8]=144115188075855872L;
		data[10]=3377699720527872L;
		return data;
	}
	public static final BitSet _tokenSet_206 = new BitSet(mk_tokenSet_206());
	private static final long[] mk_tokenSet_207() {
		long[] data = new long[30];
		data[0]=18298100591493120L;
		data[6]=-2594117850718273536L;
		data[7]=-3681412422990326151L;
		data[8]=-324426848744244225L;
		data[9]=-8251106925211126789L;
		data[10]=9222827375458779134L;
		data[11]=8921495055156879884L;
		data[12]=7989639198114572281L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_207 = new BitSet(mk_tokenSet_207());
	private static final long[] mk_tokenSet_208() {
		long[] data = new long[30];
		data[0]=18457977863740928L;
		data[6]=-2594073866478288896L;
		data[7]=-3680286523083465091L;
		data[8]=-324399910709363713L;
		data[9]=-8251106890850862085L;
		data[10]=9222831790685159422L;
		data[11]=-13637809453161972L;
		data[12]=7989640299786266623L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_208 = new BitSet(mk_tokenSet_208());
	private static final long[] mk_tokenSet_209() {
		long[] data = new long[30];
		data[0]=22085632L;
		data[6]=-7205803869149855744L;
		data[7]=-3681625728514780047L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4607763107546660862L;
		data[11]=4073370039112671744L;
		data[12]=3350931577636317177L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_209 = new BitSet(mk_tokenSet_209());
	private static final long[] mk_tokenSet_210() {
		long[] data = new long[30];
		data[0]=234189382285852672L;
		data[6]=-2594117850718273536L;
		data[7]=-3609354828952496527L;
		data[8]=-324409256558199809L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7967121208567588857L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_210 = new BitSet(mk_tokenSet_210());
	private static final long[] mk_tokenSet_211() {
		long[] data = new long[24];
		data[6]=2151677952L;
		data[7]=16779264L;
		data[9]=8796093050880L;
		data[11]=4611686018427387904L;
		return data;
	}
	public static final BitSet _tokenSet_211 = new BitSet(mk_tokenSet_211());
	private static final long[] mk_tokenSet_212() {
		long[] data = new long[30];
		data[0]=234189382017351680L;
		data[6]=-2594117850718273536L;
		data[7]=-3681412422990424463L;
		data[8]=-324400460465177601L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617611087702009L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_212 = new BitSet(mk_tokenSet_212());
	private static final long[] mk_tokenSet_213() {
		long[] data = new long[30];
		data[0]=234488510693965826L;
		data[6]=-2594073866469900288L;
		data[7]=-3680848270445519239L;
		data[8]=-324400460465177601L;
		data[9]=-8251106925210602501L;
		data[10]=9222831790685159422L;
		data[11]=8921503851249902093L;
		data[12]=7989640308376201209L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_213 = new BitSet(mk_tokenSet_213());
	private static final long[] mk_tokenSet_214() {
		long[] data = new long[30];
		data[0]=234189382017351680L;
		data[6]=-2594117850718273536L;
		data[7]=-3681412422990424463L;
		data[8]=-324409256558199809L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617611087702009L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_214 = new BitSet(mk_tokenSet_214());
	private static final long[] mk_tokenSet_215() {
		long[] data = new long[18];
		data[0]=2214592512L;
		data[6]=2305843009213693952L;
		data[8]=144115188075855872L;
		return data;
	}
	public static final BitSet _tokenSet_215 = new BitSet(mk_tokenSet_215());
	private static final long[] mk_tokenSet_216() {
		long[] data = new long[30];
		data[0]=234189382017351680L;
		data[6]=-2594117850718273536L;
		data[7]=-3681412422990424463L;
		data[8]=-324409256558199809L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617608940218361L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_216 = new BitSet(mk_tokenSet_216());
	private static final long[] mk_tokenSet_217() {
		long[] data = new long[30];
		data[0]=234189382285787136L;
		data[6]=-2594117850718273536L;
		data[7]=-3681412422990424463L;
		data[8]=-324409256558199809L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617608940218361L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_217 = new BitSet(mk_tokenSet_217());
	private static final long[] mk_tokenSet_218() {
		long[] data = new long[22];
		data[0]=8796160131072L;
		data[8]=144115188075855872L;
		data[9]=524288L;
		data[10]=3377699720527872L;
		return data;
	}
	public static final BitSet _tokenSet_218 = new BitSet(mk_tokenSet_218());
	private static final long[] mk_tokenSet_219() {
		long[] data = new long[24];
		data[0]=2168455168L;
		data[11]=4611686018427387904L;
		return data;
	}
	public static final BitSet _tokenSet_219 = new BitSet(mk_tokenSet_219());
	private static final long[] mk_tokenSet_220() {
		long[] data = new long[30];
		data[0]=2505048064L;
		data[6]=-4899960859936161792L;
		data[7]=-3681625728514780047L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4607763107546660862L;
		data[11]=4073370039112671744L;
		data[12]=3350932952017463289L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_220 = new BitSet(mk_tokenSet_220());
	private static final long[] mk_tokenSet_221() {
		long[] data = new long[30];
		data[0]=234470887335788544L;
		data[6]=-288274841504579584L;
		data[7]=-3681412422990326151L;
		data[8]=-324409256558199809L;
		data[9]=-8251106890850864133L;
		data[10]=9222827375458779134L;
		data[11]=8921504401005715981L;
		data[12]=7989640581094041593L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_221 = new BitSet(mk_tokenSet_221());
	private static final long[] mk_tokenSet_222() {
		long[] data = new long[30];
		data[0]=282913217576960L;
		data[6]=-288274841508773888L;
		data[7]=-3681623529491425671L;
		data[8]=-468542036820100097L;
		data[9]=-8251106925344844805L;
		data[10]=9219449675738251262L;
		data[11]=9189459232985424388L;
		data[12]=3377954549781751801L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_222 = new BitSet(mk_tokenSet_222());
	private static final long[] mk_tokenSet_223() {
		long[] data = new long[30];
		data[0]=234613172086382080L;
		data[6]=-288274841504579584L;
		data[7]=-3680286523083204995L;
		data[8]=-324399910709363713L;
		data[9]=-8251106890850862085L;
		data[10]=9222827375458779134L;
		data[11]=-13637242719322115L;
		data[12]=7989640582977284095L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_223 = new BitSet(mk_tokenSet_223());
	private static final long[] mk_tokenSet_224() {
		long[] data = new long[30];
		data[0]=282913217576960L;
		data[6]=-288274841508773888L;
		data[7]=-3681623529491425671L;
		data[8]=-468542036820100097L;
		data[9]=-8251106925344844805L;
		data[10]=9219449675738251262L;
		data[11]=9189459232985424388L;
		data[12]=3377953175392217081L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_224 = new BitSet(mk_tokenSet_224());
	private static final long[] mk_tokenSet_225() {
		long[] data = new long[30];
		data[0]=234613172086382080L;
		data[6]=-288274841504579584L;
		data[7]=-3680286523083204995L;
		data[8]=-324399910709363713L;
		data[9]=-8251106890850862085L;
		data[10]=9222827375458779134L;
		data[11]=-13637792475136003L;
		data[12]=7989639208587749375L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_225 = new BitSet(mk_tokenSet_225());
	private static final long[] mk_tokenSet_226() {
		long[] data = new long[30];
		data[0]=22020096L;
		data[6]=-7205803869149855744L;
		data[7]=-3681625728514780047L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4607763657302474750L;
		data[11]=4073370039112671748L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_226 = new BitSet(mk_tokenSet_226());
	private static final long[] mk_tokenSet_227() {
		long[] data = new long[30];
		data[0]=270695021111549442L;
		data[6]=-9277214294016L;
		data[7]=-3607664776500756611L;
		data[8]=-149533598155777L;
		data[9]=-8251106890844572677L;
		data[10]=-540246169616386L;
		data[11]=-9028648119590387L;
		data[12]=8069861189983135743L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_227 = new BitSet(mk_tokenSet_227());
	private static final long[] mk_tokenSet_228() {
		long[] data = new long[30];
		data[0]=22020096L;
		data[6]=-7205803869149855744L;
		data[7]=-3681625728514517391L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4607763657310863358L;
		data[11]=4073371722538008560L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_228 = new BitSet(mk_tokenSet_228());
	private static final long[] mk_tokenSet_229() {
		long[] data = new long[30];
		data[0]=22020096L;
		data[6]=-7205803869149855744L;
		data[7]=-3681625728514517391L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4607763657310863358L;
		data[11]=4073371172782194672L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_229 = new BitSet(mk_tokenSet_229());
	private static final long[] mk_tokenSet_230() {
		long[] data = new long[24];
		data[0]=17874311708672L;
		data[6]=288511851128422400L;
		data[11]=8657208320L;
		return data;
	}
	public static final BitSet _tokenSet_230 = new BitSet(mk_tokenSet_230());
	private static final long[] mk_tokenSet_231() {
		long[] data = new long[30];
		data[0]=234486316234047490L;
		data[6]=-2305852288575471616L;
		data[7]=-3608790676407609739L;
		data[8]=-468515648541033473L;
		data[9]=-8251106925211126789L;
		data[10]=9219454125324369918L;
		data[11]=8901228865423647236L;
		data[12]=7989639193819604985L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_231 = new BitSet(mk_tokenSet_231());
	private static final long[] mk_tokenSet_232() {
		long[] data = new long[30];
		data[0]=22020096L;
		data[6]=-7205803869149855744L;
		data[7]=-3681625728514517391L;
		data[8]=-468542036820100097L;
		data[9]=-8251115687078652933L;
		data[10]=4607763657310863358L;
		data[11]=4073371722538008560L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_232 = new BitSet(mk_tokenSet_232());
	private static final long[] mk_tokenSet_233() {
		long[] data = new long[30];
		data[0]=234204814270005250L;
		data[6]=-4765099160096473088L;
		data[7]=-4473481804862744971L;
		data[8]=-468524444634072065L;
		data[9]=-8323178263278619653L;
		data[10]=4603264335470919678L;
		data[11]=8108700875532771840L;
		data[12]=7980631994564798425L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_233 = new BitSet(mk_tokenSet_233());
	private static final long[] mk_tokenSet_234() {
		long[] data = new long[30];
		data[0]=4316987392L;
		data[6]=-7205803869149855744L;
		data[7]=-3681625728514780047L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4607763107546660862L;
		data[11]=4073370039112671744L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_234 = new BitSet(mk_tokenSet_234());
	private static final long[] mk_tokenSet_235() {
		long[] data = new long[30];
		data[0]=234187217253171202L;
		data[6]=-7205768683154571264L;
		data[7]=-3608790676407347595L;
		data[8]=-468524444634055681L;
		data[9]=-8251115687078628357L;
		data[10]=4607768072537243646L;
		data[11]=8685057740965396464L;
		data[12]=7980631994564798457L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_235 = new BitSet(mk_tokenSet_235());
	private static final long[] mk_tokenSet_236() {
		long[] data = new long[30];
		data[0]=234187217252122626L;
		data[6]=-7359172545461878784L;
		data[7]=-4473481804862744971L;
		data[8]=-468524444634072065L;
		data[9]=-8323178263278619653L;
		data[10]=4603264335470919678L;
		data[11]=8108595322416505344L;
		data[12]=7980631994564798425L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_236 = new BitSet(mk_tokenSet_236());
	private static final long[] mk_tokenSet_237() {
		long[] data = new long[30];
		data[0]=234187217252122626L;
		data[6]=-5053329536248184832L;
		data[7]=-4473481804862744971L;
		data[8]=-468524444634072065L;
		data[9]=-8323178263278619653L;
		data[10]=4603264335470919678L;
		data[11]=8108700875532771840L;
		data[12]=7980631994564798425L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_237 = new BitSet(mk_tokenSet_237());
	private static final long[] mk_tokenSet_238() {
		long[] data = new long[30];
		data[0]=234187217252122626L;
		data[6]=-5053329536248184832L;
		data[7]=-4473481804862744971L;
		data[8]=-468524444634072065L;
		data[9]=-8323178263278619653L;
		data[10]=4603264335470919678L;
		data[11]=8108665691160683008L;
		data[12]=7980631994564798425L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_238 = new BitSet(mk_tokenSet_238());
	private static final long[] mk_tokenSet_239() {
		long[] data = new long[30];
		data[0]=234187217252122626L;
		data[6]=-5053329536248184832L;
		data[7]=-4473481804862744971L;
		data[8]=-468524444634072065L;
		data[9]=-8323178263278619653L;
		data[10]=4603264335470919678L;
		data[11]=8108595322416505344L;
		data[12]=7980631994564798425L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_239 = new BitSet(mk_tokenSet_239());
	private static final long[] mk_tokenSet_240() {
		long[] data = new long[24];
		data[0]=67108864L;
		data[7]=1125899906842624L;
		data[10]=-9223372036854775808L;
		data[11]=8796093022208L;
		return data;
	}
	public static final BitSet _tokenSet_240 = new BitSet(mk_tokenSet_240());
	private static final long[] mk_tokenSet_241() {
		long[] data = new long[24];
		data[0]=335544320L;
		data[7]=1125899906842624L;
		data[10]=-9223372036854775808L;
		data[11]=8796093022208L;
		return data;
	}
	public static final BitSet _tokenSet_241 = new BitSet(mk_tokenSet_241());
	private static final long[] mk_tokenSet_242() {
		long[] data = new long[16];
		data[7]=70368744177664L;
		return data;
	}
	public static final BitSet _tokenSet_242 = new BitSet(mk_tokenSet_242());
	private static final long[] mk_tokenSet_243() {
		long[] data = new long[20];
		data[8]=17592186044416L;
		data[9]=524288L;
		return data;
	}
	public static final BitSet _tokenSet_243 = new BitSet(mk_tokenSet_243());
	private static final long[] mk_tokenSet_244() {
		long[] data = new long[30];
		data[0]=281475132948480L;
		data[6]=-7205803869149855744L;
		data[7]=-3681623529491523983L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4607763657310863358L;
		data[11]=4073370039112671748L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_244 = new BitSet(mk_tokenSet_244());
	private static final long[] mk_tokenSet_245() {
		long[] data = new long[30];
		data[0]=552193753088L;
		data[6]=-7205803869149855744L;
		data[7]=-3681625728514780047L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4607763107546660862L;
		data[11]=4073370039112671744L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_245 = new BitSet(mk_tokenSet_245());
	private static final long[] mk_tokenSet_246() {
		long[] data = new long[30];
		data[0]=2303721472L;
		data[6]=-2594117850718273536L;
		data[7]=-3681412422990424463L;
		data[8]=-324426848744244225L;
		data[9]=-8251115721304148997L;
		data[10]=9222827375458779134L;
		data[11]=8709825855490597388L;
		data[12]=7962617600350283769L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_246 = new BitSet(mk_tokenSet_246());
	private static final long[] mk_tokenSet_247() {
		long[] data = new long[20];
		data[9]=34359738368L;
		return data;
	}
	public static final BitSet _tokenSet_247 = new BitSet(mk_tokenSet_247());
	private static final long[] mk_tokenSet_248() {
		long[] data = new long[30];
		data[0]=552059535360L;
		data[6]=-2594117850718273536L;
		data[7]=-3681412422990424463L;
		data[8]=-324426848744244225L;
		data[9]=-8251115721304148997L;
		data[10]=9222827375458779134L;
		data[11]=8709825855490597388L;
		data[12]=7962617600350283769L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_248 = new BitSet(mk_tokenSet_248());
	private static final long[] mk_tokenSet_249() {
		long[] data = new long[30];
		data[0]=283462906281984L;
		data[6]=-2594117850722467840L;
		data[7]=-3681623529491425671L;
		data[8]=-468542036820100097L;
		data[9]=-8251106925344844805L;
		data[10]=9219449675738251262L;
		data[11]=9189459232985424388L;
		data[12]=3377953175392217081L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_249 = new BitSet(mk_tokenSet_249());
	private static final long[] mk_tokenSet_250() {
		long[] data = new long[30];
		data[0]=424342128565760L;
		data[6]=-2594117850722467840L;
		data[7]=-3680497629584304515L;
		data[8]=-468532690971264001L;
		data[9]=-8251106890985104389L;
		data[10]=9219449675738251262L;
		data[11]=-33912786891325452L;
		data[12]=3377953177275459583L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_250 = new BitSet(mk_tokenSet_250());
	private static final long[] mk_tokenSet_251() {
		long[] data = new long[22];
		data[10]=1125899906842624L;
		return data;
	}
	public static final BitSet _tokenSet_251 = new BitSet(mk_tokenSet_251());
	private static final long[] mk_tokenSet_252() {
		long[] data = new long[26];
		data[0]=2214592512L;
		data[6]=2305843009213693952L;
		data[8]=144115188075855872L;
		data[10]=1125899906842624L;
		data[12]=1374389534720L;
		return data;
	}
	public static final BitSet _tokenSet_252 = new BitSet(mk_tokenSet_252());
	private static final long[] mk_tokenSet_253() {
		long[] data = new long[30];
		data[0]=270361044446092802L;
		data[6]=-9279361777664L;
		data[7]=-3607664776500756611L;
		data[8]=-149533598155777L;
		data[9]=-8251115686937594885L;
		data[10]=-540246169616386L;
		data[11]=-518040967718656499L;
		data[12]=8060853990728329215L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_253 = new BitSet(mk_tokenSet_253());
	private static final long[] mk_tokenSet_254() {
		long[] data = new long[30];
		data[0]=270360769299750402L;
		data[6]=-9279361777664L;
		data[7]=-3607664776500756611L;
		data[8]=-149533598155777L;
		data[9]=-8251115686937594885L;
		data[10]=-540246169616386L;
		data[11]=-229810591566929395L;
		data[12]=8060853990728329215L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_254 = new BitSet(mk_tokenSet_254());
	private static final long[] mk_tokenSet_255() {
		long[] data = new long[30];
		data[0]=270218218261446658L;
		data[6]=-9279361777664L;
		data[7]=-3607664776500854919L;
		data[8]=-149533598155777L;
		data[9]=-8251115721303624709L;
		data[10]=-544661395996674L;
		data[11]=8705331051956249101L;
		data[12]=7970780623791384569L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_255 = new BitSet(mk_tokenSet_255());
	private static final long[] mk_tokenSet_256() {
		long[] data = new long[30];
		data[0]=270218218261446658L;
		data[6]=-9279361777664L;
		data[7]=-3607664776500854919L;
		data[8]=-150083353969665L;
		data[9]=-8251115721303624709L;
		data[10]=-544661395996674L;
		data[11]=8705331051956249101L;
		data[12]=7970780623791384569L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_256 = new BitSet(mk_tokenSet_256());
	private static final long[] mk_tokenSet_257() {
		long[] data = new long[30];
		data[0]=282917982306304L;
		data[6]=-2594117850722467840L;
		data[7]=-3681623529491425671L;
		data[8]=-468542036820100097L;
		data[9]=-8251106925344844805L;
		data[10]=9219449675738251262L;
		data[11]=9189459232985424388L;
		data[12]=3377953175392217081L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_257 = new BitSet(mk_tokenSet_257());
	private static final long[] mk_tokenSet_258() {
		long[] data = new long[30];
		data[0]=270641969675771394L;
		data[6]=-9279361777664L;
		data[7]=-3607664776500756611L;
		data[8]=-149533598155777L;
		data[9]=-8251106890850864133L;
		data[10]=-544661395996674L;
		data[11]=-13637809453161971L;
		data[12]=7997802221555673087L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_258 = new BitSet(mk_tokenSet_258());
	private static final long[] mk_tokenSet_259() {
		long[] data = new long[30];
		data[0]=281503058755584L;
		data[6]=-2594117850722467840L;
		data[7]=-3681623529491425679L;
		data[8]=-468542036820100097L;
		data[9]=-8251106890985630725L;
		data[10]=9219449675738251262L;
		data[11]=4289542838406324740L;
		data[12]=3377953175392217081L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_259 = new BitSet(mk_tokenSet_259());
	private static final long[] mk_tokenSet_260() {
		long[] data = new long[30];
		data[0]=270501094748454914L;
		data[6]=-9279361777664L;
		data[7]=-3607664776500756615L;
		data[8]=-149533598155777L;
		data[9]=-8251106925210602501L;
		data[10]=-544661395996674L;
		data[11]=9209734227401613837L;
		data[12]=7997802221555673081L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_260 = new BitSet(mk_tokenSet_260());
	private static final long[] mk_tokenSet_261() {
		long[] data = new long[30];
		data[0]=281503058755584L;
		data[6]=-2594117850722467840L;
		data[7]=-3681623529491425679L;
		data[8]=-468542036820100097L;
		data[9]=-8251106925345369093L;
		data[10]=9219449675738251262L;
		data[11]=-4933829198448451068L;
		data[12]=3377953175392217081L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_261 = new BitSet(mk_tokenSet_261());
	private static final long[] mk_tokenSet_262() {
		long[] data = new long[30];
		data[0]=30539776L;
		data[6]=-7205803869149855744L;
		data[7]=-3681625728514780047L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4607763107546660862L;
		data[11]=4073370039112671744L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_262 = new BitSet(mk_tokenSet_262());
	private static final long[] mk_tokenSet_263() {
		long[] data = new long[30];
		data[0]=270218218270097410L;
		data[6]=-9279361777664L;
		data[7]=-3607664776500854919L;
		data[8]=-149533598155777L;
		data[9]=-8251115721303624709L;
		data[10]=-544661395996674L;
		data[11]=8705331051956249101L;
		data[12]=7970780623791384569L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_263 = new BitSet(mk_tokenSet_263());
	private static final long[] mk_tokenSet_264() {
		long[] data = new long[30];
		data[0]=281503058755584L;
		data[6]=-2594117850722467840L;
		data[7]=-3681623529491425679L;
		data[8]=-468542036820100097L;
		data[9]=-8251106925345369093L;
		data[10]=9219449675738251262L;
		data[11]=4289542838406324740L;
		data[12]=3377953175392217083L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_264 = new BitSet(mk_tokenSet_264());
	private static final long[] mk_tokenSet_265() {
		long[] data = new long[30];
		data[0]=282913150468096L;
		data[6]=-2594117850722467840L;
		data[7]=-3681623529491425671L;
		data[8]=-468541487064286209L;
		data[9]=-8251106925344844805L;
		data[10]=9219449675738251262L;
		data[11]=9189459232985424388L;
		data[12]=3377953175392217081L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_265 = new BitSet(mk_tokenSet_265());
	private static final long[] mk_tokenSet_266() {
		long[] data = new long[30];
		data[0]=22020096L;
		data[6]=-7205803869149855744L;
		data[7]=-3681625728514779535L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438389253L;
		data[10]=4607763107555049470L;
		data[11]=4073370039112671744L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_266 = new BitSet(mk_tokenSet_266());
	private static final long[] mk_tokenSet_267() {
		long[] data = new long[30];
		data[0]=270642519162887682L;
		data[6]=-9279361777664L;
		data[7]=-3607664776500756609L;
		data[8]=-149533598155777L;
		data[9]=-6954070198161869829L;
		data[10]=-540246169616386L;
		data[11]=-13637809453161971L;
		data[12]=8069861189983135743L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_267 = new BitSet(mk_tokenSet_267());
	private static final long[] mk_tokenSet_268() {
		long[] data = new long[30];
		data[0]=281503058755584L;
		data[6]=-2594117850722467840L;
		data[7]=-3681623529491425679L;
		data[8]=-468542036820100097L;
		data[9]=-8251106925345369093L;
		data[10]=9219449675738251262L;
		data[11]=4289542838406324740L;
		data[12]=3377953175396411385L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_268 = new BitSet(mk_tokenSet_268());
	private static final long[] mk_tokenSet_269() {
		long[] data = new long[30];
		data[0]=282917445435392L;
		data[6]=-2594117850722467840L;
		data[7]=-3681623529491425671L;
		data[8]=-468542036820100097L;
		data[9]=-8251106925344844805L;
		data[10]=9219449675738251262L;
		data[11]=9189459232985424388L;
		data[12]=3377953175392217081L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_269 = new BitSet(mk_tokenSet_269());
	private static final long[] mk_tokenSet_270() {
		long[] data = new long[30];
		data[0]=270642519431585282L;
		data[6]=-9279361777664L;
		data[7]=-3607664776500478083L;
		data[8]=-140737505133569L;
		data[9]=-8251106890844570629L;
		data[10]=-540246169616386L;
		data[11]=-13637792475136003L;
		data[12]=8069861191866378239L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_270 = new BitSet(mk_tokenSet_270());
	private static final long[] mk_tokenSet_271() {
		long[] data = new long[30];
		data[0]=22020096L;
		data[6]=-7205803869149855744L;
		data[7]=-3681625728514780047L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4607763657302474750L;
		data[11]=4073370056292540928L;
		data[12]=3350931577627928569L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_271 = new BitSet(mk_tokenSet_271());
	private static final long[] mk_tokenSet_272() {
		long[] data = new long[26];
		data[0]=144418275328L;
		data[12]=1099511627776L;
		return data;
	}
	public static final BitSet _tokenSet_272 = new BitSet(mk_tokenSet_272());
	private static final long[] mk_tokenSet_273() {
		long[] data = new long[15];
		data[0]=2147483648L;
		return data;
	}
	public static final BitSet _tokenSet_273 = new BitSet(mk_tokenSet_273());
	private static final long[] mk_tokenSet_274() {
		long[] data = new long[18];
		data[8]=36028797018963968L;
		return data;
	}
	public static final BitSet _tokenSet_274 = new BitSet(mk_tokenSet_274());
	private static final long[] mk_tokenSet_275() {
		long[] data = new long[30];
		data[0]=234189420705611778L;
		data[6]=-288239655513489408L;
		data[7]=-3680848270445635983L;
		data[8]=-324409256558199809L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617849458386937L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_275 = new BitSet(mk_tokenSet_275());
	private static final long[] mk_tokenSet_276() {
		long[] data = new long[30];
		data[0]=423792909622784L;
		data[6]=-2594117850722467840L;
		data[7]=-3608440035546655107L;
		data[8]=-468541487064286209L;
		data[9]=-8251106890985104389L;
		data[10]=9219449675738251262L;
		data[11]=-33912803869351420L;
		data[12]=3377953175400605695L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_276 = new BitSet(mk_tokenSet_276());
	private static final long[] mk_tokenSet_277() {
		long[] data = new long[26];
		data[0]=4831838208L;
		data[12]=1374397923328L;
		return data;
	}
	public static final BitSet _tokenSet_277 = new BitSet(mk_tokenSet_277());
	private static final long[] mk_tokenSet_278() {
		long[] data = new long[26];
		data[12]=8388608L;
		return data;
	}
	public static final BitSet _tokenSet_278 = new BitSet(mk_tokenSet_278());
	private static final long[] mk_tokenSet_279() {
		long[] data = new long[24];
		data[0]=6442450944L;
		data[6]=281474976710656L;
		data[11]=67273728L;
		return data;
	}
	public static final BitSet _tokenSet_279 = new BitSet(mk_tokenSet_279());
	private static final long[] mk_tokenSet_280() {
		long[] data = new long[30];
		data[0]=270642244284980738L;
		data[6]=-9279361777664L;
		data[7]=-3607664776500756611L;
		data[8]=-140737505133569L;
		data[9]=-8251106890844572677L;
		data[10]=-540246169616386L;
		data[11]=-13637809453161971L;
		data[12]=8069861189983135743L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_280 = new BitSet(mk_tokenSet_280());
	private static final long[] mk_tokenSet_281() {
		long[] data = new long[26];
		data[8]=17592186044416L;
		data[11]=1L;
		data[12]=8589934592L;
		return data;
	}
	public static final BitSet _tokenSet_281 = new BitSet(mk_tokenSet_281());
	private static final long[] mk_tokenSet_282() {
		long[] data = new long[16];
		data[0]=536870912L;
		data[7]=2L;
		return data;
	}
	public static final BitSet _tokenSet_282 = new BitSet(mk_tokenSet_282());
	private static final long[] mk_tokenSet_283() {
		long[] data = new long[30];
		data[0]=234189420705611778L;
		data[6]=-288239655513489408L;
		data[7]=-3680848270445635983L;
		data[8]=-150083353969665L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617849458386937L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_283 = new BitSet(mk_tokenSet_283());
	private static final long[] mk_tokenSet_284() {
		long[] data = new long[30];
		data[0]=234189420705611778L;
		data[6]=-288239655513489408L;
		data[7]=-3680848270445635983L;
		data[8]=-288380459505681409L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617849458386937L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_284 = new BitSet(mk_tokenSet_284());
	private static final long[] mk_tokenSet_285() {
		long[] data = new long[30];
		data[0]=234189420705611778L;
		data[6]=-288239655513489408L;
		data[7]=-3680848270445635983L;
		data[8]=-288380459539235841L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617849458386937L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_285 = new BitSet(mk_tokenSet_285());
	private static final long[] mk_tokenSet_286() {
		long[] data = new long[30];
		data[0]=234189420705611778L;
		data[6]=-288239655513489408L;
		data[7]=-3680848270445635983L;
		data[8]=-324409256558199809L;
		data[9]=-8251115721303622661L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=9115539354065233913L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_286 = new BitSet(mk_tokenSet_286());
	private static final long[] mk_tokenSet_287() {
		long[] data = new long[30];
		data[0]=281504132497408L;
		data[6]=-2594117850722467840L;
		data[7]=-3681623529491425679L;
		data[8]=-468542036820100097L;
		data[9]=-8251106925345369093L;
		data[10]=9219449675738251262L;
		data[11]=4289542838406324740L;
		data[12]=3377953175392217081L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_287 = new BitSet(mk_tokenSet_287());
	private static final long[] mk_tokenSet_288() {
		long[] data = new long[30];
		data[0]=282913687339008L;
		data[6]=-2594117850722467840L;
		data[7]=-3609565935453497735L;
		data[8]=-468542036820100097L;
		data[9]=-8251106925344844805L;
		data[10]=9219449675738251262L;
		data[11]=9189459232985424388L;
		data[12]=3377954549790140409L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_288 = new BitSet(mk_tokenSet_288());
	private static final long[] mk_tokenSet_289() {
		long[] data = new long[30];
		data[0]=423792909688320L;
		data[6]=-2594117850705690624L;
		data[7]=-3608440035546376579L;
		data[8]=-468532690971264001L;
		data[9]=-8251106890985104389L;
		data[10]=9219449675738251262L;
		data[11]=-33912786891325452L;
		data[12]=3377954551673382911L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_289 = new BitSet(mk_tokenSet_289());
	private static final long[] mk_tokenSet_290() {
		long[] data = new long[26];
		data[12]=3870280929771520L;
		return data;
	}
	public static final BitSet _tokenSet_290 = new BitSet(mk_tokenSet_290());
	private static final long[] mk_tokenSet_291() {
		long[] data = new long[30];
		data[0]=2169569280L;
		data[6]=-7205803869133078528L;
		data[7]=-3681625728514780047L;
		data[8]=-468542036820100097L;
		data[9]=-8251115721438391301L;
		data[10]=4607763107546660862L;
		data[11]=4073370039112671744L;
		data[12]=3352620427488192505L;
		data[13]=-2306406027886724730L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_291 = new BitSet(mk_tokenSet_291());
	private static final long[] mk_tokenSet_292() {
		long[] data = new long[30];
		data[0]=234189421510983682L;
		data[6]=-288239655496712192L;
		data[7]=-3608790676407708045L;
		data[8]=-150083353969665L;
		data[9]=-8107000533227768837L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7970780623782995961L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_292 = new BitSet(mk_tokenSet_292());
	private static final long[] mk_tokenSet_293() {
		long[] data = new long[30];
		data[0]=234189421242482690L;
		data[6]=-288239655513489408L;
		data[7]=-3680848270445635983L;
		data[8]=-150083353969665L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7970780623782995961L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_293 = new BitSet(mk_tokenSet_293());
	private static final long[] mk_tokenSet_294() {
		long[] data = new long[30];
		data[0]=234189420705611778L;
		data[6]=-288239655513489408L;
		data[7]=-3680848270445635983L;
		data[8]=-150083353969665L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7967121449085757433L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_294 = new BitSet(mk_tokenSet_294());
	private static final long[] mk_tokenSet_295() {
		long[] data = new long[30];
		data[0]=234189420705611778L;
		data[6]=-288239655513489408L;
		data[7]=-3680848270445635983L;
		data[8]=-324409256558199809L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=9115539354065233913L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_295 = new BitSet(mk_tokenSet_295());
	private static final long[] mk_tokenSet_296() {
		long[] data = new long[26];
		data[0]=67108864L;
		data[6]=2305843009213693952L;
		data[12]=8388608L;
		return data;
	}
	public static final BitSet _tokenSet_296 = new BitSet(mk_tokenSet_296());
	private static final long[] mk_tokenSet_297() {
		long[] data = new long[26];
		data[0]=536870912L;
		data[12]=1374397923328L;
		return data;
	}
	public static final BitSet _tokenSet_297 = new BitSet(mk_tokenSet_297());
	private static final long[] mk_tokenSet_298() {
		long[] data = new long[30];
		data[0]=234189421242482690L;
		data[6]=-288239655513489408L;
		data[7]=-3680848270445635981L;
		data[8]=-150083353969665L;
		data[9]=-6954078994261183493L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7970781998180919289L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_298 = new BitSet(mk_tokenSet_298());
	private static final long[] mk_tokenSet_299() {
		long[] data = new long[30];
		data[0]=234189421242482690L;
		data[6]=-288239655513489408L;
		data[7]=-3680848270445635981L;
		data[8]=-150083353969665L;
		data[9]=-8107000498868030469L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7970780623782995961L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_299 = new BitSet(mk_tokenSet_299());
	private static final long[] mk_tokenSet_300() {
		long[] data = new long[30];
		data[0]=234189421510918146L;
		data[6]=-288239655513489408L;
		data[7]=-3608790676407708045L;
		data[8]=-150083353969665L;
		data[9]=-8107000498868030469L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7970780623782995961L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_300 = new BitSet(mk_tokenSet_300());
	private static final long[] mk_tokenSet_301() {
		long[] data = new long[15];
		data[0]=35184372088832L;
		return data;
	}
	public static final BitSet _tokenSet_301 = new BitSet(mk_tokenSet_301());
	private static final long[] mk_tokenSet_302() {
		long[] data = new long[30];
		data[0]=234189421242482690L;
		data[6]=-288239655513489408L;
		data[7]=-3608790676407708045L;
		data[8]=-150083353969665L;
		data[9]=-8107000498868030469L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7970780623782995961L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_302 = new BitSet(mk_tokenSet_302());
	private static final long[] mk_tokenSet_303() {
		long[] data = new long[30];
		data[0]=234189421242482690L;
		data[6]=-288239655513489408L;
		data[7]=-3680848270445635981L;
		data[8]=-150083353969665L;
		data[9]=-6954078994261183493L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7970780623782995961L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_303 = new BitSet(mk_tokenSet_303());
	private static final long[] mk_tokenSet_304() {
		long[] data = new long[30];
		data[0]=234189421242482690L;
		data[6]=-288239655513489408L;
		data[7]=-3608790676407708045L;
		data[8]=-150083353969665L;
		data[9]=-6954078994261183493L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7970780623782995961L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_304 = new BitSet(mk_tokenSet_304());
	private static final long[] mk_tokenSet_305() {
		long[] data = new long[30];
		data[0]=234189421242482690L;
		data[6]=-288239655513489408L;
		data[7]=-3680848270445635983L;
		data[8]=-324409256558199809L;
		data[9]=-8251115721297333253L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617849458386937L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_305 = new BitSet(mk_tokenSet_305());
	private static final long[] mk_tokenSet_306() {
		long[] data = new long[30];
		data[0]=234189421242482690L;
		data[6]=-288239655513489408L;
		data[7]=-3680848270445635983L;
		data[8]=-324409256558199809L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617849458386937L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_306 = new BitSet(mk_tokenSet_306());
	private static final long[] mk_tokenSet_307() {
		long[] data = new long[24];
		data[0]=139586437120L;
		data[9]=1152921504606846976L;
		data[11]=4611686018427387904L;
		return data;
	}
	public static final BitSet _tokenSet_307 = new BitSet(mk_tokenSet_307());
	private static final long[] mk_tokenSet_308() {
		long[] data = new long[30];
		data[0]=234189416947515394L;
		data[6]=-2594082664727183360L;
		data[7]=-3680848270445635983L;
		data[8]=-324409256558199809L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7962617608940218361L;
		data[13]=-2306406027886724721L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_308 = new BitSet(mk_tokenSet_308());
	private static final long[] mk_tokenSet_309() {
		long[] data = new long[26];
		data[12]=1099511627776L;
		return data;
	}
	public static final BitSet _tokenSet_309 = new BitSet(mk_tokenSet_309());
	private static final long[] mk_tokenSet_310() {
		long[] data = new long[30];
		data[0]=234189416410644482L;
		data[6]=-2594082664727183360L;
		data[7]=-3680848270445635983L;
		data[8]=-324409256558199809L;
		data[9]=-8251115721303624709L;
		data[10]=9222827375458779134L;
		data[11]=8705331051956249101L;
		data[12]=7967121208567588857L;
		data[13]=-2306406027886724722L;
		data[14]=8191L;
		return data;
	}
	public static final BitSet _tokenSet_310 = new BitSet(mk_tokenSet_310());
	private static final long[] mk_tokenSet_311() {
		long[] data = new long[28];
		data[13]=16L;
		return data;
	}
	public static final BitSet _tokenSet_311 = new BitSet(mk_tokenSet_311());
	private static final long[] mk_tokenSet_312() {
		long[] data = new long[30];
		data[13]=2048L;
		data[14]=1024L;
		return data;
	}
	public static final BitSet _tokenSet_312 = new BitSet(mk_tokenSet_312());
	private static final long[] mk_tokenSet_313() {
		long[] data = new long[30];
		data[14]=1024L;
		return data;
	}
	public static final BitSet _tokenSet_313 = new BitSet(mk_tokenSet_313());
	private static final long[] mk_tokenSet_314() {
		long[] data = new long[15];
		data[0]=29491200L;
		return data;
	}
	public static final BitSet _tokenSet_314 = new BitSet(mk_tokenSet_314());
	private static final long[] mk_tokenSet_315() {
		long[] data = new long[15];
		data[0]=4974706688L;
		return data;
	}
	public static final BitSet _tokenSet_315 = new BitSet(mk_tokenSet_315());
	private static final long[] mk_tokenSet_316() {
		long[] data = new long[15];
		data[0]=4861329408L;
		return data;
	}
	public static final BitSet _tokenSet_316 = new BitSet(mk_tokenSet_316());
	private static final long[] mk_tokenSet_317() {
		long[] data = new long[15];
		data[0]=4840488960L;
		return data;
	}
	public static final BitSet _tokenSet_317 = new BitSet(mk_tokenSet_317());
	private static final long[] mk_tokenSet_318() {
		long[] data = new long[28];
		data[0]=4831838208L;
		data[6]=562949953421312L;
		data[11]=512L;
		data[13]=140608843079680L;
		return data;
	}
	public static final BitSet _tokenSet_318 = new BitSet(mk_tokenSet_318());
	private static final long[] mk_tokenSet_319() {
		long[] data = new long[28];
		data[11]=512L;
		data[13]=70240096509952L;
		return data;
	}
	public static final BitSet _tokenSet_319 = new BitSet(mk_tokenSet_319());
	private static final long[] mk_tokenSet_320() {
		long[] data = new long[28];
		data[0]=4294967296L;
		data[6]=562949953421312L;
		data[13]=70368744177664L;
		return data;
	}
	public static final BitSet _tokenSet_320 = new BitSet(mk_tokenSet_320());
	private static final long[] mk_tokenSet_321() {
		long[] data = new long[15];
		data[0]=4294967296L;
		data[6]=562949953421312L;
		return data;
	}
	public static final BitSet _tokenSet_321 = new BitSet(mk_tokenSet_321());
	private static final long[] mk_tokenSet_322() {
		long[] data = new long[28];
		data[0]=4294967296L;
		data[6]=562949953421312L;
		data[11]=512L;
		data[13]=140608840687616L;
		return data;
	}
	public static final BitSet _tokenSet_322 = new BitSet(mk_tokenSet_322());
	private static final long[] mk_tokenSet_323() {
		long[] data = new long[30];
		data[0]=6979321856L;
		data[6]=562949953421312L;
		data[10]=128L;
		data[13]=4467711567839887360L;
		data[14]=128L;
		return data;
	}
	public static final BitSet _tokenSet_323 = new BitSet(mk_tokenSet_323());
	private static final long[] mk_tokenSet_324() {
		long[] data = new long[30];
		data[0]=6979321856L;
		data[6]=562949953421312L;
		data[10]=128L;
		data[13]=140737488355328L;
		data[14]=128L;
		return data;
	}
	public static final BitSet _tokenSet_324 = new BitSet(mk_tokenSet_324());
	private static final long[] mk_tokenSet_325() {
		long[] data = new long[15];
		data[0]=4966055936L;
		return data;
	}
	public static final BitSet _tokenSet_325 = new BitSet(mk_tokenSet_325());
	private static final long[] mk_tokenSet_326() {
		long[] data = new long[30];
		data[0]=4831838208L;
		data[11]=981468416L;
		data[13]=-9223372036854775808L;
		data[14]=119L;
		return data;
	}
	public static final BitSet _tokenSet_326 = new BitSet(mk_tokenSet_326());


	static void just_for_checking(String arg1, final String arg2, long[] arg3) throws Exception{
	    // do nothing
	}
	}
