package com.deepsky.gui2;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.jetbrains.annotations.NotNull;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class JDBCUrlPanel {

    public static String JDBC_PANEL = "JDBC_PANEL";

    public void validate() throws ConnectionSettings4.ValidationException {
        if (((String) hostComboBox.getSelectedItem()).length() == 0) {
            throw new ConnectionSettings4.ValidationException(hostComboBox, "Host parameter must be specified");
        }

        if (!((String) hostComboBox.getSelectedItem()).matches("[a-zA-Z0-9\\.\\_\\-]+")) {
            throw new ConnectionSettings4.ValidationException(hostComboBox, "Host parameter contains not permissible characters");
        }

        if (port.getText().length() == 0) {
            throw new ConnectionSettings4.ValidationException(port, "Port parameter must be specified");
        }

        if (!port.getText().matches("[0-9]+")) {
            throw new ConnectionSettings4.ValidationException(port, "Port parameter contains not permissible characters");
        }

        if (SIDRadioButton.isSelected()) {
            String sid1 = sidText.getText().trim();
            if (sid1.length() == 0) {
                throw new ConnectionSettings4.ValidationException(sidText, "SID must be specified");
            }

            if (!sid1.matches("[a-zA-Z0-9\\.\\_\\-]+")) {
                throw new ConnectionSettings4.ValidationException(sidText, "SID contains not permissible characters");
            }
        } else {
            String serviceName1 = serviceNameText.getText().trim();
            if (serviceName1.length() == 0) {
                throw new ConnectionSettings4.ValidationException(serviceNameText, "Service Name must be specified");
            }

            if (!serviceName1.matches("[a-zA-Z0-9\\.\\_\\-]+")) {
                throw new ConnectionSettings4.ValidationException(serviceNameText, "Service Name contains not permissible characters");
            }
        }
    }

    public void setHost(String[] dbHosts) {
        if (dbHosts != null && dbHosts.length > 0) {
            for (String host : dbHosts) {
                hostComboBox.addItem(host);
            }
        } else {
            hostComboBox.addItem("localhost");
        }
    }


    public void setSelectedDbIdentType(DB_IDENT_TYPE type) {
        if (type == DB_IDENT_TYPE.SID) {
            SIDRadioButton.setSelected(true);
            serviceNameRadioButton.setSelected(false);
            sidText.setEnabled(true);
            serviceNameText.setEnabled(false);
        } else {
            SIDRadioButton.setSelected(false);
            serviceNameRadioButton.setSelected(true);
            sidText.setEnabled(false);
            serviceNameText.setEnabled(true);
        }
    }

    public void setSelectedDbName(String sidServiceName) {
        if (SIDRadioButton.isSelected()) {
            sidText.setText(sidServiceName);
        } else {
            serviceNameText.setText(sidServiceName);
        }
    }

    public void setPort(String port) {
        this.port.setText(port);
    }

    public void setHost(@NotNull String host) {
        for (int i = 0; i < hostComboBox.getItemCount(); i++) {
            if (host.equalsIgnoreCase((String) hostComboBox.getItemAt(i))) {
                hostComboBox.setSelectedItem(host);
                return;
            }
        }
        hostComboBox.addItem(host);
        hostComboBox.setSelectedItem(host);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(4, 22, new Insets(0, 0, 0, 0), -1, -1));
        final Spacer spacer1 = new Spacer();
        rootPanel.add(spacer1, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Host");
        rootPanel.add(label1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(panel1, new GridConstraints(2, 0, 1, 22, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Service Name/SID"));
        SIDRadioButton = new JRadioButton();
        SIDRadioButton.setText("SID");
        panel1.add(SIDRadioButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        serviceNameRadioButton = new JRadioButton();
        serviceNameRadioButton.setSelected(true);
        serviceNameRadioButton.setText("Service Name");
        panel1.add(serviceNameRadioButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        serviceNameText = new JTextField();
        panel1.add(serviceNameText, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        sidText = new JTextField();
        panel1.add(sidText, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        rootPanel.add(spacer2, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Port number");
        rootPanel.add(label2, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        port = new JTextField();
        rootPanel.add(port, new GridConstraints(1, 3, 1, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(80, -1), new Dimension(80, -1), new Dimension(80, -1), 0, false));
        hostComboBox = new JComboBox();
        hostComboBox.setEditable(true);
        rootPanel.add(hostComboBox, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(serviceNameRadioButton);
        buttonGroup.add(SIDRadioButton);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

    public static enum DB_IDENT_TYPE {
        SERVICE_NAME,
        SID
    }

    private JPanel rootPanel;
    private JRadioButton SIDRadioButton;
    private JRadioButton serviceNameRadioButton;
    private JTextField serviceNameText;
    private JTextField sidText;
    private JTextField port;
    private JComboBox hostComboBox;


    public JDBCUrlPanel(@NotNull DB_IDENT_TYPE type, String dbName, @NotNull String[] hosts, int port) {

        if (type == DB_IDENT_TYPE.SERVICE_NAME) {
            serviceNameText.setText(dbName);
            serviceNameRadioButton.setSelected(true);
            serviceNameText.setEnabled(true);
            sidText.setEnabled(false);
        } else {
            sidText.setText(dbName);
            SIDRadioButton.setSelected(true);
            serviceNameText.setEnabled(false);
            sidText.setEnabled(true);
        }

        for (String host : hosts) {
            hostComboBox.addItem(host);
        }

        if (hosts.length > 0) {
            hostComboBox.setSelectedItem(hosts[0]);
        }

        if (port == 0) {
            this.port.setText("1521");
        } else {
            this.port.setText(String.valueOf(port));
        }

        // Save in properties in order to provide access to JDBCUrlPanel from root panel
        rootPanel.putClientProperty(JDBC_PANEL, this);
        serviceNameRadioButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                serviceNameText.setEnabled(true);
                sidText.setEnabled(false);
            }
        });
        SIDRadioButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                serviceNameText.setEnabled(false);
                sidText.setEnabled(true);
            }
        });
    }


    public String getHost() {
        return (String) hostComboBox.getSelectedItem();
    }

    public String getPort() {
        return port.getText();
    }

    public DB_IDENT_TYPE getSelectedDbIdentType() {
        if (SIDRadioButton.isSelected()) {
            return DB_IDENT_TYPE.SID;
        } else {
            return DB_IDENT_TYPE.SERVICE_NAME;
        }
    }

    public String getSelectedDbName() {
        if (SIDRadioButton.isSelected()) {
            return sidText.getText();
        } else {
            return serviceNameText.getText();
        }
    }

    public JPanel getRootPanel() {
        return rootPanel;
    }

}
