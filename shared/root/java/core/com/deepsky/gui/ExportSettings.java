/*
 * Copyright (c) 2009,2010 Serhiy Kulyk
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     3. The name of the author may not be used to endorse or promote
 *       products derived from this software without specific prior written
 *       permission from the author.
 *
 * SQL CODE ASSISTANT PLUG-IN FOR INTELLIJ IDEA IS PROVIDED BY SERHIY KULYK
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL SERHIY KULYK BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.deepsky.gui;

import com.intellij.ide.DataManager;
import com.intellij.openapi.actionSystem.LangDataKeys;
import com.intellij.openapi.fileChooser.FileChooser;
import com.intellij.openapi.fileChooser.FileChooserDescriptor;
import com.intellij.openapi.fileChooser.FileChooserDescriptorFactory;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.DialogWrapper;
import com.intellij.openapi.ui.Messages;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

public class ExportSettings extends DialogWrapper { //extends JDialog {
    private JPanel contentPane;
    private JRadioButton clipboardRadioButton;
    private JRadioButton fileRadioButton;
    private JTextField fileNameTextField;
    private JButton button1;
    private JCheckBox encloseColumnInDoubleCheckBox;
    private JCheckBox saveColumnHeadersCheckBox;
    private JComboBox delimiterSymbol;

    protected ExportSettings(Project project, boolean canBeParent) {
        super(project, canBeParent);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new BorderLayout(0, 0));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel2.setBorder(BorderFactory.createTitledBorder("Save"));
        clipboardRadioButton = new JRadioButton();
        clipboardRadioButton.setIconTextGap(4);
        clipboardRadioButton.setMargin(new Insets(2, 2, 2, 3));
        clipboardRadioButton.setSelected(true);
        clipboardRadioButton.setText("Clipboard");
        panel2.add(clipboardRadioButton, BorderLayout.NORTH);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new BorderLayout(3, 0));
        panel2.add(panel3, BorderLayout.SOUTH);
        fileRadioButton = new JRadioButton();
        fileRadioButton.setHorizontalAlignment(2);
        fileRadioButton.setPreferredSize(new Dimension(74, 22));
        fileRadioButton.setText("File");
        panel3.add(fileRadioButton, BorderLayout.WEST);
        fileNameTextField = new JTextField();
        fileNameTextField.setEnabled(false);
        fileNameTextField.setMargin(new Insets(1, 1, 1, 1));
        fileNameTextField.setMinimumSize(new Dimension(160, 20));
        fileNameTextField.setPreferredSize(new Dimension(160, 20));
        panel3.add(fileNameTextField, BorderLayout.CENTER);
        button1 = new JButton();
        button1.setEnabled(false);
        button1.setHorizontalAlignment(0);
        button1.setMargin(new Insets(3, 10, 3, 10));
        button1.setText("...");
        panel3.add(button1, BorderLayout.EAST);
        encloseColumnInDoubleCheckBox = new JCheckBox();
        encloseColumnInDoubleCheckBox.setSelected(false);
        encloseColumnInDoubleCheckBox.setText("Enclose column in double quotes");
        panel1.add(encloseColumnInDoubleCheckBox, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        saveColumnHeadersCheckBox = new JCheckBox();
        saveColumnHeadersCheckBox.setSelected(true);
        saveColumnHeadersCheckBox.setText("Save column headers");
        panel1.add(saveColumnHeadersCheckBox, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel1.add(panel4, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setHorizontalAlignment(2);
        label1.setMaximumSize(new Dimension(120, 14));
        label1.setMinimumSize(new Dimension(120, 14));
        label1.setPreferredSize(new Dimension(120, 14));
        label1.setText("Delimiter symbol: ");
        panel4.add(label1);
        delimiterSymbol = new JComboBox();
        delimiterSymbol.setEditable(true);
        delimiterSymbol.setMaximumSize(new Dimension(110, 22));
        delimiterSymbol.setMinimumSize(new Dimension(110, 22));
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("Comma");
        defaultComboBoxModel1.addElement("Semicolon");
        defaultComboBoxModel1.addElement("Tabulation");
        delimiterSymbol.setModel(defaultComboBoxModel1);
        delimiterSymbol.setPreferredSize(new Dimension(110, 22));
        panel4.add(delimiterSymbol);
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(fileRadioButton);
        buttonGroup.add(clipboardRadioButton);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    public enum Delimiter {
        TAB,
        COMMA,
        SEMICOLON
    }

    @Nullable
    protected JComponent createCenterPanel() {
        return contentPane;
    }

    public boolean saveToClipboard() {
        return clipboardRadioButton.isSelected();
    }

    public boolean saveToFile() {
        return fileRadioButton.isSelected();
    }

    public String getFilePathToSave() {
        return fileNameTextField.getText();
    }

    public Delimiter getDelimiter() {
        if ("Tabulation".equals(delimiterSymbol.getSelectedItem().toString())) {
            return Delimiter.TAB;
        } else if ("Comma".equals(delimiterSymbol.getSelectedItem().toString())) {
            return Delimiter.COMMA;
        } else {
            // default: SEMICOLON
            return Delimiter.SEMICOLON;
        }
    }

    public boolean encloseFieldsInDowubleQuotes() {
        return encloseColumnInDoubleCheckBox.isSelected();
    }

    public boolean saveColumnHeaders() {
        return saveColumnHeadersCheckBox.isSelected();
    }

    public ExportSettings() {
        this(LangDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext()), false);
        //setContentPane(contentPane);
        this.setTitle("Export Settings");

//        contentPane.registerKeyboardAction(new ActionListener() {
//            public void actionPerformed(ActionEvent e) {
//                onCancel();
//            }
//        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

        button1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {

                FileChooserDescriptor descriptor = FileChooserDescriptorFactory.createSingleLocalFileDescriptor();
                VirtualFile[] files = FileChooser.chooseFiles(contentPane, descriptor);
                if (files.length != 0) {
                    fileNameTextField.setText(files[0].getPath());
//                    if (new File(files[0].getPath()).exists()) {
//                        // file exists, rewrite it?
//                        int res = Messages.showDialog(
//                                "File exists, do you want to rewrite it?",
//                                "Confirmation", new String[]{"Yes", "No"}, 0, null);
//                    }
                }
            }
        });

        init();

        fileRadioButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (fileRadioButton.isSelected()) {
                    // enable file chooser
                    fileNameTextField.setEnabled(true);
                    button1.setEnabled(true);
                }
            }
        });
        clipboardRadioButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (clipboardRadioButton.isSelected()) {
                    // disable file chooser
                    fileNameTextField.setEnabled(false);
                    button1.setEnabled(false);
                }
            }
        });
    }


}
