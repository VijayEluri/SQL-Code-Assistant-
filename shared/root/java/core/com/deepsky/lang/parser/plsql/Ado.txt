package com.deepsky.lang.parser.plsql;

import antlr.TokenStream;
import com.intellij.lang.PsiBuilder;
import com.intellij.psi.tree.IElementType;

import com.intellij.openapi.diagnostic.Logger;

import com.deepsky.lang.common.PlSqlTokenTypes;

import com.deepsky.generated.plsql.adopted.PLSqlTokenTypes;

import java.util.Map;
import java.util.HashMap;



public abstract class PLSqlParserAdoptedExt extends com.deepsky.generated.plsql.adopted.PLSqlParserAdopted {
    PsiBuilder builder;

    static final Logger log = Logger.getInstance("#PLSqlParserAdoptedExt");

    static Map<Integer, IElementType> type2etype = new HashMap<Integer, IElementType>();

    static {

        type2etype.put(PLSqlTokenTypes.CREATE_PROCEDURE, PLSqlTypesAdopted.CREATE_PROCEDURE);
        type2etype.put(PLSqlTokenTypes.SELECT_LIST, PLSqlTypesAdopted.SELECT_LIST);
        type2etype.put(PLSqlTokenTypes.PROCEDURE_BODY, PLSqlTypesAdopted.PROCEDURE_BODY);
        type2etype.put(PLSqlTokenTypes.LOGICAL_OR, PLSqlTypesAdopted.LOGICAL_OR);
        type2etype.put(PLSqlTokenTypes.IMMEDIATE_COMMAND, PLSqlTypesAdopted.IMMEDIATE_COMMAND);
        type2etype.put(PLSqlTokenTypes.FUNCTION_BODY, PLSqlTypesAdopted.FUNCTION_BODY);
        type2etype.put(PLSqlTokenTypes.CREATE_FUNCTION, PLSqlTypesAdopted.CREATE_FUNCTION);
        type2etype.put(PLSqlTokenTypes.CURSOR_DECLARATION, PLSqlTypesAdopted.CURSOR_DECLARATION);
        type2etype.put(PLSqlTokenTypes.CALL_ARGUMENT_LIST, PLSqlTypesAdopted.CALL_ARGUMENT_LIST);
        type2etype.put(PLSqlTokenTypes.BOOLEAN_LITERAL, PLSqlTypesAdopted.BOOLEAN_LITERAL);
        type2etype.put(PLSqlTokenTypes.LIKE_CONDITION, PLSqlTypesAdopted.LIKE_CONDITION);
        type2etype.put(PLSqlTokenTypes.IN_CONDITION, PLSqlTypesAdopted.IN_CONDITION);
        type2etype.put(PLSqlTokenTypes.FUNCTION_SPEC, PLSqlTypesAdopted.FUNCTION_SPEC);
        type2etype.put(PLSqlTokenTypes.CONDITION, PLSqlTypesAdopted.CONDITION);
        type2etype.put(PLSqlTokenTypes.STRING_LITERAL, PLSqlTypesAdopted.STRING_LITERAL);
        type2etype.put(PLSqlTokenTypes.CAST_EXPR, PLSqlTypesAdopted.CAST_EXPR);
        type2etype.put(PLSqlTokenTypes.INTO_CLAUSE, PLSqlTypesAdopted.INTO_CLAUSE);
        type2etype.put(PLSqlTokenTypes.SELECT_EXPRESSION, PLSqlTypesAdopted.SELECT_EXPRESSION);
        type2etype.put(PLSqlTokenTypes.ARGUMENT_LIST, PLSqlTypesAdopted.ARGUMENT_LIST);
        type2etype.put(PLSqlTokenTypes.ROWCOUNT_EXRESSION, PLSqlTypesAdopted.ROWCOUNT_EXRESSION);
        type2etype.put(PLSqlTokenTypes.TABLE_REFERENCE_LIST, PLSqlTypesAdopted.TABLE_REFERENCE_LIST);
        type2etype.put(PLSqlTokenTypes.RECORD_TYPE_DECL, PLSqlTypesAdopted.RECORD_TYPE_DECL);
        type2etype.put(PLSqlTokenTypes.CASE_STATEMENT, PLSqlTypesAdopted.CASE_STATEMENT);
        type2etype.put(PLSqlTokenTypes.EXCEPTION_SECTION, PLSqlTypesAdopted.EXCEPTION_SECTION);
        type2etype.put(PLSqlTokenTypes.PLSQL_BLOCK, PLSqlTypesAdopted.PLSQL_BLOCK);
        type2etype.put(PLSqlTokenTypes.IDENT, PLSqlTypesAdopted.IDENT);
        type2etype.put(PLSqlTokenTypes.DECLARE_LIST, PLSqlTypesAdopted.DECLARE_LIST);
        type2etype.put(PLSqlTokenTypes.ISNULL_CONDITION, PLSqlTypesAdopted.ISNULL_CONDITION);
        type2etype.put(PLSqlTokenTypes.PACKAGE_SPEC, PLSqlTypesAdopted.PACKAGE_SPEC);
        type2etype.put(PLSqlTokenTypes.ASSIGNMENT_STATEMENT, PLSqlTypesAdopted.ASSIGNMENT_STATEMENT);
        type2etype.put(PLSqlTokenTypes.TABLE_ALIAS, PLSqlTypesAdopted.TABLE_ALIAS);
        type2etype.put(PLSqlTokenTypes.TYPE_SPEC, PLSqlTypesAdopted.TYPE_SPEC);
        type2etype.put(PLSqlTokenTypes.CASE_EXPRESSION, PLSqlTypesAdopted.CASE_EXPRESSION);
        type2etype.put(PLSqlTokenTypes.INTERVAL_EXPR, PLSqlTypesAdopted.INTERVAL_EXPR);
        type2etype.put(PLSqlTokenTypes.PROCEDURE_SPEC, PLSqlTypesAdopted.PROCEDURE_SPEC);
        type2etype.put(PLSqlTokenTypes.DELETE_COMMAND, PLSqlTypesAdopted.DELETE_COMMAND);
        type2etype.put(PLSqlTokenTypes.RELATION_CONDITION, PLSqlTypesAdopted.RELATION_CONDITION);
        type2etype.put(PLSqlTokenTypes.COMMIT_STATEMENT, PLSqlTypesAdopted.COMMIT_STATEMENT);
        type2etype.put(PLSqlTokenTypes.COLUMN_SPEC_LIST, PLSqlTypesAdopted.COLUMN_SPEC_LIST);
        type2etype.put(PLSqlTokenTypes.RETURN_TYPE, PLSqlTypesAdopted.RETURN_TYPE);
        type2etype.put(PLSqlTokenTypes.COLUMN_OUTER_JOIN, PLSqlTypesAdopted.COLUMN_OUTER_JOIN);
        type2etype.put(PLSqlTokenTypes.LOGICAL_AND, PLSqlTypesAdopted.LOGICAL_AND);
        type2etype.put(PLSqlTokenTypes.THEN_STATEMENT, PLSqlTypesAdopted.THEN_STATEMENT);
        type2etype.put(PLSqlTokenTypes.SUBQUERY_UPDATE_COMMAND, PLSqlTypesAdopted.SUBQUERY_UPDATE_COMMAND);
        type2etype.put(PLSqlTokenTypes.WHERE_CONDITION, PLSqlTypesAdopted.WHERE_CONDITION);
        type2etype.put(PLSqlTokenTypes.PLACEHOLDER, PLSqlTypesAdopted.PLACEHOLDER);
        type2etype.put(PLSqlTokenTypes.SORTED_DEF, PLSqlTypesAdopted.SORTED_DEF);
        type2etype.put(PLSqlTokenTypes.FOR_UPDATE_CLAUSE, PLSqlTypesAdopted.FOR_UPDATE_CLAUSE);
        type2etype.put(PLSqlTokenTypes.VAR_REF, PLSqlTypesAdopted.VAR_REF);
        type2etype.put(PLSqlTokenTypes.PLSQL_EXPRESSION, PLSqlTypesAdopted.PLSQL_EXPRESSION);
        type2etype.put(PLSqlTokenTypes.USER_CONST, PLSqlTypesAdopted.USER_CONST);
        type2etype.put(PLSqlTokenTypes.EXISTS_EXPR, PLSqlTypesAdopted.EXISTS_EXPR);
        type2etype.put(PLSqlTokenTypes.CREATE_PACKAGE_SPEC, PLSqlTypesAdopted.CREATE_PACKAGE_SPEC);
        type2etype.put(PLSqlTokenTypes.LOGICAL_FACTOR, PLSqlTypesAdopted.LOGICAL_FACTOR);
        type2etype.put(PLSqlTokenTypes.STATEMENT_LIST, PLSqlTypesAdopted.STATEMENT_LIST);
        type2etype.put(PLSqlTokenTypes.ELSIF_STATEMENT, PLSqlTypesAdopted.ELSIF_STATEMENT);
        type2etype.put(PLSqlTokenTypes.PRAGMA, PLSqlTypesAdopted.PRAGMA);
        type2etype.put(PLSqlTokenTypes.STATEMENT, PLSqlTypesAdopted.STATEMENT);
        type2etype.put(PLSqlTokenTypes.PERCENTAGE_TYPE, PLSqlTypesAdopted.PERCENTAGE_TYPE);
        type2etype.put(PLSqlTokenTypes.PARAMETER_SPEC, PLSqlTypesAdopted.PARAMETER_SPEC);
        type2etype.put(PLSqlTokenTypes.INSERT_COMMAND, PLSqlTypesAdopted.INSERT_COMMAND);
        type2etype.put(PLSqlTokenTypes.CURSOR_NAME, PLSqlTypesAdopted.CURSOR_NAME);
        type2etype.put(PLSqlTokenTypes.FROM_TZ_FUNC, PLSqlTypesAdopted.FROM_TZ_FUNC);
        type2etype.put(PLSqlTokenTypes.ALIAS_NAME, PLSqlTypesAdopted.ALIAS_NAME);
        type2etype.put(PLSqlTokenTypes.PROCEDURE_CALL, PLSqlTypesAdopted.PROCEDURE_CALL);
        type2etype.put(PLSqlTokenTypes.DISPLAYED_COLUMN, PLSqlTypesAdopted.DISPLAYED_COLUMN);
        type2etype.put(PLSqlTokenTypes.VARIABLE_DECLARATION, PLSqlTypesAdopted.VARIABLE_DECLARATION);
        type2etype.put(PLSqlTokenTypes.SIMPLE_UPDATE_COMMAND, PLSqlTypesAdopted.SIMPLE_UPDATE_COMMAND);
        type2etype.put(PLSqlTokenTypes.OBJECT_NAME, PLSqlTypesAdopted.OBJECT_NAME);
        type2etype.put(PLSqlTokenTypes.ANSI_JOIN_TAB_SPEC, PLSqlTypesAdopted.ANSI_JOIN_TAB_SPEC);
        type2etype.put(PLSqlTokenTypes.GROUP_CLAUSE, PLSqlTypesAdopted.GROUP_CLAUSE);
        type2etype.put(PLSqlTokenTypes.RETURN_STATEMENT, PLSqlTypesAdopted.RETURN_STATEMENT);
        type2etype.put(PLSqlTokenTypes.IF_STATEMENT, PLSqlTypesAdopted.IF_STATEMENT);
        type2etype.put(PLSqlTokenTypes.SYSDATE_CONST, PLSqlTypesAdopted.SYSDATE_CONST);
        type2etype.put(PLSqlTokenTypes.BETWEEN_CONDITION, PLSqlTypesAdopted.BETWEEN_CONDITION);
        type2etype.put(PLSqlTokenTypes.INTERVAL_CONST, PLSqlTypesAdopted.INTERVAL_CONST);
        type2etype.put(PLSqlTokenTypes.CONNECT_CLAUSE, PLSqlTypesAdopted.CONNECT_CLAUSE);
        type2etype.put(PLSqlTokenTypes.SELECT_COMMAND, PLSqlTypesAdopted.SELECT_COMMAND);
        type2etype.put(PLSqlTokenTypes.TYPE_NAME, PLSqlTypesAdopted.TYPE_NAME);
        type2etype.put(PLSqlTokenTypes.SUBQUERY_EXPR, PLSqlTypesAdopted.SUBQUERY_EXPR);
        type2etype.put(PLSqlTokenTypes.CREATE_PACKAGE_BODY, PLSqlTypesAdopted.CREATE_PACKAGE_BODY);
        type2etype.put(PLSqlTokenTypes.STATEMENT_ANNOT, PLSqlTypesAdopted.STATEMENT_ANNOT);
        type2etype.put(PLSqlTokenTypes.DECLARE_SPEC, PLSqlTypesAdopted.DECLARE_SPEC);
        type2etype.put(PLSqlTokenTypes.SYSTIMESTAMP_CONST, PLSqlTypesAdopted.SYSTIMESTAMP_CONST);
        type2etype.put(PLSqlTokenTypes.PARAMETER_NAME, PLSqlTypesAdopted.PARAMETER_NAME);
        type2etype.put(PLSqlTokenTypes.FUNCTION_CALL, PLSqlTypesAdopted.FUNCTION_CALL);
        type2etype.put(PLSqlTokenTypes.COLUMN_SPEC, PLSqlTypesAdopted.COLUMN_SPEC);
        type2etype.put(PLSqlTokenTypes.PACKAGE_OBJ_SPEC, PLSqlTypesAdopted.PACKAGE_OBJ_SPEC);
        type2etype.put(PLSqlTokenTypes.LOOP_STATEMENT, PLSqlTypesAdopted.LOOP_STATEMENT);
        type2etype.put(PLSqlTokenTypes.UPDATE_COMMAND, PLSqlTypesAdopted.UPDATE_COMMAND);
//        type2etype.put(PLSqlTokenTypes.ARGUMENT, PLSqlTypesAdopted.ARGUMENT);
        type2etype.put(PLSqlTokenTypes.ORDER_CLAUSE, PLSqlTypesAdopted.ORDER_CLAUSE);
        type2etype.put(PLSqlTokenTypes.EXTRACT_DATE_FUNC, PLSqlTypesAdopted.EXTRACT_DATE_FUNC);
        type2etype.put(PLSqlTokenTypes.NULL_STATEMENT, PLSqlTypesAdopted.NULL_STATEMENT);
        type2etype.put(PLSqlTokenTypes.COUNT_FUNC, PLSqlTypesAdopted.COUNT_FUNC);
        type2etype.put(PLSqlTokenTypes.ELSE_STATEMENT, PLSqlTypesAdopted.ELSE_STATEMENT);
        type2etype.put(PLSqlTokenTypes.PARENTHESIZED_EXPR, PLSqlTypesAdopted.PARENTHESIZED_EXPR);
        type2etype.put(PLSqlTokenTypes.PLSQL_EXPR_LIST, PLSqlTypesAdopted.PLSQL_EXPR_LIST);
        type2etype.put(PLSqlTokenTypes.PACKAGE_OBJ_BODY, PLSqlTypesAdopted.PACKAGE_OBJ_BODY);
        type2etype.put(PLSqlTokenTypes.DATATYPE, PLSqlTypesAdopted.DATATYPE);
        type2etype.put(PLSqlTokenTypes.DEFAULT, PLSqlTypesAdopted.DEFAULT);
        type2etype.put(PLSqlTokenTypes.NUMERIC_LITERAL, PLSqlTypesAdopted.NUMERIC_LITERAL);
        type2etype.put(PLSqlTokenTypes.PERCENTAGE_ROWTYPE, PLSqlTypesAdopted.PERCENTAGE_ROWTYPE);
        type2etype.put(PLSqlTokenTypes.CALL_ARGUMENT, PLSqlTypesAdopted.CALL_ARGUMENT);
        type2etype.put(PLSqlTokenTypes.VARIABLE_NAME, PLSqlTypesAdopted.VARIABLE_NAME);
        type2etype.put(PLSqlTokenTypes.FUNCTION_NAME, PLSqlTypesAdopted.FUNCTION_NAME);
        type2etype.put(PLSqlTokenTypes.PACKAGE_INIT_SECTION, PLSqlTypesAdopted.PACKAGE_INIT_SECTION);
        type2etype.put(PLSqlTokenTypes.RAISE_STATEMENT, PLSqlTypesAdopted.RAISE_STATEMENT);
        type2etype.put(PLSqlTokenTypes.SUBQUERY, PLSqlTypesAdopted.SUBQUERY);
        type2etype.put(PLSqlTokenTypes.TRIM_FUNC, PLSqlTypesAdopted.TRIM_FUNC);

    }

    abstract public int getPredicting();

    public IElementType findPlSqlElemType(int t){

//        if(t == PLSqlTokenTypes.TABLE_REFERENCE_LIST){
//            String[] stack = PlSqlLexerTTest.getMethodsForClassName("PLSqlParserAdoptedExt.java");
//            String indent = ".";
//            for (String s : stack) {
//                log.info(indent + s);
//                indent += ".";
//            }
//        }

        IElementType elem = type2etype.get(t);
        if(elem != null){
            return elem;
        } else {
            return PlSqlTokenTypes.KEYWORD;
        }
    }

    public PLSqlParserAdoptedExt(TokenStream t, PsiBuilder b){
        super(t);
        builder = b;
    }

    public void start_rule() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.start_rule();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.start_rule();
        }
        returnType = -1;
    }

    public void create_package() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.create_package();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.create_package();
        }
        returnType = -1;
    }

    public void sqlplus_command() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.sqlplus_command();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.sqlplus_command();
        }
        returnType = -1;
    }

    public void begin_block() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.begin_block();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.begin_block();
        }
        returnType = -1;
    }

    public void function_body() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.function_body();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.function_body();
        }
        returnType = -1;
    }

    public void sql_statement() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.sql_statement();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.sql_statement();
        }
        returnType = -1;
    }

    public antlr.CommonToken identifier() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.identifier();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.identifier();
        }
        returnType = -1;
        return ret;
    }

    public void base_expression() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.base_expression();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.base_expression();
        }
        returnType = -1;
    }

    public void package_spec() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.package_spec();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.package_spec();
        }
        returnType = -1;
    }

    public void package_body() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.package_body();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.package_body();
        }
        returnType = -1;
    }

    public void procedure_body() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.procedure_body();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.procedure_body();
        }
        returnType = -1;
    }

    public void object_name() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.object_name();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.object_name();
        }
        returnType = -1;
    }

    public void package_obj_spec() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.package_obj_spec();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.package_obj_spec();
        }
        returnType = -1;
    }

    public void package_obj_body() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.package_obj_body();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.package_obj_body();
        }
        returnType = -1;
    }

    public void package_init_section() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.package_init_section();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.package_init_section();
        }
        returnType = -1;
    }

    public void seq_of_statements() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.seq_of_statements();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.seq_of_statements();
        }
        returnType = -1;
    }

    public void variable_declaration() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.variable_declaration();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.variable_declaration();
        }
        returnType = -1;
    }

    public void subtype_declaration() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.subtype_declaration();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.subtype_declaration();
        }
        returnType = -1;
    }

    public void cursor_declaration() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.cursor_declaration();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.cursor_declaration();
        }
        returnType = -1;
    }

    public antlr.CommonToken cursor_spec() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.cursor_spec();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.cursor_spec();
        }
        returnType = -1;
        return ret;
    }

    public antlr.CommonToken record_declaration() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.record_declaration();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.record_declaration();
        }
        returnType = -1;
        return ret;
    }

    public antlr.CommonToken plsql_table_declaration() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.plsql_table_declaration();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.plsql_table_declaration();
        }
        returnType = -1;
        return ret;
    }

    public void procedure_spec() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.procedure_spec();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.procedure_spec();
        }
        returnType = -1;
    }

    public void function_spec() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.function_spec();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.function_spec();
        }
        returnType = -1;
    }

    public antlr.CommonToken exception_declaration() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.exception_declaration();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.exception_declaration();
        }
        returnType = -1;
        return ret;
    }

    public antlr.CommonToken variable_name() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.variable_name();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.variable_name();
        }
        returnType = -1;
        return ret;
    }

    public void type_spec() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.type_spec();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.type_spec();
        }
        returnType = -1;
    }

    public void default1() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.default1();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.default1();
        }
        returnType = -1;
    }

    public void plsql_expression() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.plsql_expression();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.plsql_expression();
        }
        returnType = -1;
    }

    public antlr.CommonToken type_name() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.type_name();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.type_name();
        }
        returnType = -1;
        return ret;
    }

    public void cursor_name() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.cursor_name();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.cursor_name();
        }
        returnType = -1;
    }

    public void parameter_spec() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.parameter_spec();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.parameter_spec();
        }
        returnType = -1;
    }

    public void select_command() throws antlr.RecognitionException,antlr.TokenStreamException{

        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.select_command();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.select_command();
        }
        returnType = -1;
    }

    public void function_declaration() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.function_declaration();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.function_declaration();
        }
        returnType = -1;
    }

    public void procedure_declaration() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.procedure_declaration();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.procedure_declaration();
        }
        returnType = -1;
    }

    public void statement() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.statement();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.statement();
        }
        returnType = -1;
    }

    public void label_name() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.label_name();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.label_name();
        }
        returnType = -1;
    }

    public void plsql_block() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.plsql_block();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.plsql_block();
        }
        returnType = -1;
    }

    public antlr.CommonToken loop_statement() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.loop_statement();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.loop_statement();
        }
        returnType = -1;
        return ret;
    }

    public void forall_statement() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.forall_statement();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.forall_statement();
        }
        returnType = -1;
    }

    public void if_statement() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.if_statement();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.if_statement();
        }
        returnType = -1;
    }

    public void goto_statement() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.goto_statement();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.goto_statement();
        }
        returnType = -1;
    }

    public void raise_statement() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.raise_statement();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.raise_statement();
        }
        returnType = -1;
    }

    public antlr.CommonToken exit_statement() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.exit_statement();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.exit_statement();
        }
        returnType = -1;
        return ret;
    }

    public void null_statement() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.null_statement();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.null_statement();
        }
        returnType = -1;
    }

    public void return_statement() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.return_statement();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.return_statement();
        }
        returnType = -1;
    }

    public void case_statement() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.case_statement();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.case_statement();
        }
        returnType = -1;
    }

    public void lvalue() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.lvalue();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.lvalue();
        }
        returnType = -1;
    }

    public void assignment_statement() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.assignment_statement();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.assignment_statement();
        }
        returnType = -1;
    }

    public void function_name() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.function_name();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.function_name();
        }
        returnType = -1;
    }

    public antlr.CommonToken procedure_call() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.procedure_call();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.procedure_call();
        }
        returnType = -1;
        return ret;
    }

    public void function_call(antlr.collections.AST arg0) throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.function_call(arg0);
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.function_call(arg0);
        }
        returnType = -1;
    }

    public void plsql_condition() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.plsql_condition();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.plsql_condition();
        }
        returnType = -1;
    }

    public void declare_spec() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.declare_spec();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.declare_spec();
        }
        returnType = -1;
    }

    public antlr.CommonToken exception_pragma() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.exception_pragma();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.exception_pragma();
        }
        returnType = -1;
        return ret;
    }

    public void pragma() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.pragma();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.pragma();
        }
        returnType = -1;
    }

    public antlr.CommonToken table_name() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.table_name();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.table_name();
        }
        returnType = -1;
        return ret;
    }

    public void identifier2() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.identifier2();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.identifier2();
        }
        returnType = -1;
    }

    public void field_name() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.field_name();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.field_name();
        }
        returnType = -1;
    }

    public antlr.CommonToken host_variable() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.host_variable();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.host_variable();
        }
        returnType = -1;
        return ret;
    }

    public antlr.CommonToken datatype() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.datatype();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.datatype();
        }
        returnType = -1;
        return ret;
    }

    public void percentage_type() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.percentage_type();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.percentage_type();
        }
        returnType = -1;
    }

    public antlr.CommonToken column_name() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.column_name();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.column_name();
        }
        returnType = -1;
        return ret;
    }

    public void parameter_name() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.parameter_name();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.parameter_name();
        }
        returnType = -1;
    }

    public void return_type() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.return_type();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.return_type();
        }
        returnType = -1;
    }

    public void exception_name() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.exception_name();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.exception_name();
        }
        returnType = -1;
    }

    public antlr.CommonToken exception_package_name() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.exception_package_name();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.exception_package_name();
        }
        returnType = -1;
        return ret;
    }

    public antlr.CommonToken oracle_err_number() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.oracle_err_number();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.oracle_err_number();
        }
        returnType = -1;
        return ret;
    }

    public void numeric_literal() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.numeric_literal();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.numeric_literal();
        }
        returnType = -1;
    }

    public antlr.CommonToken record_type_decl() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.record_type_decl();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.record_type_decl();
        }
        returnType = -1;
        return ret;
    }

    public antlr.CommonToken record_var_dec() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.record_var_dec();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.record_var_dec();
        }
        returnType = -1;
        return ret;
    }

    public antlr.CommonToken record_table_preamble() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.record_table_preamble();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.record_table_preamble();
        }
        returnType = -1;
        return ret;
    }

    public antlr.CommonToken field_spec() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.field_spec();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.field_spec();
        }
        returnType = -1;
        return ret;
    }

    public antlr.CommonToken record_name() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.record_name();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.record_name();
        }
        returnType = -1;
        return ret;
    }

    public antlr.CommonToken column_spec() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.column_spec();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.column_spec();
        }
        returnType = -1;
        return ret;
    }

    public antlr.CommonToken table_type_dec() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.table_type_dec();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.table_type_dec();
        }
        returnType = -1;
        return ret;
    }

    public antlr.CommonToken table_var_dec() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.table_var_dec();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.table_var_dec();
        }
        returnType = -1;
        return ret;
    }

    public antlr.CommonToken plsql_table_name() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.plsql_table_name();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.plsql_table_name();
        }
        returnType = -1;
        return ret;
    }

    public void argument_list() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.argument_list();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.argument_list();
        }
        returnType = -1;
    }

    public void func_proc_statements() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.func_proc_statements();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.func_proc_statements();
        }
        returnType = -1;
    }

    public void declare_list() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.declare_list();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.declare_list();
        }
        returnType = -1;
    }

    public void exception_handler() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.exception_handler();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.exception_handler();
        }
        returnType = -1;
    }

    public void exception_section() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.exception_section();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.exception_section();
        }
        returnType = -1;
    }

    public void call_argument_list() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.call_argument_list();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.call_argument_list();
        }
        returnType = -1;
    }


    public void coll_for() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.coll_for();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.coll_for();
        }
        returnType = -1;
    }

    public void cursor_loop_param() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.cursor_loop_param();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.cursor_loop_param();
        }
        returnType = -1;
    }

    public void numeric_loop_param() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.numeric_loop_param();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.numeric_loop_param();
        }
        returnType = -1;
    }

    public antlr.CommonToken index_name() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.index_name();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.index_name();
        }
        returnType = -1;
        return ret;
    }

    public void integer_expr() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.integer_expr();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.integer_expr();
        }
        returnType = -1;
    }

    public void plsql_exp_list() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.plsql_exp_list();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.plsql_exp_list();
        }
        returnType = -1;
    }

    public void select_expression() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.select_expression();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.select_expression();
        }
        returnType = -1;
    }

    public void boolean_exp() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.boolean_exp();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.boolean_exp();
        }
        returnType = -1;
    }

    public void boolean_term() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.boolean_term();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.boolean_term();
        }
        returnType = -1;
    }

    public void maybe_negated_factor() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.maybe_negated_factor();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.maybe_negated_factor();
        }
        returnType = -1;
    }

    public antlr.CommonToken boolean_factor() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.boolean_factor();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.boolean_factor();
        }
        returnType = -1;
        return ret;
    }

    public antlr.CommonToken relational_op() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.relational_op();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.relational_op();
        }
        returnType = -1;
        return ret;
    }

    public antlr.CommonToken match_string() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.match_string();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.match_string();
        }
        returnType = -1;
        return ret;
    }

    public void boolean_literal() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.boolean_literal();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.boolean_literal();
        }
        returnType = -1;
    }

    public void num_expression() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.num_expression();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.num_expression();
        }
        returnType = -1;
    }

    public void num_term() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.num_term();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.num_term();
        }
        returnType = -1;
    }

    public void num_factor() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.num_factor();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.num_factor();
        }
        returnType = -1;
    }

    public void sign() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.sign();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.sign();
        }
        returnType = -1;
    }

    public void cast_proc() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.cast_proc();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.cast_proc();
        }
        returnType = -1;
    }

    public void trim_function() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.trim_function();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.trim_function();
        }
        returnType = -1;
    }

    public void count_function() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.count_function();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.count_function();
        }
        returnType = -1;
    }

    public void case_expression() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.case_expression();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.case_expression();
        }
        returnType = -1;
    }

    public void from_tz_function() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.from_tz_function();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.from_tz_function();
        }
        returnType = -1;
    }

    public void extract_date_function() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.extract_date_function();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.extract_date_function();
        }
        returnType = -1;
    }

    public void string_literal() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.string_literal();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.string_literal();
        }
        returnType = -1;
    }

    public void subquery() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.subquery();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.subquery();
        }
        returnType = -1;
    }

    public void pseudo_column() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.pseudo_column();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.pseudo_column();
        }
        returnType = -1;
    }

    public void extract_consts() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.extract_consts();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.extract_consts();
        }
        returnType = -1;
    }

    public antlr.CommonToken date_literal() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.date_literal();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.date_literal();
        }
        returnType = -1;
        return ret;
    }

    public void commit_statement() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.commit_statement();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.commit_statement();
        }
        returnType = -1;
    }

    public void elsif_statements() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.elsif_statements();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.elsif_statements();
        }
        returnType = -1;
    }

    public void else_statements() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.else_statements();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.else_statements();
        }
        returnType = -1;
    }

    public void then_statements() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.then_statements();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.then_statements();
        }
        returnType = -1;
    }

    public void sql_command() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.sql_command();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.sql_command();
        }
        returnType = -1;
    }

    public void to_modify_data() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.to_modify_data();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.to_modify_data();
        }
        returnType = -1;
    }

    public void to_control_data() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.to_control_data();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.to_control_data();
        }
        returnType = -1;
    }

    public void insert_command() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.insert_command();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.insert_command();
        }
        returnType = -1;
    }

    public void update_command() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.update_command();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.update_command();
        }
        returnType = -1;
    }

    public void delete_command() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.delete_command();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.delete_command();
        }
        returnType = -1;
    }

    public void immediate_command() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.immediate_command();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.immediate_command();
        }
        returnType = -1;
    }

    public void set_transaction_command() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.set_transaction_command();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.set_transaction_command();
        }
        returnType = -1;
    }

    public void alter_command() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.alter_command();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.alter_command();
        }
        returnType = -1;
    }

    public void close_statement() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.close_statement();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.close_statement();
        }
        returnType = -1;
    }

    public void fetch_statement() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.fetch_statement();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.fetch_statement();
        }
        returnType = -1;
    }

    public void lock_table_statement() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.lock_table_statement();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.lock_table_statement();
        }
        returnType = -1;
    }

    public void open_statement() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.open_statement();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.open_statement();
        }
        returnType = -1;
    }

    public void rollback_statement() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.rollback_statement();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.rollback_statement();
        }
        returnType = -1;
    }

    public void savepoint_statement() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.savepoint_statement();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.savepoint_statement();
        }
        returnType = -1;
    }

    public void select_first() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.select_first();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.select_first();
        }
        returnType = -1;
    }

    public void select_subsequent() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.select_subsequent();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.select_subsequent();
        }
        returnType = -1;
    }

    public void order_clause() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.order_clause();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.order_clause();
        }
        returnType = -1;
    }

    public void update_clause() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.update_clause();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.update_clause();
        }
        returnType = -1;
    }

    public void select_up_to_list() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.select_up_to_list();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.select_up_to_list();
        }
        returnType = -1;
    }

    public void into_clause() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.into_clause();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.into_clause();
        }
        returnType = -1;
    }

    public void table_reference_list_from() throws antlr.RecognitionException,antlr.TokenStreamException{

        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.table_reference_list_from();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.table_reference_list_from();
        }
        returnType = -1;
    }

    public void where_condition_whole() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.where_condition_whole();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.where_condition_whole();
        }
        returnType = -1;
    }

    public void connect_clause() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.connect_clause();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.connect_clause();
        }
        returnType = -1;
    }

    public void group_clause() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.group_clause();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.group_clause();
        }
        returnType = -1;
    }

    public void lvalue_list() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.lvalue_list();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.lvalue_list();
        }
        returnType = -1;
    }

    public antlr.CommonToken alias() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.alias();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.alias();
        }
        returnType = -1;
        return ret;
    }

    public void select_list() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.select_list();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.select_list();
        }
        returnType = -1;
    }

    public void displayed_column() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.displayed_column();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.displayed_column();
        }
        returnType = -1;
    }

    public void selected_table() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.selected_table();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.selected_table();
        }
        returnType = -1;
    }

    public void ansi_spec() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.ansi_spec();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.ansi_spec();
        }
        returnType = -1;
    }

    public void table_reference_list() throws antlr.RecognitionException,antlr.TokenStreamException{

        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.table_reference_list();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.table_reference_list();
        }
        returnType = -1;
    }

    public void condition() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.condition();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.condition();
        }
        returnType = -1;
    }

    public void call_argument() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.call_argument();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.call_argument();
        }
        returnType = -1;
    }

    public antlr.CommonToken schema_name() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.schema_name();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.schema_name();
        }
        returnType = -1;
        return ret;
    }

    public antlr.CommonToken user_defined_function() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.user_defined_function();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.user_defined_function();
        }
        returnType = -1;
        return ret;
    }

/*
    public antlr.CommonToken number_function() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.number_function();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.number_function();
        }
        returnType = -1;
        return ret;
    }

    public antlr.CommonToken char_function() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.char_function();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.char_function();
        }
        returnType = -1;
        return ret;
    }

    public antlr.CommonToken group_function() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.group_function();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.group_function();
        }
        returnType = -1;
        return ret;
    }

    public antlr.CommonToken conversion_function() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.conversion_function();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.conversion_function();
        }
        returnType = -1;
        return ret;
    }

    public antlr.CommonToken other_function() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.other_function();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.other_function();
        }
        returnType = -1;
        return ret;
    }

    public antlr.CommonToken datetime_function() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.datetime_function();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.datetime_function();
        }
        returnType = -1;
        return ret;
    }
*/
    public antlr.CommonToken row_proc() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.row_proc();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.row_proc();
        }
        returnType = -1;
        return ret;
    }

    public antlr.CommonToken the_proc() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.the_proc();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.the_proc();
        }
        returnType = -1;
        return ret;
    }

    public void table_alias() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.table_alias();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.table_alias();
        }
        returnType = -1;
    }

    public void table_spec() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.table_spec();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.table_spec();
        }
        returnType = -1;
    }

    public antlr.CommonToken link_name() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.link_name();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.link_name();
        }
        returnType = -1;
        return ret;
    }

    public void logical_term() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.logical_term();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.logical_term();
        }
        returnType = -1;
    }

    public void maybe_neg_factor() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.maybe_neg_factor();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.maybe_neg_factor();
        }
        returnType = -1;
    }

    public void logical_factor() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.logical_factor();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.logical_factor();
        }
        returnType = -1;
    }

    public void prior_plsql_expression() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.prior_plsql_expression();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.prior_plsql_expression();
        }
        returnType = -1;
    }

    public void exp_set() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.exp_set();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.exp_set();
        }
        returnType = -1;
    }

    public void sorted_def() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.sorted_def();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.sorted_def();
        }
        returnType = -1;
    }

    public void hint() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.hint();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.hint();
        }
        returnType = -1;
    }

    public void column_spec_list() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.column_spec_list();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.column_spec_list();
        }
        returnType = -1;
    }

    public void subquery_update() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.subquery_update();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.subquery_update();
        }
        returnType = -1;
    }

    public void simple_update() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.simple_update();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.simple_update();
        }
        returnType = -1;
    }

    public void lock_mode() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.lock_mode();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.lock_mode();
        }
        returnType = -1;
    }

    public antlr.CommonToken savepoint_name() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.savepoint_name();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.savepoint_name();
        }
        returnType = -1;
        return ret;
    }
/*
    public antlr.CommonToken keyword() throws antlr.RecognitionException,antlr.TokenStreamException{
        antlr.CommonToken ret;
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        ret =super.keyword();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        ret = super.keyword();
        }
        returnType = -1;
        return ret;
    }

    public void keyword2() throws antlr.RecognitionException,antlr.TokenStreamException{
        if (getPredicting() == 0) {
        PsiBuilder.Marker m = builder.mark();
        super.keyword2();
        if(returnType > 0 ){
            m.done( findPlSqlElemType(returnType) );
        } else {
            m.drop();
        }
        } else {
        super.keyword2();
        }
        returnType = -1;
    }
*/
}
